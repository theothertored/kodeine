{
  "version": 3,
  "sources": ["../engine/src/abstractions.ts", "../engine/src/errors.ts", "../engine/src/string-char-reader.ts", "../engine/src/evaluation/evaluation-context.ts", "../engine/src/evaluation/evaluation-tree.ts", "../engine/src/evaluation/evaluables/evaluable.ts", "../engine/src/evaluation/evaluables/kode-value.ts", "../engine/src/evaluation/evaluables/unary-operation.ts", "../engine/src/evaluation/evaluables/binary-operation.ts", "../engine/src/evaluation/evaluables/function-call.ts", "../engine/src/evaluation/evaluables/expression.ts", "../engine/src/evaluation/evaluables/formula.ts", "../engine/src/evaluation/evaluables/broken-evaluable.ts", "../engine/src/evaluation/implementations/base/kode-function-with-modes.ts", "../engine/src/evaluation/implementations/functions/unimplemented-functions.ts", "../engine/src/evaluation/implementations/functions/fl-function.ts", "../engine/src/evaluation/implementations/functions/gv-function.ts", "../engine/src/evaluation/implementations/functions/if-function.ts", "../engine/src/evaluation/implementations/functions/mu-function.ts", "../engine/src/evaluation/implementations/helpers/html-entitity-converter.ts", "../engine/src/evaluation/implementations/helpers/number-to-roman-converter.ts", "../engine/src/evaluation/implementations/helpers/number-to-text-converter.ts", "../engine/src/evaluation/implementations/helpers/ordinal-suffix-helper.ts", "../engine/src/evaluation/implementations/helpers/text-capitalizer.ts", "../engine/src/evaluation/implementations/functions/tc-function.ts", "../engine/src/evaluation/implementations/functions/df-function.ts", "../engine/src/evaluation/implementations/operators/unary-operators.ts", "../engine/src/evaluation/implementations/base/two-mode-binary-operator.ts", "../engine/src/evaluation/implementations/operators/binary-operators.ts", "../engine/src/kodeine-lexer/formula-token.ts", "../engine/src/kodeine-lexer/formula-tokens.ts", "../engine/src/kodeine-lexer/kodeine-lexer.ts", "../engine/src/kodeine-parser/expressions/i-expression-builder.ts", "../engine/src/abstractions.ts", "../engine/src/errors.ts", "../engine/src/string-char-reader.ts", "../engine/src/evaluation/evaluation-context.ts", "../engine/src/evaluation/evaluation-tree.ts", "../engine/src/evaluation/evaluables/evaluable.ts", "../engine/src/evaluation/evaluables/kode-value.ts", "../engine/src/evaluation/evaluables/unary-operation.ts", "../engine/src/evaluation/evaluables/binary-operation.ts", "../engine/src/evaluation/evaluables/function-call.ts", "../engine/src/evaluation/evaluables/expression.ts", "../engine/src/evaluation/evaluables/formula.ts", "../engine/src/evaluation/evaluables/broken-evaluable.ts", "../engine/src/evaluation/implementations/base/kode-function-with-modes.ts", "../engine/src/evaluation/implementations/functions/unimplemented-functions.ts", "../engine/src/evaluation/implementations/functions/fl-function.ts", "../engine/src/evaluation/implementations/functions/gv-function.ts", "../engine/src/evaluation/implementations/functions/if-function.ts", "../engine/src/evaluation/implementations/functions/mu-function.ts", "../engine/src/evaluation/implementations/helpers/html-entitity-converter.ts", "../engine/src/evaluation/implementations/helpers/number-to-roman-converter.ts", "../engine/src/evaluation/implementations/helpers/number-to-text-converter.ts", "../engine/src/evaluation/implementations/helpers/ordinal-suffix-helper.ts", "../engine/src/evaluation/implementations/helpers/text-capitalizer.ts", "../engine/src/evaluation/implementations/functions/tc-function.ts", "../engine/src/evaluation/implementations/functions/df-function.ts", "../engine/src/evaluation/implementations/operators/unary-operators.ts", "../engine/src/evaluation/implementations/base/two-mode-binary-operator.ts", "../engine/src/evaluation/implementations/operators/binary-operators.ts", "../engine/src/kodeine-lexer/formula-token.ts", "../engine/src/kodeine-lexer/kodeine-lexer.ts", "../engine/src/kodeine-parser/expressions/i-expression-builder.ts", "../engine/src/kodeine-parser/expressions/expression-builder.ts", "../engine/src/kodeine-parser/expressions/function-call-builder.ts", "../engine/src/kodeine-parser/expressions/function-occurence.ts", "../engine/src/kodeine-parser/expressions/operator-occurences.ts", "../engine/src/kodeine-parser/kodeine-parser.ts", "../engine/src/kodeine-parser/parsing-context.ts", "../engine/src/kodeine.ts", "../engine/src/kodeine-lexer/formula-tokens.ts", "../engine/src/kodeine-parser/expressions/expression-builder.ts", "../engine/src/kodeine-parser/expressions/function-call-builder.ts", "../engine/src/kodeine-parser/expressions/function-occurence.ts", "../engine/src/kodeine-parser/expressions/operator-occurences.ts", "../engine/src/kodeine-parser/kodeine-parser.ts", "../engine/src/kodeine-parser/parsing-context.ts", "../engine/src/kodeine.ts", "../extension/src/extension.ts", "../extension/src/evaluation-tree-document-manager.ts", "../extension/src/evaluation-steps-text-document-content-provider.ts", "../extension/src/evaluation-tree-data-provider.ts", "../extension/src/global-document-manager.ts", "../extension/src/bidirectional-map.ts", "../extension/src/global-tree-data-provider.ts"],
  "sourcesContent": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import {\r\n    Formula,\r\n    EvaluationContext,\r\n    BinaryOperation,\r\n    UnaryOperation,\r\n    FunctionCall,\r\n    KodeValue,\r\n    FormulaToken\r\n} from \"./kodeine.js\";\r\n\r\n/** A base class for unary and binary kode operators. Requires operators to have a symbol. */\r\nexport abstract class IOperator {\r\n    /** Returns the symbol representing this operator. */\r\n    abstract getSymbol(): string;\r\n}\r\n\r\n/** Represents a kode unary operator. */\r\nexport abstract class IUnaryOperator extends IOperator {\r\n\r\n    /**\r\n     * Implements the operation performed by this operator. \r\n     * @param evalCtx The context of this evaluation.\r\n     * @param operation The operation being evaluated.\r\n     * @param a The argument.\r\n     */\r\n    abstract operation(evalCtx: EvaluationContext, operation: UnaryOperation, a: KodeValue): KodeValue;\r\n\r\n}\r\n\r\n/** Represents a kode binary operator. */\r\nexport abstract class IBinaryOperator extends IOperator {\r\n\r\n    /** Returns the precedence of this operator. Operators with higher precedence values will be evaluated first. */\r\n    abstract getPrecedence(): number;\r\n\r\n    /** \r\n     * Implements the operation performed by this operator. \r\n     * @param evalCtx The context of this evaluation.\r\n     * @param operation The operation being evaluated.\r\n     * @param a The left hand side argument.\r\n     * @param b The right hand side argument.\r\n     */\r\n    abstract operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue;\r\n\r\n}\r\n\r\n\r\n/** Represents a kode function. */\r\nexport abstract class IKodeFunction {\r\n\r\n    /** Returns the name of this function. */\r\n    abstract getName(): string;\r\n\r\n    /** \r\n     * Function implementation. \r\n     * @param evalCtx The context in which this evaluation is taking place.\r\n     * @param call The function call being evaluated.\r\n     * @param args The arguments of the function call.\r\n     */\r\n    abstract call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue;\r\n\r\n}\r\n\r\n\r\n/** Represents a forward-only character reader. */\r\nexport abstract class ICharReader {\r\n\r\n    /**\r\n     * Returns the next {@link charCount} characters without consuming them.\r\n     * @param charCount How many characters to peek.\r\n     * @param offset Optionally, how many characters to offset the peek by.\r\n     * @returns Next {@link charCount} characters of the source as a string. \r\n     */\r\n    abstract peek(charCount: number, offset?: number): string;\r\n\r\n    /**\r\n     * Consumes the next {@link charCount} characters.\r\n     * @param charCount How many characters to consume.\r\n     * @returns Next {@link charCount} characters of the source as a string. \r\n     */\r\n    abstract consume(charCount: number): string;\r\n\r\n    /** Returns the current position of the reader in the source. */\r\n    abstract getPosition(): number;\r\n\r\n    /** Returns whether the reader has reached the end of the source. */\r\n    abstract EOF(): boolean;\r\n\r\n}\r\n\r\n/** Represents a forward-only formula token lexer. */\r\nexport abstract class IFormulaTokenLexer {\r\n\r\n    /**\r\n     * Returns the next {@link tokenCount} tokens without consuming them.\r\n     * @param tokenCount How many tokens to peek.\r\n     * @returns Next {@link tokenCount} tokens of the formula source text as an array. \r\n     */\r\n    abstract peek(tokenCount: number, offset?: number): FormulaToken[];\r\n\r\n    /**\r\n     * Consumes the next {@link tokenCount} tokens.\r\n     * @param tokenCount How many tokens to consume.\r\n     * @returns Next {@link tokenCount} tokens of the formula source text as an array.\r\n     */\r\n    abstract consume(tokenCount: number): FormulaToken[];\r\n\r\n    /** Returns whether the reader has reached the end of the formula source text. */\r\n    abstract EOF(): boolean;\r\n\r\n}\r\n\r\n/** Represents a parser that converts text into an evaluable {@link Formula}. */\r\nexport abstract class IFormulaStringParser {\r\n\r\n    /**\r\n     * Creates an evaluable {@link Formula} .\r\n     * @param source The source of the formula text.\r\n     * @returns An evaluable {@link Formula} object.\r\n     */\r\n    abstract parse(source: string | ICharReader | IFormulaTokenLexer): Formula;\r\n\r\n}\r\n", "import {\r\n    Evaluable,\r\n    FunctionCall,\r\n    KodeValue,\r\n    FormulaToken,\r\n    UnquotedValueToken\r\n} from \"./kodeine.js\";\r\n\r\n/** A base class for errors thrown by kodeine that does not extend {@link Error} - because that breaks `instanceof`. */\r\nexport class KodeError {\r\n\r\n    public message: string;\r\n\r\n    constructor(message: string) {\r\n        this.message = message;\r\n    }\r\n\r\n}\r\n\r\n/** An error thrown by the parser. */\r\nexport class KodeParsingError extends KodeError {\r\n\r\n    /** The token this error is related to. */\r\n    public token: FormulaToken;\r\n\r\n    /** Constructs a {@link KodeParsingError} with a source token and a prefixed message. */\r\n    constructor(prefix: string, token: FormulaToken, message: string) {\r\n        super(`${prefix} around index ${token.getStartIndex()}: ${message}`);\r\n        this.token = token;\r\n    }\r\n}\r\n\r\n/** A generic syntax error. */\r\nexport class KodeSyntaxError extends KodeParsingError {\r\n\r\n    /** \r\n     * Constructs a {@link KodeSyntaxError} with a source token and a message. \r\n     * @param token The token the error is related to.\r\n     * @param message A message explaning the error.\r\n     */\r\n    constructor(token: FormulaToken, message: string) {\r\n        super('Syntax error', token, message);\r\n    }\r\n\r\n}\r\n\r\n/** Thrown when a function call was parsed, but the function implementation was not found in the parsing environment. */\r\nexport class KodeFunctionNotFoundError extends KodeParsingError {\r\n\r\n    /** \r\n     * Constructs a {@link KodeFunctionNotFoundError} with an unquoted value token representing the function name. \r\n     * @param token The unquoted value token representing the function name.\r\n     */\r\n    constructor(token: UnquotedValueToken) {\r\n        super('Function not found', token, `Function with name \"${token.getSourceText()}\" was not found.`);\r\n    }\r\n\r\n}\r\n\r\nexport class UnquotedValueAndFunctionNameCollisionError extends KodeParsingError {\r\n\r\n    /** \r\n     * Constructs a {@link UnquotedValueAndFunctionNameCollisionError} with an unquoted value token for which the collision occurred. \r\n     * @param token The unquoted value token that collided with a function name.\r\n     */\r\n    constructor(token: UnquotedValueToken) {\r\n        super(\r\n            'Unquoted string & function name collision', token, \r\n            `\"${token.getSourceText()}\" is a function name. Kustom will throw \"err: null\", even though this value is not followed by an opening parenthesis.`\r\n        );\r\n    }\r\n\r\n}\r\n\r\n/** Thrown when the lexer produced a token that the parser did not recognize. */\r\nexport class UnrecognizedTokenError extends KodeParsingError {\r\n\r\n    /**\r\n     * Constructs a {@link UnrecognizedTokenError} with the token that was not recognized. \r\n     * @param token The token that was not recognized.\r\n     */\r\n    constructor(token: FormulaToken) {\r\n        super('Unrecognized token', token, `Token \"${token.getName()}\" was not recognized by the parser.`);\r\n    }\r\n\r\n}\r\n\r\n\r\n/** A generic error thrown during formula evaluation. */\r\nexport class EvaluationError extends KodeError {\r\n\r\n    /** The evaluable that threw this evaluation error. */\r\n    public evaluable: Evaluable;\r\n\r\n    /**\r\n     * Constructs an {@link EvaluationError} with an evaluable and a message.\r\n     * @param evaluable The evaluable that threw the error.\r\n     * @param message A message explaining the error.\r\n     */\r\n    constructor(evaluable: Evaluable, message: string) {\r\n        super(`Evaluation error: ${message}`);\r\n        this.evaluable = evaluable;\r\n    }\r\n\r\n}\r\n\r\n/** An error thrown when a function was called with an invalid number of arguments. */\r\nexport class InvalidArgumentCountError extends EvaluationError {\r\n\r\n    /** \r\n     * Constructs a {@link InvalidArgumentCountError} with a function call with an invalid number of arguments and a message. \r\n     * @param funcCall The function call with an invalid number of arguments.\r\n     * @param message A message explaining the error.\r\n     */\r\n    constructor(funcCall: FunctionCall, message: string, funcDescription?: string) {\r\n        super(funcCall, `Invalid argument count for ${funcDescription || funcCall.func.getName() + '()'}: ${message}`)\r\n    }\r\n\r\n}\r\n\r\n/** An error thrown when a function was called with an invalid argument. */\r\nexport class InvalidArgumentError extends EvaluationError {\r\n\r\n    /** \r\n     * Constructs a {@link InvalidArgumentError} with a function call with the invalid argument and a message. \r\n     * @param funcDescription A description of the function that was called with an invalid argument (ex. fl(), tc(reg) etc.).\r\n     * @param argumentName The name of the argument.\r\n     * @param argumentIndex The index of the argument.\r\n     * @param argumentSource The evaluable that returned the invalid argument value.\r\n     * @param invalidValue The value that was invalid.\r\n     * @param message A message explaining the error.\r\n     */\r\n    constructor(funcDescription: string, argumentName: string, argumentIndex: number, argumentSource: Evaluable, invalidValue: string | number | KodeValue, message: string) {\r\n        super(argumentSource, `Value ${invalidValue instanceof KodeValue ? invalidValue.text : invalidValue} given for argument \"${argumentName}\" (#${argumentIndex}) for ${funcDescription} is invalid: ${message}`)\r\n    }\r\n\r\n}\r\n\r\n/** An error thrown when a regex expression passed to a function or operator throws an exception. */\r\nexport class RegexEvaluationError extends EvaluationError {\r\n    /** \r\n     * Constructs a {@link InvalidArgumentCountError} with a function call with an invalid number of arguments and a message. \r\n     * @param funcCall The function call with an invalid number of arguments.\r\n     * @param message A message explaining the error.\r\n     */\r\n    constructor(evaluable: Evaluable, message: string) {\r\n        super(evaluable, `Regex error: ${message}`)\r\n    }\r\n}\r\n", "import { ICharReader } from \"./kodeine.js\";\r\n\r\n/** A forward only character reader using a string variable as its source of characters. */\r\nexport class StringCharReader extends ICharReader {\r\n\r\n    /** Source string. */\r\n    private _text: string;\r\n\r\n    /** The current position of the reader. */\r\n    private _position: number;\r\n\r\n    /** \r\n     * Constructs a {@link StringCharReader} with a given string as a source of characters.\r\n     * @param text The source string.\r\n     */\r\n    constructor(text: string) {\r\n        super();\r\n        this._text = text;\r\n        this._position = 0;\r\n    }\r\n\r\n    getPosition(): number {\r\n        return this._position;\r\n    }\r\n\r\n    peek(charCount: number, offset?: number): string {\r\n        offset ??= 0;\r\n        return this._text.substring(this._position + offset, this._position + offset + charCount);\r\n    }\r\n\r\n    consume(charCount: number): string {\r\n        let oldPos = this._position;\r\n        this._position += charCount;\r\n        return this._text.substring(oldPos, oldPos + charCount)\r\n    }\r\n\r\n    EOF(): boolean {\r\n        return this._position >= this._text.length;\r\n    }\r\n\r\n}", "import { \r\n    EvaluationError,\r\n    Evaluable,\r\n    FormulaEvaluationTreeNode,\r\n    Formula,\r\n    KodeValue,\r\n    UnaryOperation\r\n} from \"../kodeine.js\";\r\n\r\n/** The context of the evaluation, containing the state of the device, editor, the module this evaluation is taking place in etc. */\r\nexport class EvaluationContext {\r\n\r\n    /** Side effects produced during evaluation. Expected to be cleared using {@link clearSideEffects()} before each evaluation run. */\r\n    public sideEffects: EvaluationSideEffects;\r\n\r\n    /** The value that should replace the value literal `i`. Intended to be used in `fl()`. */\r\n    public iReplacement: KodeValue | null = null;\r\n\r\n    /** A map of global values and their corresponding formulas. */\r\n    public globals: Map<string, Formula> = new Map<string, Formula>();\r\n\r\n    /** \r\n     * If set to true, a formula evaluation tree should be built during evaluation.\r\n     * After evaluation, the tree can be accessed via `this.sideEffects.lastEvaluationTreeNode`.\r\n     * @see {@link FormulaEvaluationTree}\r\n     */\r\n    public buildEvaluationTree: boolean = false;\r\n\r\n    /** Constructs an empty {@link EvaluationContext}. */\r\n    constructor() {\r\n        this.sideEffects = new EvaluationSideEffects();\r\n    }\r\n\r\n    /** Clears all {@link sideEffects} from the context. */\r\n    clearSideEffects() {\r\n        this.sideEffects = new EvaluationSideEffects();\r\n    }\r\n\r\n    /** Creates a clone of the context with empty side effects. */\r\n    clone(): EvaluationContext {\r\n\r\n        let newCtx = new EvaluationContext();\r\n\r\n        // copy i replacement directly\r\n        newCtx.iReplacement = this.iReplacement;\r\n\r\n        // clone globals map\r\n        newCtx.globals = new Map(this.globals);\r\n\r\n        return newCtx;\r\n\r\n    }\r\n}\r\n\r\n\r\n/** Holds all side effects produced during evaluation. */\r\nexport class EvaluationSideEffects {\r\n\r\n    public warnings: EvaluationWarning[] = [];\r\n    public errors: EvaluationError[] = [];\r\n\r\n    public globalNameStack: string[] = [];\r\n\r\n    public lastEvaluationTreeNode: FormulaEvaluationTreeNode | null = null;\r\n\r\n}\r\n\r\n/** A warning produced during evaluation. */\r\nexport class EvaluationWarning {\r\n\r\n    /** The evaluable this warning is related to. */\r\n    public evaluable: Evaluable;\r\n\r\n    /** A message explaining the warning. */\r\n    public message: string;\r\n\r\n    constructor(evaluable: Evaluable, message: string) {\r\n        this.evaluable = evaluable;\r\n        this.message = message;\r\n    }\r\n\r\n}\r\n\r\n/** Warns about using negation with a non-numeric argument. */\r\nexport class UnaryMinusStringModeWarning extends EvaluationWarning {\r\n\r\n    constructor(operation: UnaryOperation) {\r\n        super(operation, 'Weird behavior: string negation. Negating a string returns itself with \"-null\" appended (ex. -abc => abc-null).');\r\n    }\r\n\r\n}\r\n", "import {\r\n    KodeFunctionWithModes,\r\n    BinaryOperation,\r\n    FunctionCall,\r\n    KodeValue,\r\n    UnaryOperation,\r\n    Formula,\r\n    Evaluable,\r\n    Expression,\r\n    DollarSignToken\r\n} from \"../kodeine.js\";\r\n\r\n// the evaluation tree is a structure representing a single evaluation run.\r\n// the leaves of the tree are literals, and every node is an object containing an evaluable and its evaluation result.\r\n\r\n// example formula:\r\n// $if(2 + 2 = 4, true, false)$\r\n\r\n// evaluation tree:\r\n// Formula -> true\r\n// -  Expression -> true\r\n// -  -  Function call \"if()\" -> true\r\n// -  -  -  Operator \"=\" -> 1\r\n// -  -  -  -  Operator \"+\" -> 4\r\n// -  -  -  -  -  Literal \"2\"\r\n// -  -  -  -  -  Literal \"2\"\r\n// -  -  -  -  Literal \"4\"\r\n// -  -  -  Literal \"true\"\r\n// -  -  -  Literal \"false\"\r\n\r\nexport class EvaluationStepReplacement {\r\n\r\n    public readonly startIndex: number;\r\n    public readonly sourceLength: number;\r\n    public readonly replacementText: string;\r\n\r\n    constructor(evaluable: Evaluable, result: KodeValue | string) {\r\n        this.startIndex = evaluable.source!.getStartIndex();\r\n        this.sourceLength = evaluable.source!.getEndIndex() - this.startIndex;\r\n\r\n        if (result instanceof KodeValue)\r\n            this.replacementText = result.isNumeric ? result.text : `\"${result.text}\"`;\r\n        else\r\n            this.replacementText = result;\r\n    }\r\n\r\n}\r\n\r\n/** Base class for all evaluation tree nodes. */\r\nexport abstract class FormulaEvaluationTreeNode {\r\n\r\n    /** What evaluating this node resulted in. */\r\n    public readonly result: KodeValue;\r\n\r\n    /** Constructs a {@link FormulaEvaluationTreeNode} with a given result. */\r\n    constructor(result: KodeValue) {\r\n        this.result = result;\r\n    }\r\n\r\n    /** A human-readable description of this node. */\r\n    abstract getDescription(): string;\r\n\r\n    /** \r\n     * Adds step replacements to {@link replacements} for every child node of this node and for this node itself. \r\n     * @param replacements An array to add the replacements to.\r\n    */\r\n    abstract addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void;\r\n\r\n}\r\n\r\n/** A formula, what it evaluated to and nodes for its parts.  */\r\nexport class FormulaEvaluationTree extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly formula: Formula;\r\n    public readonly parts: FormulaEvaluationTreeNode[];\r\n\r\n    constructor(formula: Formula, parts: FormulaEvaluationTreeNode[], result: KodeValue) {\r\n        super(result);\r\n        this.formula = formula;\r\n        this.parts = parts;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return 'formula'\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]) {\r\n\r\n        for (const part of this.parts) {\r\n            part.addStepReplacementsTo(replacements);\r\n        }\r\n\r\n        replacements.push(new EvaluationStepReplacement(this.formula, this.result.text));\r\n\r\n    }\r\n\r\n    private _replaceStringSection(original: string, start: number, length: number, insertion: string): string {\r\n\r\n        let beforeReplacement = original.substring(0, start);\r\n        let afterReplacement = original.substring(start + length);\r\n        return `${beforeReplacement}${insertion}${afterReplacement}`;\r\n\r\n    }\r\n\r\n    printEvaluationSteps(): string {\r\n\r\n        type Range = { start: number, length: number };\r\n        type Change = { source: Range, relative: Range, replacementLength: number };\r\n\r\n        // get source text replacements for evaluation steps\r\n        let stepReplacements: EvaluationStepReplacement[] = [];\r\n        this.addStepReplacementsTo(stepReplacements);\r\n\r\n        let originalText = this.formula.getSourceText();\r\n        let output = `-- formula text --\\n\\n${originalText}`;\r\n\r\n        let lastStepText = originalText;\r\n        let changes: Change[] = [];\r\n\r\n        for (let i = 0; i < stepReplacements.length; i++) {\r\n\r\n            const replacement = stepReplacements[i];\r\n\r\n            // each Change is an EvaluationStepReplacement adjusted with regard to previous Changes\r\n            //\r\n            // 1. if the EvaluationStepReplacement replaces a section before the Change, the Change's start has to be offset\r\n            //      Example - when the Change replaces a function argument, when a previous argument has already been replaced:\r\n            //      fn(2 + 2, 3 + 3)    original\r\n            //      fn(4, 3 + 3)        1st change (2 + 2 -> 4) replacementLength = 1, source = relative = { start: 3, length: 5 }\r\n            //      fn(4, 6)            2nd change (3 + 3 -> 6) replacementLength = 1, source = { start: 10, length: 5 }, relative = { start: 6, length: 5 }\r\n            //      10                  3rd change (fn(4, 6) -> 10) replacementLength = 2, source = { start: 0, length: 16 }, relative = { start: 0, length: 8 }\r\n            //      \r\n            // 2. if the EvaluationStepReplacement replaces a section inside the Change, the Change's length has to change\r\n            //      Example - when the Change replaces a function call, when its arguments were already replaced\r\n            //      fn(2 + 2)           original\r\n            //      fn(4)               1st change (2 + 2 -> 4) replacementLength = 1, source = relative = { start: 3, length: 5 }\r\n            //      8                   2nd change (fn(4) -> 8) replacementLength = 1, source = { start: 0, length: 9 }, relative = { start: 0, length: 5 }\r\n            //\r\n            // 3. if the EvaluationStepReplacement replaces a section after the Change, the Change is not affected.\r\n\r\n            let change: Change = {\r\n                source: {\r\n                    start: replacement.startIndex,\r\n                    length: replacement.sourceLength\r\n                },\r\n                relative: {\r\n                    start: replacement.startIndex,\r\n                    length: replacement.sourceLength\r\n                },\r\n                replacementLength: replacement.replacementText.length\r\n            };\r\n\r\n            for (let j = 0; j < changes.length; j++) {\r\n                const prevChange = changes[j];\r\n\r\n                if (prevChange.source.start + prevChange.source.length <= change.source.start) {\r\n\r\n                    // case 1\r\n                    change.relative.start = change.relative.start - prevChange.relative.length + prevChange.replacementLength;\r\n\r\n                } else if (prevChange.source.start >= change.source.start && prevChange.source.start + prevChange.source.length <= change.source.start + change.source.length) {\r\n\r\n                    // case 2\r\n                    change.relative.length = change.relative.length - prevChange.relative.length + prevChange.replacementLength;\r\n\r\n                } else {\r\n\r\n                    // case 3 - do nothing\r\n\r\n                }\r\n\r\n            }\r\n\r\n            let replacing = lastStepText.substring(change.relative.start, change.relative.start + change.relative.length);\r\n\r\n            lastStepText = this._replaceStringSection(lastStepText, change.relative.start, change.relative.length, replacement.replacementText);\r\n            output += `\\n\\n-- step ${i + 1} --\\n\\n${lastStepText}`;\r\n\r\n            changes.push(change);\r\n        }\r\n\r\n        output += `\\n\\n-- result --\\n\\n${this.result.text}`;\r\n\r\n        return output;\r\n\r\n    }\r\n\r\n}\r\n\r\n/** An expression, what it evaluated to and a node for its child evaluable. */\r\nexport class EvaluatedExpression extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly expression: Expression;\r\n    public readonly child: FormulaEvaluationTreeNode;\r\n\r\n    constructor(expression: Expression, child: FormulaEvaluationTreeNode, result: KodeValue) {\r\n        super(result);\r\n        this.expression = expression;\r\n        this.child = child;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return 'expression';\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        this.child.addStepReplacementsTo(replacements);\r\n\r\n        // don't add evaluable part root expressions to steps since they look weird\r\n        // yea it's a janky solution but it works\r\n        if (!(this.expression.source!.tokens[0] instanceof DollarSignToken)) {\r\n            replacements.push(new EvaluationStepReplacement(this.expression, this.result));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/** A function call, what it evaluated to and nodes for its arguments. */\r\nexport class EvaluatedFunctionCall extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly args: FormulaEvaluationTreeNode[];\r\n    public readonly call: FunctionCall;\r\n\r\n    constructor(call: FunctionCall, args: FormulaEvaluationTreeNode[], result: KodeValue) {\r\n        super(result);\r\n        this.call = call;\r\n        this.args = args;\r\n    }\r\n\r\n    getDescription(): string {\r\n\r\n        if (this.call.func instanceof KodeFunctionWithModes) {\r\n\r\n            return `${this.call.func.getName()}(${this.args[0]?.result.text}) call`\r\n\r\n        } else {\r\n\r\n            return `${this.call.func.getName()}() call`\r\n\r\n        }\r\n\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        this.args.forEach(a => a.addStepReplacementsTo(replacements));\r\n        replacements.push(new EvaluationStepReplacement(this.call, this.result));\r\n    }\r\n\r\n}\r\n\r\n/** A binary operation, what it evaluated to and nodes for its arguments. */\r\nexport class EvaluatedBinaryOperation extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly operation: BinaryOperation;\r\n    public readonly argA: FormulaEvaluationTreeNode;\r\n    public readonly argB: FormulaEvaluationTreeNode;\r\n\r\n    constructor(operation: BinaryOperation, argA: FormulaEvaluationTreeNode, argB: FormulaEvaluationTreeNode, result: KodeValue) {\r\n        super(result);\r\n        this.operation = operation;\r\n        this.argA = argA;\r\n        this.argB = argB;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return `${this.operation.operator.getSymbol()} operator`;\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        this.argA.addStepReplacementsTo(replacements);\r\n        this.argB.addStepReplacementsTo(replacements);\r\n        replacements.push(new EvaluationStepReplacement(this.operation, this.result));\r\n    }\r\n\r\n}\r\n\r\n/** A unary operation, what it evaluated to and a node for its argument. */\r\nexport class EvaluatedUnaryOperation extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly operation: UnaryOperation;\r\n    public readonly arg: FormulaEvaluationTreeNode;\r\n\r\n    constructor(operation: UnaryOperation, arg: FormulaEvaluationTreeNode, result: KodeValue) {\r\n        super(result);\r\n        this.operation = operation;\r\n        this.arg = arg;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return `${this.operation.operator.getSymbol()} operator`;\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        this.arg.addStepReplacementsTo(replacements);\r\n        replacements.push(new EvaluationStepReplacement(this.operation, this.result));\r\n    }\r\n\r\n}\r\n\r\n/** A node denoting that a replacement took place (for example `i` being replaced with a value in `fl()`). */\r\nexport class LiteralReplacement extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly sourceLiteral: Literal;\r\n\r\n    constructor(replacementValue: KodeValue, sourceLiteral: Literal) {\r\n        super(replacementValue);\r\n        this.sourceLiteral = sourceLiteral;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return `value replacement`;\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        replacements.push(new EvaluationStepReplacement(this.sourceLiteral.result, this.result));\r\n    }\r\n\r\n}\r\n\r\n/** A leaf node denoting a literal value that didn't need to be evaluated. */\r\nexport class Literal extends FormulaEvaluationTreeNode {\r\n\r\n    constructor(value: KodeValue) {\r\n        super(value);\r\n    }\r\n\r\n    getDescription(): string {\r\n        return this.result.isNumeric ? 'numeric value' : 'value';\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        // literals don't replace anything    \r\n    }\r\n\r\n}\r\n\r\n/** A node denoting that an evaluable could not be evaluated. */\r\nexport class CouldNotBeEvaluated extends FormulaEvaluationTreeNode {\r\n\r\n    public readonly evaluable: Evaluable;\r\n\r\n    constructor(evaluable: Evaluable, result: KodeValue) {\r\n        super(result);\r\n        this.evaluable = evaluable;\r\n    }\r\n\r\n    getDescription(): string {\r\n        return `evaluation failed`\r\n    }\r\n\r\n    addStepReplacementsTo(replacements: EvaluationStepReplacement[]): void {\r\n        replacements.push(new EvaluationStepReplacement(this.evaluable, this.result));\r\n    }\r\n\r\n}\r\n", "import { \r\n    FormulaToken,\r\n    EvaluationContext,\r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\n/** Represents a part of a formula that can be evaluated. */\r\nexport abstract class Evaluable {\r\n\r\n    /** The source of this evaluable. */\r\n    public source: EvaluableSource | undefined;\r\n\r\n    /** Base constructor that sets the source of the evaluable. */\r\n    constructor(source?: EvaluableSource) {\r\n        this.source = source;\r\n    }\r\n\r\n    /** \r\n     * Evaluates this evaluable into a concrete kode value.\r\n     * @param evalCtx The context in which this evaluation is taking place.\r\n     */\r\n    abstract evaluate(evalCtx: EvaluationContext): KodeValue;\r\n\r\n    getSourceText() {\r\n        return this.source!.tokens.map(t => t.getSourceText()).join('');\r\n    }\r\n\r\n}\r\n\r\n\r\n/** A set of information tying an evaluable to a part of the formula source text and tokens. */\r\nexport class EvaluableSource {\r\n\r\n    public readonly tokens: FormulaToken[];\r\n\r\n    constructor(...tokens: FormulaToken[]) {\r\n        this.tokens = tokens;\r\n    }\r\n\r\n    /** Gets the start index of the first source token. */\r\n    public getStartIndex(): number {\r\n        if (this.tokens.length > 0)\r\n            return this.tokens[0].getStartIndex();\r\n        else\r\n            throw new Error('Evaluable source contains no tokens.');\r\n    }\r\n\r\n    /** Gets the end index of the last source token. */\r\n    public getEndIndex(): number {\r\n        if (this.tokens.length > 0)\r\n            return this.tokens[this.tokens.length - 1].getEndIndex();\r\n        else\r\n            throw new Error('Evaluable source contains no tokens.');\r\n    }\r\n\r\n    static createByConcatenatingSources(evaluables: Evaluable[]): EvaluableSource {\r\n\r\n        let tokens: FormulaToken[] = [];\r\n\r\n        evaluables.forEach(ev => {\r\n            if (Array.isArray(ev.source?.tokens)) {\r\n                tokens.push(...ev.source!.tokens);\r\n            }\r\n        })\r\n\r\n        return new EvaluableSource(...tokens);\r\n    }\r\n\r\n}\r\n", "import {\r\n    QuotedValueToken,\r\n    UnquotedValueToken,\r\n    Evaluable,\r\n    EvaluableSource,\r\n    EvaluationContext,\r\n    Literal\r\n} from \"../../kodeine.js\";\r\nimport { LiteralReplacement } from \"../evaluation-tree.js\";\r\n\r\n/** Describes a JS type that can be converted to a KodeValue. */\r\nexport type ConvertibleToKodeValue = string | number | boolean | KodeValue;\r\n\r\n/** A concrete kode value. */\r\nexport class KodeValue extends Evaluable {\r\n\r\n    /** Value as text. */\r\n    public readonly text: string;\r\n\r\n    /** Whether the value is numeric. */\r\n    public readonly isNumeric: boolean;\r\n\r\n    /** Whether the value is a string containing only i. Should only be set if true. */\r\n    public readonly isI: boolean | undefined;\r\n\r\n    /** Value as number. {@link NaN} if the value is not numeric. */\r\n    public readonly numericValue: number;\r\n\r\n    /** \r\n     * Creates a kode value from a JS value.\r\n     * - String values will be parsed as numbers if possible.\r\n     * - Boolean values will be converted to numbers (0 and 1).\r\n     * @param value The value to create the kode value from.\r\n     * @param source Optionally, the source of this value.\r\n     */\r\n    constructor(value: ConvertibleToKodeValue, source?: EvaluableSource) {\r\n\r\n        // pass the source to the Evaluable constructor\r\n        super(source);\r\n\r\n        if (typeof value === 'boolean') {\r\n\r\n            // the value is a boolean, convert to 0 or 1\r\n            this.numericValue = value ? 1 : 0;\r\n            this.text = this.numericValue.toString();\r\n            this.isNumeric = true;\r\n\r\n        } else if (typeof value === 'string') {\r\n\r\n            // the value is a string, try to parse as number\r\n            this.text = value;\r\n            this.numericValue = value?.trim() ? Number(value) : NaN; // Number('[empty or whitespace]') = 0, so an additional check is needed\r\n            this.isNumeric = !isNaN(this.numericValue);\r\n\r\n            // only set isI if it's true\r\n            let isI = value.trim().toLowerCase() === 'i';\r\n            if (isI) this.isI = true;\r\n\r\n        } else if (typeof value === 'number') {\r\n\r\n            // the value is a number\r\n            this.numericValue = value;\r\n            this.text = value.toString();\r\n            this.isNumeric = true;\r\n\r\n        } else {\r\n\r\n            // the value is a KodeValue\r\n            this.text = value.text;\r\n            this.isNumeric = value.isNumeric;\r\n            this.numericValue = value.numericValue;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n        let literal = new Literal(this);\r\n\r\n        if (evalCtx.iReplacement && this.isI) {\r\n\r\n            // we are currently replacing i with a different value \r\n            // and this value is i, return the replacement value\r\n\r\n            if (evalCtx.buildEvaluationTree) {\r\n\r\n                evalCtx.sideEffects.lastEvaluationTreeNode = new LiteralReplacement(\r\n                    evalCtx.iReplacement, literal\r\n                );\r\n\r\n            }\r\n\r\n            return evalCtx.iReplacement;\r\n\r\n        } else {\r\n\r\n            // return self by default\r\n\r\n            if (evalCtx.buildEvaluationTree) {\r\n\r\n                evalCtx.sideEffects.lastEvaluationTreeNode = literal;\r\n\r\n            }\r\n\r\n            return this;\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    /** Checks whether this value is equal to another value. */\r\n    equals(other: KodeValue): boolean {\r\n\r\n        if (this.isNumeric && other.isNumeric)\r\n            return this.numericValue == other.numericValue;\r\n\r\n        else if (this.isNumeric || other.isNumeric)\r\n            return false;\r\n\r\n        else\r\n            return this.text.trim().toLowerCase() == other.text.trim().toLowerCase();\r\n\r\n    }\r\n\r\n    static fromToken(token: (QuotedValueToken | UnquotedValueToken)): KodeValue {\r\n        return new KodeValue(token.getValue(), new EvaluableSource(token));\r\n    }\r\n\r\n}\r\n", "import {\r\n    IUnaryOperator,\r\n    Evaluable,\r\n    EvaluableSource,\r\n    EvaluationContext,\r\n    EvaluatedUnaryOperation,\r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\n/** An operation consisting of a unary operator and an evaluable argument. */\r\nexport class UnaryOperation extends Evaluable {\r\n\r\n    /** The operator. */\r\n    public readonly operator: IUnaryOperator;\r\n\r\n    /** The only argument. */\r\n    public readonly arg: Evaluable;\r\n\r\n    /**\r\n     * Constructs a binary operation from an operator and two arguments.\r\n     * @param operator The operator.\r\n     * @param arg The only argument.\r\n     * @param source Optionally, the source of this operation.\r\n     */\r\n    constructor(operator: IUnaryOperator, arg: Evaluable, source?: EvaluableSource) {\r\n        super(source);\r\n        this.operator = operator;\r\n        this.arg = arg;\r\n    }\r\n\r\n    public evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n        if (evalCtx.buildEvaluationTree) {\r\n\r\n            // we are building an evaluation tree\r\n\r\n            let argResult = this.arg.evaluate(evalCtx);\r\n            let argNode = evalCtx.sideEffects.lastEvaluationTreeNode!;\r\n\r\n            let result = this.operator.operation(evalCtx, this, argResult);\r\n\r\n            evalCtx.sideEffects.lastEvaluationTreeNode = new EvaluatedUnaryOperation(\r\n                this, argNode, result\r\n            );\r\n\r\n            return result;\r\n\r\n        } else {\r\n\r\n            // we are not building an evaluation tree, simple call\r\n            return this.operator.operation(evalCtx, this, this.arg.evaluate(evalCtx));\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "import { \r\n    IBinaryOperator,\r\n    Evaluable, EvaluableSource,\r\n    EvaluationContext,\r\n    EvaluatedBinaryOperation, \r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\n/** An operation consisting of an binary operator and two evaluable arguments. */\r\nexport class BinaryOperation extends Evaluable {\r\n\r\n    /** The operator. */\r\n    public readonly operator: IBinaryOperator;\r\n\r\n    /** The left hand side argument. */\r\n    public readonly argA: Evaluable;\r\n\r\n    /** The right hand side argument. */\r\n    public readonly argB: Evaluable;\r\n\r\n    /**\r\n     * Constructs a binary operation from an operator and two arguments.\r\n     * @param operator The operator.\r\n     * @param argA The left hand side argument.\r\n     * @param argB The right hand side argument.\r\n     * @param source Optionally, the source of this operation.\r\n     */\r\n    constructor(operator: IBinaryOperator, argA: Evaluable, argB: Evaluable, source?: EvaluableSource) {\r\n        super(source);\r\n        this.operator = operator;\r\n        this.argA = argA;\r\n        this.argB = argB;\r\n    }\r\n\r\n    /** Evaluates both arguments and runs the operation using the resulting values. */\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n\r\n        if (evalCtx.buildEvaluationTree) {\r\n\r\n            // we are building an evaluation tree\r\n\r\n            let argAResult = this.argA.evaluate(evalCtx);\r\n            let argANode = evalCtx.sideEffects.lastEvaluationTreeNode!;\r\n\r\n            let argBResult = this.argB.evaluate(evalCtx);\r\n            let argBNode = evalCtx.sideEffects.lastEvaluationTreeNode!;\r\n\r\n            let result = this.operator.operation(evalCtx, this, argAResult, argBResult);\r\n\r\n            evalCtx.sideEffects.lastEvaluationTreeNode = new EvaluatedBinaryOperation(\r\n                this, argANode, argBNode, result\r\n            );\r\n\r\n            return result;\r\n        }\r\n        else {\r\n\r\n            // we are not building an evaluation tree, simple call\r\n            return this.operator.operation(evalCtx, this, this.argA.evaluate(evalCtx), this.argB.evaluate(evalCtx));\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n", "import {\r\n    IKodeFunction,\r\n    EvaluationError,\r\n    Evaluable,\r\n    EvaluationContext,\r\n    EvaluatedFunctionCall,\r\n    KodeValue,\r\n    EvaluableSource,\r\n    FormulaEvaluationTreeNode\r\n} from \"../../kodeine.js\";\r\n\r\n/** A function call, consisting of a kode function being called and arguments for the call. */\r\nexport class FunctionCall extends Evaluable {\r\n\r\n    /** The kode function being called. */\r\n    public readonly func: IKodeFunction;\r\n\r\n    /** The arguments the function will be called with. */\r\n    public readonly args: Evaluable[];\r\n\r\n    /**\r\n     * Constructs a function call from a kode function being called, arguments for the call, and, optionally a source of the call.\r\n     * @param func The kode function being called.\r\n     * @param args The arguments for the function call.\r\n     * @param source Optionally, the source of the call.\r\n     */\r\n    constructor(func: IKodeFunction, args: Evaluable[], source?: EvaluableSource) {\r\n        super(source);\r\n        this.func = func;\r\n        this.args = args;\r\n    }\r\n\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n\r\n        try {\r\n\r\n            if (evalCtx.buildEvaluationTree) {\r\n\r\n                let argResults: KodeValue[] = [];\r\n                let argNodes: FormulaEvaluationTreeNode[] = [];\r\n\r\n                for (let i = 0; i < this.args.length; i++) {\r\n                    const arg = this.args[i];\r\n\r\n                    argResults[i] = arg.evaluate(evalCtx);\r\n                    argNodes[i] = evalCtx.sideEffects.lastEvaluationTreeNode!;\r\n\r\n                }\r\n\r\n                let funcResult = this.func.call(evalCtx, this, argResults);\r\n\r\n                evalCtx.sideEffects.lastEvaluationTreeNode = new EvaluatedFunctionCall(\r\n                    this, argNodes, funcResult\r\n                );\r\n\r\n                return funcResult;\r\n\r\n            } else {\r\n\r\n                // call the function with an array of values acquired by evaluating all arguments\r\n                return this.func.call(evalCtx, this, this.args.map(a => a.evaluate(evalCtx)));\r\n            }\r\n\r\n        } catch (err: any) {\r\n\r\n            if (err instanceof EvaluationError) {\r\n\r\n                // add error to evaluation side effects\r\n                evalCtx.sideEffects.errors.push(err);\r\n\r\n                // return empty string from the function call\r\n                return new KodeValue('', this.source);\r\n\r\n            } else {\r\n\r\n                // rethrow other errors (crashes)\r\n                throw err;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}", "import {\r\n    Evaluable, \r\n    EvaluableSource,\r\n    EvaluationContext,\r\n    EvaluatedExpression,\r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\n/** \r\n * An expression is a set of evaluables and operators. \r\n * The {@link Expression} class wraps an {@link evaluable} \r\n * that is the last-in-order operation in the expression,\r\n * but it also keeps track of the tokens that surround the expression in its {@link source}  \r\n * \r\n * For example, `(2 + 2 * 2)` would have an addition binary operation as its {@link evaluable}\r\n * and include the opening and closing parentheses in its source tokens  \r\n * *(then the addition binary operation would have the multiplication binary operation as its right hand side argument)*.\r\n */\r\nexport class Expression extends Evaluable {\r\n\r\n    /** The last-in-order operation of this expression, or the only evaluable of this expression. */\r\n    public readonly evaluable: Evaluable;\r\n\r\n    /**\r\n     * Constructs an expression from an evaluable and, optionally, a source.\r\n     * @param evaluable The last-in-order operation of this expression, or the only evaluable of this expression.\r\n     * @param source Optionally, a source of this expression.\r\n     */\r\n    constructor(evaluable: Evaluable, source?: EvaluableSource) {\r\n        super(source);\r\n        this.evaluable = evaluable;\r\n    }\r\n\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n        let result = this.evaluable.evaluate(evalCtx);\r\n\r\n        if (evalCtx.buildEvaluationTree) {\r\n\r\n            evalCtx.sideEffects.lastEvaluationTreeNode = new EvaluatedExpression(\r\n                this, evalCtx.sideEffects.lastEvaluationTreeNode!, result\r\n            );\r\n\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n}\r\n", "import {\r\n    EvaluationError,\r\n    Evaluable,\r\n    EvaluableSource,\r\n    EvaluationContext,\r\n    FormulaEvaluationTree,\r\n    FormulaEvaluationTreeNode,\r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\n/**\r\n * A formula consists of several evaluables. The values of the evaluables are concatenated to form the formula result.\r\n */\r\nexport class Formula extends Evaluable {\r\n\r\n    public readonly evaluables: Evaluable[] = [];\r\n\r\n    constructor(evaluables: Evaluable[]) {\r\n        super(EvaluableSource.createByConcatenatingSources(evaluables));\r\n        this.evaluables = evaluables;\r\n    }\r\n\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n        let result: KodeValue;\r\n        let parts: FormulaEvaluationTreeNode[] = [];\r\n\r\n        if (this.evaluables.length === 0) {\r\n\r\n            // no evaluables in this formula, return empty string.\r\n            result = new KodeValue(\"\", this.source);\r\n\r\n        } else {\r\n\r\n            // mulitple evaluables, evaluate each one and concatenate the results.\r\n\r\n            let output = '';\r\n\r\n            for (var evaluable of this.evaluables) {\r\n\r\n                try {\r\n\r\n                    let partResult = evaluable.evaluate(evalCtx);\r\n\r\n                    if (evalCtx.buildEvaluationTree) {\r\n\r\n                        parts.push(evalCtx.sideEffects.lastEvaluationTreeNode!);\r\n\r\n                    }\r\n\r\n                    output += partResult.text;\r\n\r\n                } catch (err) {\r\n\r\n                    if (err instanceof EvaluationError) {\r\n\r\n                        // add evaluation errors to context\r\n                        evalCtx.sideEffects.errors.push(err);\r\n\r\n                    } else {\r\n\r\n                        // rethrow all other errors (crashes)\r\n                        throw err;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            result = new KodeValue(output, this.source);\r\n\r\n        }\r\n\r\n        if (evalCtx.buildEvaluationTree) {\r\n\r\n            evalCtx.sideEffects.lastEvaluationTreeNode = new FormulaEvaluationTree(\r\n                this, parts, result\r\n            );\r\n\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { \r\n    Evaluable, EvaluableSource,\r\n    EvaluationContext,\r\n    CouldNotBeEvaluated,\r\n    KodeValue\r\n} from \"../../kodeine.js\";\r\n\r\nexport class BrokenEvaluable extends Evaluable {\r\n\r\n    constructor(source?: EvaluableSource) {\r\n        super(source);\r\n    }\r\n\r\n    evaluate(evalCtx: EvaluationContext): KodeValue {\r\n\r\n        let result = new KodeValue('', this.source);\r\n\r\n        if (evalCtx.buildEvaluationTree) {\r\n\r\n            evalCtx.sideEffects.lastEvaluationTreeNode = new CouldNotBeEvaluated(this, result);\r\n\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}", "import {\r\n    InvalidArgumentCountError,\r\n    InvalidArgumentError,\r\n    IKodeFunction,\r\n    EvaluationContext,\r\n    FunctionCall,\r\n    ConvertibleToKodeValue,\r\n    KodeValue\r\n} from \"../../../kodeine.js\";\r\n\r\n/** An internal helper type holding elements extracted from an arugment pattern using regex. */\r\ntype ArgPatternElements = { source: string, type: string, name: string, isOptional: boolean, isRest: boolean, restMinCount: number };\r\n\r\n/** An internal type describing a primitive that can be validated and passed to a mode implementation function. */\r\ntype ModeImplementationFunctionArgPrimitive = string | number | KodeValue;\r\n\r\n/**\r\n * An internal type describing the types of arguments that a mode implementation function can take \r\n * (either a primitive, or an array of primitives in a rest parameter) \r\n */\r\ntype ModeImplementationFunctionArg = ModeImplementationFunctionArgPrimitive | ModeImplementationFunctionArgPrimitive[];\r\n\r\n/** \r\n * An internal type describing a mode implementation function that has {@link ModeImplementationFunctionContext} as its `this` \r\n * and returns something that can be converted to a {@link KodeValue}.\r\n */\r\ntype ModeImplementationFunction = (this: ModeImplementationFunctionContext, ...args: any[]) => ConvertibleToKodeValue;\r\n\r\n/** An internal class holding a list of argument patterns and an implementation of a function mode. */\r\nclass FunctionMode {\r\n\r\n    /** A list of argument patterns. */\r\n    public readonly argumentPatterns: string[];\r\n\r\n    /** A function implementing the mode. */\r\n    public readonly implementationFunc: ModeImplementationFunction;\r\n\r\n    /**\r\n     * Constructs a {@link FunctionMode} with a list of argument patterns and a function implementing the mode.\r\n     * @param argumentPatterns A list of argument patterns.\r\n     * @param implementationFunction A function implementing the mode.\r\n     */\r\n    constructor(argumentPatterns: string[], implementationFunction: ModeImplementationFunction) {\r\n        this.argumentPatterns = argumentPatterns;\r\n        this.implementationFunc = implementationFunction;\r\n    }\r\n\r\n}\r\n\r\n/** An internal class intended to be passed as `this` to a mode implementation function. */\r\nclass ModeImplementationFunctionContext {\r\n\r\n    public evalCtx: EvaluationContext;\r\n    public call: FunctionCall;\r\n\r\n    constructor(evalCtx: EvaluationContext, call: FunctionCall) {\r\n        this.evalCtx = evalCtx;\r\n        this.call = call;\r\n    }\r\n\r\n}\r\n\r\n/** A base class for functions that have a mode as their first argument. */\r\nexport abstract class KodeFunctionWithModes extends IKodeFunction {\r\n\r\n    /** An object containing all modes of this function. */\r\n    private _modes: Record<string, FunctionMode> = {};\r\n\r\n    /** \r\n     * After calling super() in a deriving class, use the {@link mode()} function to add mode implementations. \r\n     * @see {@link mode} documentation for usage details.\r\n     */\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /** \r\n     * Registers a mode for this function. Intended to be used in the constructor of a deriving type. \r\n     * \r\n     * @param name The name of the mode being added.\r\n     * \r\n     * @param argumentPatterns A list of argument patterns describing how the mode can be called. \r\n     * These patterns should be compatible with arguments taken by {@link implementationFunc}.\r\n     * \r\n     * @param implementationFunc A function implementing the mode. \r\n     * This function cannot be an arrow function, because those cannot have its `this` set with `call()`.\r\n     * Arguments taken by this function should be compatible with {@link argumentPatterns}. \r\n     * The function can return anything that the KodeValue constructor accepts.\r\n     * \r\n     * @example\r\n     * // register a mode named \"test\" taking two required parameters and an optional one\r\n     * this.mode(\r\n     *      'test',\r\n     *      ['txt text', 'num length', 'any bonus?'],\r\n     *      function (text: string, length: number, bonus?: KodeValue): ConvertibleToKodeValue {\r\n     *          // ...\r\n     *      }\r\n     * );\r\n     */\r\n    protected mode(name: string, argumentPatterns: string[], implementationFunc: ModeImplementationFunction) {\r\n        this._modes[name] = new FunctionMode(argumentPatterns, implementationFunc);\r\n    }\r\n\r\n    /** \r\n     * Validates and convertes a {@link KodeValue} argument for a mode implementation call. \r\n     * @param evalCtx The context of the evaluation.\r\n     * @param call The function call evaluable.\r\n     * @param modeName The name of the mode this validation is performed for.\r\n     * @param i The index of the argument (0 = mode argument, 1 = first actual argument etc.)\r\n     * @param argValue The input {@link KodeValue} resulting from evaluating the argument.\r\n     * @param argPatternElements The argument pattern, split into useful parts.\r\n     */\r\n    protected _validateAndConvertArg(evalCtx: EvaluationContext, call: FunctionCall, modeName: string, i: number, argValue: KodeValue, argPatternElements: ArgPatternElements): ModeImplementationFunctionArgPrimitive {\r\n\r\n        switch (argPatternElements.type) {\r\n\r\n            case 'any':\r\n                // the function wants to handle the argument itself, pass it the raw KodeValue\r\n                return argValue;\r\n\r\n            case 'txt':\r\n                // the function wants to work on the value as string\r\n                return argValue.isNumeric ? argValue.numericValue.toString() : argValue.text;\r\n\r\n            case 'num':\r\n\r\n                // the function wants to work on the value as number\r\n                if (argValue.isNumeric) {\r\n\r\n                    // argument is numeric, good to go\r\n                    return argValue.numericValue;\r\n\r\n                } else {\r\n\r\n                    // argument is not numeric, throw\r\n                    throw new InvalidArgumentError(\r\n                        `${call.func.getName()}(${modeName})`,\r\n                        argPatternElements.name,\r\n                        i,\r\n                        call.args[i],\r\n                        argValue,\r\n                        `Argument must be numeric.`\r\n                    );\r\n\r\n                }\r\n\r\n            default:\r\n                // some other type passed, crash\r\n                throw new Error(`Invalid argument pattern \"${argPatternElements.source}\" for ${call.func.getName()}(${modeName}), argument #${i + 1}: Unknown type \"${argPatternElements.type}\".`);\r\n        }\r\n\r\n    }\r\n\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n\r\n        if (args.length === 0) {\r\n\r\n            // we were not given a mode argument, throw\r\n            throw new InvalidArgumentCountError(call, `${call.func.getName()}() requires at least a mode argument.`);\r\n\r\n        }\r\n\r\n        // get the mode from the first argument and normalize it\r\n        let modeName = args[0].text.trim().toLowerCase();\r\n\r\n        // find mode by name\r\n        let mode = this._modes[modeName];\r\n\r\n        if (!mode) {\r\n\r\n            // we were given a mode that wasn't registered, throw\r\n            throw new InvalidArgumentError(\r\n                `${call.func.getName()}()`, 'mode', 0,\r\n                call.args[0], args[0],\r\n                `Mode \"${modeName}\" not found.`\r\n            );\r\n\r\n        }\r\n\r\n        /** A list of arguments that will be given to the mode implementation. */\r\n        let implementationCallArgs: ModeImplementationFunctionArg[] = [];\r\n\r\n        /** \r\n         * A flag holding whether an optional argument was encountered, used to check pattern validity\r\n         * (all optional arguments must be at the end).\r\n         */\r\n        let optionalArgumentEncountered = false;\r\n        /**\r\n         * A flag holding whether a rest parameter was encountered, used to check pattern validity\r\n         * (if false, check if too many parameters were given)\r\n        */\r\n        let restParamEncountered = false;\r\n\r\n        /** An expression describing a valid argument pattern, capturing useful parts into groups. */\r\n        const argPatternExpr = /^(\\S+) ([\\S]+?)(\\?|\\[(\\d*)\\])?$/;\r\n\r\n        // Go through all argument patterns.\r\n        for (let i = 0; i < mode.argumentPatterns.length; i++) {\r\n\r\n            const argPattern = mode.argumentPatterns[i].trim();\r\n\r\n            // match the pattern using the expression\r\n            const argPatternMatch = argPatternExpr.exec(argPattern);\r\n\r\n            if (!argPatternMatch) {\r\n\r\n                // argument pattern does not match expression\r\n                throw new Error(`Invalid argument pattern \"${argPattern}\" for ${call.func.getName()}(${modeName}), argument #${i + 1}.`);\r\n\r\n            } else {\r\n\r\n                // argument pattern is fine\r\n\r\n                // create object holding extracted tokens for more comfortable usage\r\n                const argPatternElements: ArgPatternElements = {\r\n                    source: argPattern,\r\n                    type: argPatternMatch[1],\r\n                    name: argPatternMatch[2],\r\n                    isOptional: argPatternMatch[3] === '?',\r\n                    isRest: !!argPatternMatch[3] && argPatternMatch[3] !== '?',\r\n                    restMinCount: Number(argPatternMatch[4])\r\n                };\r\n\r\n\r\n                // pattern validation\r\n\r\n                if (argPatternElements.isOptional) {\r\n\r\n                    // mark that we found an optional argument\r\n                    optionalArgumentEncountered = true;\r\n\r\n                } else if (argPatternElements.isRest) {\r\n\r\n                    if (i < mode.argumentPatterns.length - 1) {\r\n\r\n                        // a rest argument has been provided as not the last argument\r\n                        throw new Error(\r\n                            `Invalid argument pattern \"${argPattern}\" for ${call.func.getName()}(${modeName}), argument #${i + 1} (${argPatternElements.name}): `\r\n                            + 'A rest parameter must be the last parameter on the list.'\r\n                        );\r\n\r\n                    }\r\n\r\n                    restParamEncountered = true;\r\n\r\n                } else {\r\n\r\n                    // this is a required argument\r\n\r\n                    if (optionalArgumentEncountered) {\r\n\r\n                        // there was an optional argument before, crash\r\n                        throw new Error(\r\n                            `Invalid argument pattern \"${argPattern}\" for ${call.func.getName()}(${modeName}), argument #${i + 1} (${argPatternElements.name}): `\r\n                            + 'Cannot have a required parameter after an optional parameter.'\r\n                        );\r\n\r\n                    } else if (i + 1 >= args.length) {\r\n\r\n                        // this mode has a required argument but we ran out of given arguments, throw\r\n                        throw new InvalidArgumentCountError(\r\n                            call,\r\n                            `Argument #${i + 1} (${argPatternElements.name}) missing.`,\r\n                            `${call.func.getName()}(${modeName})`\r\n                        );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // check if we weren't given too many arguments according to the pattern,\r\n                // only if a rest parameter wasn't encountered (if it was, we can take any number of arguments)\r\n                if (!restParamEncountered && args.length - 1 > mode.argumentPatterns.length) {\r\n\r\n                    throw new InvalidArgumentCountError(call, `Too many arguments (expected ${mode.argumentPatterns.length} at most).`, `${call.func.getName()}(${modeName})`);\r\n\r\n                }\r\n\r\n                // if we got this far, the pattern was validated, convert parameters\r\n\r\n                if (argPatternElements.isRest) {\r\n\r\n                    // check how many arguments are remaining to be passed as the rest parameter\r\n                    let remainingParamCount = args.length - i - 1;\r\n\r\n                    if (argPatternElements.restMinCount && remainingParamCount < argPatternElements.restMinCount) {\r\n\r\n                        // not enough arguments given for the rest parameter\r\n                        throw new InvalidArgumentCountError(\r\n                            call,\r\n                            `At least ${argPatternElements.restMinCount} argument${argPatternElements.restMinCount === 1 ? '' : 's'} required.`,\r\n                            `${call.func.getName()}(${modeName})`\r\n                        );\r\n\r\n                    } else {\r\n\r\n                        // the remaining parameters should be added to an array and passed as a rest parameter\r\n                        let restParam: ModeImplementationFunctionArgPrimitive[] = [];\r\n\r\n                        // validate and add rest arguments\r\n                        for (let j = i + 1; j < args.length; j++) {\r\n\r\n                            restParam.push(this._validateAndConvertArg(\r\n                                evalCtx, call, modeName, j, args[j],\r\n                                argPatternElements\r\n                            ));\r\n\r\n                        }\r\n\r\n                        implementationCallArgs.push(restParam);\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    // at this point, we either have a required argument with a value, or an optional argument with or without a value\r\n                    if (i + 1 < args.length) {\r\n\r\n                        // we got an argument, validate and convert it, then add to arguments for the mode implementation\r\n                        implementationCallArgs.push(this._validateAndConvertArg(\r\n                            evalCtx, call, modeName, i + 1, args[i + 1],\r\n                            argPatternElements\r\n                        ));\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n        // call the implementation and get a value in return\r\n        var modeCtx = new ModeImplementationFunctionContext(evalCtx, call);\r\n        let val = mode.implementationFunc.call(modeCtx, ...implementationCallArgs);\r\n\r\n        // if implementation returned KodeValue, return it directly, otherwise convert returned value to KodeValue\r\n        return val instanceof KodeValue ? val : new KodeValue(val, call.source);\r\n    }\r\n\r\n}\r\n", "import {\r\n    KodeValue,\r\n    IKodeFunction,\r\n    EvaluationError,\r\n    EvaluationContext,\r\n    FunctionCall\r\n} from \"../../../kodeine.js\";\r\n\r\n// this file contains classes for functions that have not been implemented yet.\r\n// they should be moved to separate files after they are implemented.\r\n\r\nexport class LiFunction extends IKodeFunction {\r\n    getName() { return 'li'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class AqFunction extends IKodeFunction {\r\n    getName() { return 'aq'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class NcFunction extends IKodeFunction {\r\n    getName() { return 'nc'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class NiFunction extends IKodeFunction {\r\n    getName() { return 'ni'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class WgFunction extends IKodeFunction {\r\n    getName() { return 'wg'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class RmFunction extends IKodeFunction {\r\n    getName() { return 'rm'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class CeFunction extends IKodeFunction {\r\n    getName() { return 'ce'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class ShFunction extends IKodeFunction {\r\n    getName() { return 'sh'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class WiFunction extends IKodeFunction {\r\n    getName() { return 'wi'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class BiFunction extends IKodeFunction {\r\n    getName() { return 'bi'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class SiFunction extends IKodeFunction {\r\n    getName() { return 'si'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class MqFunction extends IKodeFunction {\r\n    getName() { return 'mq'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class TsFunction extends IKodeFunction {\r\n    getName() { return 'ts'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class BpFunction extends IKodeFunction {\r\n    getName() { return 'bp'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class CmFunction extends IKodeFunction {\r\n    getName() { return 'cm'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class BrFunction extends IKodeFunction {\r\n    getName() { return 'br'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class MiFunction extends IKodeFunction {\r\n    getName() { return 'mi'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class WfFunction extends IKodeFunction {\r\n    getName() { return 'wf'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class TfFunction extends IKodeFunction {\r\n    getName() { return 'tf'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class UcFunction extends IKodeFunction {\r\n    getName() { return 'uc'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class CiFunction extends IKodeFunction {\r\n    getName() { return 'ci'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class AiFunction extends IKodeFunction {\r\n    getName() { return 'ai'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class FdFunction extends IKodeFunction {\r\n    getName() { return 'fd'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class DpFunction extends IKodeFunction {\r\n    getName() { return 'dp'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}\r\n\r\nexport class TuFunction extends IKodeFunction {\r\n    getName() { return 'tu'; }\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n    }\r\n}", "import {\r\n    IKodeFunction,\r\n    EvaluationContext,\r\n    FunctionCall,\r\n    ParsingContextBuilder,\r\n    KodeineParser,\r\n    Formula,\r\n    Evaluable,\r\n    KodeValue,\r\n    EvaluationWarning,\r\n    EvaluationError,\r\n    InvalidArgumentCountError,\r\n    KodeParsingError,\r\n    ParsingWarning\r\n} from \"../../../kodeine.js\";\r\n\r\n/** Thrown when a parsing error was produced when parsing one of the formulas given as argument to fl(). */\r\n\r\n/** A parsing error that was produced when parsing one of the formulas given as argument to fl(). */\r\nexport class FlParsingWarning extends EvaluationWarning {\r\n\r\n    /** The parsing error that was originally thrown. */\r\n    public readonly internalWarning: ParsingWarning;\r\n\r\n    constructor(formulaTextSource: Evaluable, inIncrement: boolean, internalWarning: ParsingWarning) {\r\n        super(formulaTextSource, `Warning when parsing ${inIncrement ? 'increment' : 'evaluation'} formula in fl(): ` + internalWarning.message);\r\n\r\n        this.internalWarning = internalWarning;\r\n    }\r\n\r\n}\r\n\r\n/** A parsing error that was produced when parsing one of the formulas given as argument to fl(). */\r\nexport class FlParsingError extends EvaluationError {\r\n\r\n    /** The parsing error that was originally thrown. */\r\n    public readonly internalError: KodeParsingError;\r\n\r\n    constructor(formulaTextSource: Evaluable, inIncrement: boolean, internalError: KodeParsingError) {\r\n        super(formulaTextSource, `Error when parsing ${inIncrement ? 'increment' : 'evaluation'} formula in fl(): ` + internalError.message);\r\n\r\n        this.internalError = internalError;\r\n    }\r\n\r\n}\r\n\r\n/** A warning that was produced when evaluating one of the formulas given as argument to fl(). */\r\nexport class FlEvaluationWarning extends EvaluationWarning {\r\n\r\n    /** The evaluation error that was originally produced. */\r\n    public readonly internalWarning: EvaluationWarning;\r\n\r\n    constructor(formulaTextSource: Evaluable, iValue: KodeValue, inIncrement: boolean, internalWarning: EvaluationError) {\r\n        super(formulaTextSource, `Warning when evaluating ${inIncrement ? 'increment' : 'evaluation'} formula in fl() with i = ${iValue.text}: ` + internalWarning.message);\r\n\r\n        this.internalWarning = internalWarning;\r\n    }\r\n\r\n}\r\n\r\n/** An evaluation error that was produced when evaluating one of the formulas given as argument to fl(). */\r\nexport class FlEvaluationError extends EvaluationError {\r\n\r\n    /** The evaluation error that was originally thrown. */\r\n    public readonly internalError: EvaluationError;\r\n\r\n    constructor(formulaTextSource: Evaluable, iValue: KodeValue, inIncrement: boolean, internalError: EvaluationError) {\r\n        super(formulaTextSource, `Error when evaluating ${inIncrement ? 'increment' : 'evaluation'} formula in fl() with i = ${iValue.text}: ` + internalError.message);\r\n\r\n        this.internalError = internalError;\r\n    }\r\n\r\n}\r\n\r\n\r\n/** Implementation of Kustom's `fl()` function. */\r\nexport class FlFunction extends IKodeFunction {\r\n\r\n    static get maxIterationCount() { return 1000; }\r\n\r\n    getName() { return 'fl'; }\r\n\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n\r\n        // validate argument count\r\n        if (args.length < 4) {\r\n\r\n            throw new InvalidArgumentCountError(call, 'At least four arguments required (start, end, increment, formula text, optional separator).');\r\n\r\n        } else if (args.length > 5) {\r\n\r\n            throw new InvalidArgumentCountError(call, 'At most five arguments allowed (start, end, increment, formula text, optional separator).');\r\n\r\n        }\r\n\r\n        let iterationCounter = 0;\r\n\r\n        // 1st arg - initial value for i\r\n        let i = args[0];\r\n\r\n        // 2nd arg - loop exit value\r\n        let endI = args[1];\r\n\r\n        // if increment is empty, fl() should return nothing for some reason\r\n        if (!args[2].text) {\r\n            return new KodeValue('', call.source);\r\n        }\r\n\r\n        // 3rd arg - increment (ex. \"i + 1\")\r\n        let incrFormulaText = `$${args[2].text}$`;\r\n\r\n        // 4th arg - formula (ex. \"tc(cut, text, i, 1)\")\r\n        let evalFormulaText = `$${args[3].text}$`;\r\n\r\n        // 5th arg - separator (optional)\r\n        let separator = args[4] ? args[4].text : '';\r\n\r\n        // we'll be adding the results of each evaluation to this array and at the end joining them with the separator\r\n        let results: string[] = [];\r\n\r\n        // we'll be parsing using the default context (clone formula context in the future?)\r\n        let parsingCtx = ParsingContextBuilder.buildDefault();\r\n        let parser = new KodeineParser(parsingCtx);\r\n\r\n        // we only need to parse each formula once\r\n\r\n        let incrFormula: Formula | null;\r\n        let evalFormula: Formula | null;\r\n\r\n        try {\r\n\r\n            // try to parse the increment formula\r\n            incrFormula = parser.parse(incrFormulaText);\r\n\r\n        } catch (err: any) {\r\n\r\n            if (err instanceof KodeParsingError) {\r\n\r\n                // could not parse the increment formula\r\n                evalCtx.sideEffects.errors.push(new FlParsingError(\r\n                    call.args[2], true, err\r\n                ));\r\n\r\n                // set incrFormula to null - i will be set to empty string on every iteration\r\n                incrFormula = null;\r\n\r\n            } else {\r\n\r\n                // rethrow crashes\r\n                throw err;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // pass errors to parent evalCtx\r\n        parsingCtx.sideEffects.errors.forEach(err => {\r\n            evalCtx.sideEffects.errors.push(new FlParsingError(\r\n                call.args[2], true, err\r\n            ));\r\n        });\r\n\r\n        // pass warnings to parent evalCtx\r\n        parsingCtx.sideEffects.warnings.forEach(warn => {\r\n            evalCtx.sideEffects.warnings.push(new FlParsingWarning(\r\n                call.args[2], true, warn\r\n            ));\r\n        });\r\n\r\n        parsingCtx.clearSideEffects();\r\n\r\n\r\n        try {\r\n\r\n            // try to parse the eval formula\r\n            // make sure to not print $ when the eval formula is empty\r\n            evalFormula = evalFormulaText === '$$' ? null : parser.parse(evalFormulaText);\r\n\r\n        } catch (err: any) {\r\n\r\n            if (err instanceof KodeParsingError) {\r\n\r\n                // could not parse the eval formula\r\n                evalCtx.sideEffects.errors.push(new FlParsingError(\r\n                    this.call.arguments[3], false, err\r\n                ));\r\n\r\n                // set evalFormula to null - the formula will \"return\" empty string on every iteration\r\n                evalFormula = null;\r\n\r\n            } else {\r\n\r\n                // rethrow crashes\r\n                throw err;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // pass errors to parent evalCtx\r\n        parsingCtx.sideEffects.errors.forEach(err => {\r\n            evalCtx.sideEffects.errors.push(new FlParsingError(\r\n                call.args[2], true, err\r\n            ));\r\n        });\r\n\r\n        // pass warnings to parent evalCtx\r\n        parsingCtx.sideEffects.warnings.forEach(warn => {\r\n            evalCtx.sideEffects.warnings.push(new FlParsingWarning(\r\n                call.args[2], true, warn\r\n            ));\r\n        });\r\n\r\n        // not the cleanest way to get an equality operator implementation\r\n        let eqOperator = parsingCtx.findBinaryOperator('=');\r\n\r\n        if (eqOperator === null) {\r\n\r\n            throw new Error('Operator with symbol \"=\" was not found.')\r\n\r\n        }\r\n\r\n        // clone the current evaluation context\r\n        let childEvalCtx = evalCtx.clone();\r\n\r\n        while (iterationCounter++ < FlFunction.maxIterationCount) {\r\n\r\n            // update the current value of i in the evaluation context\r\n            childEvalCtx.iReplacement = i;\r\n\r\n            // 1. evaluate eval with current i value\r\n\r\n            if (evalFormula) {\r\n\r\n                try {\r\n\r\n                    let evalResult = evalFormula.evaluate(childEvalCtx);\r\n                    results.push(evalResult.text);\r\n\r\n                } catch (err: any) {\r\n\r\n                    if (err instanceof EvaluationError) {\r\n\r\n                        evalCtx.sideEffects.errors.push(new FlEvaluationError(\r\n                            call.args[3], i, false, err\r\n                        ));\r\n\r\n                    } else {\r\n\r\n                        // rethrow crashes\r\n                        throw err;\r\n\r\n                    }\r\n                }\r\n\r\n                // pass errors to parent evalCtx\r\n                childEvalCtx.sideEffects.errors.forEach(err => {\r\n                    evalCtx.sideEffects.errors.push(new FlEvaluationError(\r\n                        call.args[3], i, false, err\r\n                    ));\r\n                });\r\n\r\n                // pass warnings to parent evalCtx\r\n                childEvalCtx.sideEffects.warnings.forEach(warn => {\r\n                    evalCtx.sideEffects.warnings.push(new FlEvaluationError(\r\n                        call.args[3], i, false, warn\r\n                    ));\r\n                });\r\n\r\n                // clear side effects after adding them to parent evalCtx\r\n                childEvalCtx.clearSideEffects();\r\n\r\n            } else {\r\n\r\n                results.push('');\r\n\r\n            }\r\n\r\n\r\n            // 2. if i value = end i value, exit the loop\r\n            if (i.equals(endI)) {\r\n\r\n                break;\r\n\r\n            }\r\n\r\n\r\n            // 3. evaluate increment to get new i value\r\n\r\n            if (incrFormula) {\r\n\r\n                try {\r\n\r\n                    i = incrFormula.evaluate(childEvalCtx);\r\n\r\n                } catch (err: any) {\r\n\r\n                    if (err instanceof EvaluationError) {\r\n\r\n                        evalCtx.sideEffects.errors.push(new FlEvaluationError(\r\n                            call.args[2], i, true, err\r\n                        ));\r\n\r\n                    } else {\r\n\r\n                        // rethrow crashes\r\n                        throw err;\r\n\r\n                    }\r\n                }\r\n\r\n                // pass errors to parent evalCtx\r\n                childEvalCtx.sideEffects.errors.forEach(err => {\r\n                    evalCtx.sideEffects.errors.push(new FlEvaluationError(\r\n                        call.args[2], i, true, err\r\n                    ));\r\n                });\r\n\r\n                // pass warnings to parent evalCtx\r\n                childEvalCtx.sideEffects.warnings.forEach(warn => {\r\n                    evalCtx.sideEffects.warnings.push(new FlEvaluationError(\r\n                        call.args[2], i, true, warn\r\n                    ));\r\n                });\r\n\r\n                // clear side effects after adding them to parent evalCtx\r\n                childEvalCtx.clearSideEffects();\r\n\r\n            } else {\r\n\r\n                // no valid increment formula, set i to empty string\r\n                i = new KodeValue('');\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // loop finished, add results together using the separator\r\n        return new KodeValue(results.join(separator), call.source);\r\n    }\r\n}", "import { \r\n    KodeValue,\r\n    IKodeFunction,\r\n    EvaluationContext,\r\n    EvaluationError, InvalidArgumentCountError,\r\n    FunctionCall\r\n} from \"../../../kodeine.js\";\r\n\r\n/** Implementation of Kustom's `gv()` function. */\r\nexport class GvFunction extends IKodeFunction {\r\n\r\n    getName() { return 'gv'; }\r\n\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n\r\n        // require at least two arguments (one condition and one value)\r\n        if (args.length < 1)\r\n            throw new InvalidArgumentCountError(call, 'At least one argument required.');\r\n\r\n        else if (args.length > 1)\r\n            throw new InvalidArgumentCountError(call, 'Only one-argument gv() calls are currently implemented.');\r\n\r\n        let globalName = args[0].text.trim().toLowerCase();\r\n\r\n        if (evalCtx.sideEffects.globalNameStack.indexOf(globalName) >= 0) {\r\n\r\n            throw new EvaluationError(call, `Global reference loop detected. Global stack: ${evalCtx.sideEffects.globalNameStack.join(' > ')}.`);\r\n\r\n        } else {\r\n\r\n            // push global name to stack\r\n            evalCtx.sideEffects.globalNameStack.push(globalName);\r\n\r\n            let globalFormula = evalCtx.globals.get(globalName);\r\n\r\n            if (globalFormula) {\r\n\r\n                // evaluate global formula with the same context\r\n                let globalValue = globalFormula.evaluate(evalCtx);\r\n\r\n                // pop the stack to remove the global name we pushed\r\n                evalCtx.sideEffects.globalNameStack.pop();\r\n\r\n                // return the value of the global\r\n                return globalValue;\r\n\r\n            } else {\r\n\r\n                // global not found, return empty string\r\n                return new KodeValue('', call.source);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}", "import {\r\n    IKodeFunction,\r\n    EvaluationContext,\r\n    InvalidArgumentCountError,\r\n    FunctionCall,\r\n    KodeValue\r\n} from \"../../../kodeine.js\";\r\n\r\n/** Implementation of Kustom's `if()` function. */\r\nexport class IfFunction extends IKodeFunction {\r\n\r\n    getName() { return 'if'; }\r\n\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n\r\n        // require at least two arguments (one condition and one value)\r\n        if (args.length <= 1) {\r\n            throw new InvalidArgumentCountError(call, 'At least two arguments required.');\r\n        }\r\n\r\n        // calculate the index of the last condition argument\r\n        let lastCondArgI = Math.floor((args.length - 2) / 2) * 2;;\r\n\r\n        // loop through condition arguments\r\n        for (var i = 0; i <= lastCondArgI; i += 2) {\r\n\r\n            let condArg = args[i]; // current condition argument\r\n\r\n            // if the value is not numeric, empty string is falsy and anything else is truthy\r\n            // if the value is numeric, 0 is falsy and anything else is truthy\r\n            if ((!condArg.isNumeric && condArg.text !== '') || (condArg.isNumeric && condArg.numericValue !== 0)) {\r\n\r\n                // the current condition argument is truthy, return the following value argument\r\n                return new KodeValue(args[i + 1], call.source);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // we went through all condition arguments and they were all falsy\r\n        // check if there is a final \"else\" value argument\r\n        if (lastCondArgI + 2 < args.length) {\r\n\r\n            // return the final \"else\" value argument\r\n            return new KodeValue(args[lastCondArgI + 2], call.source);\r\n\r\n        } else {\r\n\r\n            // return an empty string\r\n            return new KodeValue('', call.source);\r\n\r\n        }\r\n    }\r\n}", "import {\r\n    InvalidArgumentError,\r\n    KodeFunctionWithModes\r\n} from \"../../../kodeine.js\";\r\n\r\n/** Implementation of Kustom's mu() (math utilities) function. */\r\nexport class MuFunction extends KodeFunctionWithModes {\r\n\r\n    getName() { return 'mu'; }\r\n\r\n    singleArgMode(name: string, func: ((number: number) => number)) {\r\n        this.mode(\r\n            name,\r\n            ['num number'],\r\n            func\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.singleArgMode('ceil', Math.ceil);\r\n\r\n        this.singleArgMode('floor', Math.floor);\r\n\r\n        this.singleArgMode('sqrt', Math.sqrt);\r\n\r\n        this.mode('round',\r\n            ['num number', 'num decimals?'],\r\n            function (number: number, decimals?: number) {\r\n\r\n                if (decimals === undefined) {\r\n\r\n                    return Math.round(number);\r\n\r\n                } else {\r\n\r\n                    if (decimals < 0) {\r\n\r\n                        throw new InvalidArgumentError(\r\n                            'mu(round)', 'decimals',\r\n                            2, this.call.args[2], decimals,\r\n                            'The number of decimal places cannot be negative. Kustom will throw \"mu: 45\".'\r\n                        )\r\n\r\n                    } else {\r\n\r\n                        let powerOf10 = 10 ** decimals;\r\n                        return Math.round(number * powerOf10) / powerOf10;\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n        );\r\n\r\n        this.mode('min',\r\n            ['num values[2]'],\r\n            function (values: number[]) {\r\n                return Math.min(...values);\r\n            }\r\n        );\r\n\r\n        this.mode('max',\r\n            ['num values[2]'],\r\n            function (values: number[]) {\r\n                return Math.max(...values);\r\n            }\r\n        );\r\n\r\n        this.singleArgMode('abs', Math.abs);\r\n\r\n        this.singleArgMode('cos', n => Math.cos(n / 180 * Math.PI));\r\n\r\n        this.singleArgMode('sin', n => Math.sin(n / 180 * Math.PI));\r\n\r\n        this.singleArgMode('tan', n => Math.tan(n / 180 * Math.PI));\r\n\r\n        this.singleArgMode('acos', n => Math.acos(n) / Math.PI * 180);\r\n\r\n        this.singleArgMode('asin', n => Math.asin(n) / Math.PI * 180);\r\n\r\n        this.singleArgMode('atan', n => Math.atan(n) / Math.PI * 180);\r\n\r\n        this.singleArgMode('log', Math.log10);\r\n\r\n        this.mode('pow',\r\n            ['num number', 'num exponent'],\r\n            function (number: number, exponent: number) {\r\n                return number ** exponent;\r\n            }\r\n        );\r\n\r\n        this.singleArgMode('ln', Math.log);\r\n\r\n        this.mode('rnd',\r\n            ['num min', 'num max'],\r\n            function (min: number, max: number): number {\r\n                return min + Math.floor(Math.random() * (max - min + 1));\r\n            }\r\n        );\r\n\r\n        this.mode('h2d',\r\n            ['txt hex'],\r\n            function (hex: string): number {\r\n\r\n                let output = Number('0x' + hex);\r\n\r\n                if (isNaN(output)) {\r\n\r\n                    throw new InvalidArgumentError(\r\n                        'mu(h2d)', 'hex',\r\n                        1, this.call.args[1], hex,\r\n                        `Value \"${hex}\" could not be parsed as a hexadecimal number.`\r\n                    );\r\n\r\n                } else {\r\n\r\n                    return output;\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('d2h',\r\n            ['num number'],\r\n            function (number: number): string {\r\n\r\n                return number.toString(16);\r\n\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n}", "\n/** A helper converting HTML entities to characters they represent. */\nexport const HtmlEntityConverter = (() => {\n\n    /**\n     * An object containing named entities and the characters they represent.\n     * @see https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references\n     * @see https://html.spec.whatwg.org/entities.json\n     */\n    const namedEntities: Record<string, string> = {\n        \"&AElig\": \"\\u00C6\",\n        \"&AElig;\": \"\\u00C6\",\n        \"&AMP\": \"\\u0026\",\n        \"&AMP;\": \"\\u0026\",\n        \"&Aacute\": \"\\u00C1\",\n        \"&Aacute;\": \"\\u00C1\",\n        \"&Abreve;\": \"\\u0102\",\n        \"&Acirc\": \"\\u00C2\",\n        \"&Acirc;\": \"\\u00C2\",\n        \"&Acy;\": \"\\u0410\",\n        \"&Afr;\": \"\\uD835\\uDD04\",\n        \"&Agrave\": \"\\u00C0\",\n        \"&Agrave;\": \"\\u00C0\",\n        \"&Alpha;\": \"\\u0391\",\n        \"&Amacr;\": \"\\u0100\",\n        \"&And;\": \"\\u2A53\",\n        \"&Aogon;\": \"\\u0104\",\n        \"&Aopf;\": \"\\uD835\\uDD38\",\n        \"&ApplyFunction;\": \"\\u2061\",\n        \"&Aring\": \"\\u00C5\",\n        \"&Aring;\": \"\\u00C5\",\n        \"&Ascr;\": \"\\uD835\\uDC9C\",\n        \"&Assign;\": \"\\u2254\",\n        \"&Atilde\": \"\\u00C3\",\n        \"&Atilde;\": \"\\u00C3\",\n        \"&Auml\": \"\\u00C4\",\n        \"&Auml;\": \"\\u00C4\",\n        \"&Backslash;\": \"\\u2216\",\n        \"&Barv;\": \"\\u2AE7\",\n        \"&Barwed;\": \"\\u2306\",\n        \"&Bcy;\": \"\\u0411\",\n        \"&Because;\": \"\\u2235\",\n        \"&Bernoullis;\": \"\\u212C\",\n        \"&Beta;\": \"\\u0392\",\n        \"&Bfr;\": \"\\uD835\\uDD05\",\n        \"&Bopf;\": \"\\uD835\\uDD39\",\n        \"&Breve;\": \"\\u02D8\",\n        \"&Bscr;\": \"\\u212C\",\n        \"&Bumpeq;\": \"\\u224E\",\n        \"&CHcy;\": \"\\u0427\",\n        \"&COPY\": \"\\u00A9\",\n        \"&COPY;\": \"\\u00A9\",\n        \"&Cacute;\": \"\\u0106\",\n        \"&Cap;\": \"\\u22D2\",\n        \"&CapitalDifferentialD;\": \"\\u2145\",\n        \"&Cayleys;\": \"\\u212D\",\n        \"&Ccaron;\": \"\\u010C\",\n        \"&Ccedil\": \"\\u00C7\",\n        \"&Ccedil;\": \"\\u00C7\",\n        \"&Ccirc;\": \"\\u0108\",\n        \"&Cconint;\": \"\\u2230\",\n        \"&Cdot;\": \"\\u010A\",\n        \"&Cedilla;\": \"\\u00B8\",\n        \"&CenterDot;\": \"\\u00B7\",\n        \"&Cfr;\": \"\\u212D\",\n        \"&Chi;\": \"\\u03A7\",\n        \"&CircleDot;\": \"\\u2299\",\n        \"&CircleMinus;\": \"\\u2296\",\n        \"&CirclePlus;\": \"\\u2295\",\n        \"&CircleTimes;\": \"\\u2297\",\n        \"&ClockwiseContourIntegral;\": \"\\u2232\",\n        \"&CloseCurlyDoubleQuote;\": \"\\u201D\",\n        \"&CloseCurlyQuote;\": \"\\u2019\",\n        \"&Colon;\": \"\\u2237\",\n        \"&Colone;\": \"\\u2A74\",\n        \"&Congruent;\": \"\\u2261\",\n        \"&Conint;\": \"\\u222F\",\n        \"&ContourIntegral;\": \"\\u222E\",\n        \"&Copf;\": \"\\u2102\",\n        \"&Coproduct;\": \"\\u2210\",\n        \"&CounterClockwiseContourIntegral;\": \"\\u2233\",\n        \"&Cross;\": \"\\u2A2F\",\n        \"&Cscr;\": \"\\uD835\\uDC9E\",\n        \"&Cup;\": \"\\u22D3\",\n        \"&CupCap;\": \"\\u224D\",\n        \"&DD;\": \"\\u2145\",\n        \"&DDotrahd;\": \"\\u2911\",\n        \"&DJcy;\": \"\\u0402\",\n        \"&DScy;\": \"\\u0405\",\n        \"&DZcy;\": \"\\u040F\",\n        \"&Dagger;\": \"\\u2021\",\n        \"&Darr;\": \"\\u21A1\",\n        \"&Dashv;\": \"\\u2AE4\",\n        \"&Dcaron;\": \"\\u010E\",\n        \"&Dcy;\": \"\\u0414\",\n        \"&Del;\": \"\\u2207\",\n        \"&Delta;\": \"\\u0394\",\n        \"&Dfr;\": \"\\uD835\\uDD07\",\n        \"&DiacriticalAcute;\": \"\\u00B4\",\n        \"&DiacriticalDot;\": \"\\u02D9\",\n        \"&DiacriticalDoubleAcute;\": \"\\u02DD\",\n        \"&DiacriticalGrave;\": \"\\u0060\",\n        \"&DiacriticalTilde;\": \"\\u02DC\",\n        \"&Diamond;\": \"\\u22C4\",\n        \"&DifferentialD;\": \"\\u2146\",\n        \"&Dopf;\": \"\\uD835\\uDD3B\",\n        \"&Dot;\": \"\\u00A8\",\n        \"&DotDot;\": \"\\u20DC\",\n        \"&DotEqual;\": \"\\u2250\",\n        \"&DoubleContourIntegral;\": \"\\u222F\",\n        \"&DoubleDot;\": \"\\u00A8\",\n        \"&DoubleDownArrow;\": \"\\u21D3\",\n        \"&DoubleLeftArrow;\": \"\\u21D0\",\n        \"&DoubleLeftRightArrow;\": \"\\u21D4\",\n        \"&DoubleLeftTee;\": \"\\u2AE4\",\n        \"&DoubleLongLeftArrow;\": \"\\u27F8\",\n        \"&DoubleLongLeftRightArrow;\": \"\\u27FA\",\n        \"&DoubleLongRightArrow;\": \"\\u27F9\",\n        \"&DoubleRightArrow;\": \"\\u21D2\",\n        \"&DoubleRightTee;\": \"\\u22A8\",\n        \"&DoubleUpArrow;\": \"\\u21D1\",\n        \"&DoubleUpDownArrow;\": \"\\u21D5\",\n        \"&DoubleVerticalBar;\": \"\\u2225\",\n        \"&DownArrow;\": \"\\u2193\",\n        \"&DownArrowBar;\": \"\\u2913\",\n        \"&DownArrowUpArrow;\": \"\\u21F5\",\n        \"&DownBreve;\": \"\\u0311\",\n        \"&DownLeftRightVector;\": \"\\u2950\",\n        \"&DownLeftTeeVector;\": \"\\u295E\",\n        \"&DownLeftVector;\": \"\\u21BD\",\n        \"&DownLeftVectorBar;\": \"\\u2956\",\n        \"&DownRightTeeVector;\": \"\\u295F\",\n        \"&DownRightVector;\": \"\\u21C1\",\n        \"&DownRightVectorBar;\": \"\\u2957\",\n        \"&DownTee;\": \"\\u22A4\",\n        \"&DownTeeArrow;\": \"\\u21A7\",\n        \"&Downarrow;\": \"\\u21D3\",\n        \"&Dscr;\": \"\\uD835\\uDC9F\",\n        \"&Dstrok;\": \"\\u0110\",\n        \"&ENG;\": \"\\u014A\",\n        \"&ETH\": \"\\u00D0\",\n        \"&ETH;\": \"\\u00D0\",\n        \"&Eacute\": \"\\u00C9\",\n        \"&Eacute;\": \"\\u00C9\",\n        \"&Ecaron;\": \"\\u011A\",\n        \"&Ecirc\": \"\\u00CA\",\n        \"&Ecirc;\": \"\\u00CA\",\n        \"&Ecy;\": \"\\u042D\",\n        \"&Edot;\": \"\\u0116\",\n        \"&Efr;\": \"\\uD835\\uDD08\",\n        \"&Egrave\": \"\\u00C8\",\n        \"&Egrave;\": \"\\u00C8\",\n        \"&Element;\": \"\\u2208\",\n        \"&Emacr;\": \"\\u0112\",\n        \"&EmptySmallSquare;\": \"\\u25FB\",\n        \"&EmptyVerySmallSquare;\": \"\\u25AB\",\n        \"&Eogon;\": \"\\u0118\",\n        \"&Eopf;\": \"\\uD835\\uDD3C\",\n        \"&Epsilon;\": \"\\u0395\",\n        \"&Equal;\": \"\\u2A75\",\n        \"&EqualTilde;\": \"\\u2242\",\n        \"&Equilibrium;\": \"\\u21CC\",\n        \"&Escr;\": \"\\u2130\",\n        \"&Esim;\": \"\\u2A73\",\n        \"&Eta;\": \"\\u0397\",\n        \"&Euml\": \"\\u00CB\",\n        \"&Euml;\": \"\\u00CB\",\n        \"&Exists;\": \"\\u2203\",\n        \"&ExponentialE;\": \"\\u2147\",\n        \"&Fcy;\": \"\\u0424\",\n        \"&Ffr;\": \"\\uD835\\uDD09\",\n        \"&FilledSmallSquare;\": \"\\u25FC\",\n        \"&FilledVerySmallSquare;\": \"\\u25AA\",\n        \"&Fopf;\": \"\\uD835\\uDD3D\",\n        \"&ForAll;\": \"\\u2200\",\n        \"&Fouriertrf;\": \"\\u2131\",\n        \"&Fscr;\": \"\\u2131\",\n        \"&GJcy;\": \"\\u0403\",\n        \"&GT\": \"\\u003E\",\n        \"&GT;\": \"\\u003E\",\n        \"&Gamma;\": \"\\u0393\",\n        \"&Gammad;\": \"\\u03DC\",\n        \"&Gbreve;\": \"\\u011E\",\n        \"&Gcedil;\": \"\\u0122\",\n        \"&Gcirc;\": \"\\u011C\",\n        \"&Gcy;\": \"\\u0413\",\n        \"&Gdot;\": \"\\u0120\",\n        \"&Gfr;\": \"\\uD835\\uDD0A\",\n        \"&Gg;\": \"\\u22D9\",\n        \"&Gopf;\": \"\\uD835\\uDD3E\",\n        \"&GreaterEqual;\": \"\\u2265\",\n        \"&GreaterEqualLess;\": \"\\u22DB\",\n        \"&GreaterFullEqual;\": \"\\u2267\",\n        \"&GreaterGreater;\": \"\\u2AA2\",\n        \"&GreaterLess;\": \"\\u2277\",\n        \"&GreaterSlantEqual;\": \"\\u2A7E\",\n        \"&GreaterTilde;\": \"\\u2273\",\n        \"&Gscr;\": \"\\uD835\\uDCA2\",\n        \"&Gt;\": \"\\u226B\",\n        \"&HARDcy;\": \"\\u042A\",\n        \"&Hacek;\": \"\\u02C7\",\n        \"&Hat;\": \"\\u005E\",\n        \"&Hcirc;\": \"\\u0124\",\n        \"&Hfr;\": \"\\u210C\",\n        \"&HilbertSpace;\": \"\\u210B\",\n        \"&Hopf;\": \"\\u210D\",\n        \"&HorizontalLine;\": \"\\u2500\",\n        \"&Hscr;\": \"\\u210B\",\n        \"&Hstrok;\": \"\\u0126\",\n        \"&HumpDownHump;\": \"\\u224E\",\n        \"&HumpEqual;\": \"\\u224F\",\n        \"&IEcy;\": \"\\u0415\",\n        \"&IJlig;\": \"\\u0132\",\n        \"&IOcy;\": \"\\u0401\",\n        \"&Iacute\": \"\\u00CD\",\n        \"&Iacute;\": \"\\u00CD\",\n        \"&Icirc\": \"\\u00CE\",\n        \"&Icirc;\": \"\\u00CE\",\n        \"&Icy;\": \"\\u0418\",\n        \"&Idot;\": \"\\u0130\",\n        \"&Ifr;\": \"\\u2111\",\n        \"&Igrave\": \"\\u00CC\",\n        \"&Igrave;\": \"\\u00CC\",\n        \"&Im;\": \"\\u2111\",\n        \"&Imacr;\": \"\\u012A\",\n        \"&ImaginaryI;\": \"\\u2148\",\n        \"&Implies;\": \"\\u21D2\",\n        \"&Int;\": \"\\u222C\",\n        \"&Integral;\": \"\\u222B\",\n        \"&Intersection;\": \"\\u22C2\",\n        \"&InvisibleComma;\": \"\\u2063\",\n        \"&InvisibleTimes;\": \"\\u2062\",\n        \"&Iogon;\": \"\\u012E\",\n        \"&Iopf;\": \"\\uD835\\uDD40\",\n        \"&Iota;\": \"\\u0399\",\n        \"&Iscr;\": \"\\u2110\",\n        \"&Itilde;\": \"\\u0128\",\n        \"&Iukcy;\": \"\\u0406\",\n        \"&Iuml\": \"\\u00CF\",\n        \"&Iuml;\": \"\\u00CF\",\n        \"&Jcirc;\": \"\\u0134\",\n        \"&Jcy;\": \"\\u0419\",\n        \"&Jfr;\": \"\\uD835\\uDD0D\",\n        \"&Jopf;\": \"\\uD835\\uDD41\",\n        \"&Jscr;\": \"\\uD835\\uDCA5\",\n        \"&Jsercy;\": \"\\u0408\",\n        \"&Jukcy;\": \"\\u0404\",\n        \"&KHcy;\": \"\\u0425\",\n        \"&KJcy;\": \"\\u040C\",\n        \"&Kappa;\": \"\\u039A\",\n        \"&Kcedil;\": \"\\u0136\",\n        \"&Kcy;\": \"\\u041A\",\n        \"&Kfr;\": \"\\uD835\\uDD0E\",\n        \"&Kopf;\": \"\\uD835\\uDD42\",\n        \"&Kscr;\": \"\\uD835\\uDCA6\",\n        \"&LJcy;\": \"\\u0409\",\n        \"&LT\": \"\\u003C\",\n        \"&LT;\": \"\\u003C\",\n        \"&Lacute;\": \"\\u0139\",\n        \"&Lambda;\": \"\\u039B\",\n        \"&Lang;\": \"\\u27EA\",\n        \"&Laplacetrf;\": \"\\u2112\",\n        \"&Larr;\": \"\\u219E\",\n        \"&Lcaron;\": \"\\u013D\",\n        \"&Lcedil;\": \"\\u013B\",\n        \"&Lcy;\": \"\\u041B\",\n        \"&LeftAngleBracket;\": \"\\u27E8\",\n        \"&LeftArrow;\": \"\\u2190\",\n        \"&LeftArrowBar;\": \"\\u21E4\",\n        \"&LeftArrowRightArrow;\": \"\\u21C6\",\n        \"&LeftCeiling;\": \"\\u2308\",\n        \"&LeftDoubleBracket;\": \"\\u27E6\",\n        \"&LeftDownTeeVector;\": \"\\u2961\",\n        \"&LeftDownVector;\": \"\\u21C3\",\n        \"&LeftDownVectorBar;\": \"\\u2959\",\n        \"&LeftFloor;\": \"\\u230A\",\n        \"&LeftRightArrow;\": \"\\u2194\",\n        \"&LeftRightVector;\": \"\\u294E\",\n        \"&LeftTee;\": \"\\u22A3\",\n        \"&LeftTeeArrow;\": \"\\u21A4\",\n        \"&LeftTeeVector;\": \"\\u295A\",\n        \"&LeftTriangle;\": \"\\u22B2\",\n        \"&LeftTriangleBar;\": \"\\u29CF\",\n        \"&LeftTriangleEqual;\": \"\\u22B4\",\n        \"&LeftUpDownVector;\": \"\\u2951\",\n        \"&LeftUpTeeVector;\": \"\\u2960\",\n        \"&LeftUpVector;\": \"\\u21BF\",\n        \"&LeftUpVectorBar;\": \"\\u2958\",\n        \"&LeftVector;\": \"\\u21BC\",\n        \"&LeftVectorBar;\": \"\\u2952\",\n        \"&Leftarrow;\": \"\\u21D0\",\n        \"&Leftrightarrow;\": \"\\u21D4\",\n        \"&LessEqualGreater;\": \"\\u22DA\",\n        \"&LessFullEqual;\": \"\\u2266\",\n        \"&LessGreater;\": \"\\u2276\",\n        \"&LessLess;\": \"\\u2AA1\",\n        \"&LessSlantEqual;\": \"\\u2A7D\",\n        \"&LessTilde;\": \"\\u2272\",\n        \"&Lfr;\": \"\\uD835\\uDD0F\",\n        \"&Ll;\": \"\\u22D8\",\n        \"&Lleftarrow;\": \"\\u21DA\",\n        \"&Lmidot;\": \"\\u013F\",\n        \"&LongLeftArrow;\": \"\\u27F5\",\n        \"&LongLeftRightArrow;\": \"\\u27F7\",\n        \"&LongRightArrow;\": \"\\u27F6\",\n        \"&Longleftarrow;\": \"\\u27F8\",\n        \"&Longleftrightarrow;\": \"\\u27FA\",\n        \"&Longrightarrow;\": \"\\u27F9\",\n        \"&Lopf;\": \"\\uD835\\uDD43\",\n        \"&LowerLeftArrow;\": \"\\u2199\",\n        \"&LowerRightArrow;\": \"\\u2198\",\n        \"&Lscr;\": \"\\u2112\",\n        \"&Lsh;\": \"\\u21B0\",\n        \"&Lstrok;\": \"\\u0141\",\n        \"&Lt;\": \"\\u226A\",\n        \"&Map;\": \"\\u2905\",\n        \"&Mcy;\": \"\\u041C\",\n        \"&MediumSpace;\": \"\\u205F\",\n        \"&Mellintrf;\": \"\\u2133\",\n        \"&Mfr;\": \"\\uD835\\uDD10\",\n        \"&MinusPlus;\": \"\\u2213\",\n        \"&Mopf;\": \"\\uD835\\uDD44\",\n        \"&Mscr;\": \"\\u2133\",\n        \"&Mu;\": \"\\u039C\",\n        \"&NJcy;\": \"\\u040A\",\n        \"&Nacute;\": \"\\u0143\",\n        \"&Ncaron;\": \"\\u0147\",\n        \"&Ncedil;\": \"\\u0145\",\n        \"&Ncy;\": \"\\u041D\",\n        \"&NegativeMediumSpace;\": \"\\u200B\",\n        \"&NegativeThickSpace;\": \"\\u200B\",\n        \"&NegativeThinSpace;\": \"\\u200B\",\n        \"&NegativeVeryThinSpace;\": \"\\u200B\",\n        \"&NestedGreaterGreater;\": \"\\u226B\",\n        \"&NestedLessLess;\": \"\\u226A\",\n        \"&NewLine;\": \"\\u000A\",\n        \"&Nfr;\": \"\\uD835\\uDD11\",\n        \"&NoBreak;\": \"\\u2060\",\n        \"&NonBreakingSpace;\": \"\\u00A0\",\n        \"&Nopf;\": \"\\u2115\",\n        \"&Not;\": \"\\u2AEC\",\n        \"&NotCongruent;\": \"\\u2262\",\n        \"&NotCupCap;\": \"\\u226D\",\n        \"&NotDoubleVerticalBar;\": \"\\u2226\",\n        \"&NotElement;\": \"\\u2209\",\n        \"&NotEqual;\": \"\\u2260\",\n        \"&NotEqualTilde;\": \"\\u2242\\u0338\",\n        \"&NotExists;\": \"\\u2204\",\n        \"&NotGreater;\": \"\\u226F\",\n        \"&NotGreaterEqual;\": \"\\u2271\",\n        \"&NotGreaterFullEqual;\": \"\\u2267\\u0338\",\n        \"&NotGreaterGreater;\": \"\\u226B\\u0338\",\n        \"&NotGreaterLess;\": \"\\u2279\",\n        \"&NotGreaterSlantEqual;\": \"\\u2A7E\\u0338\",\n        \"&NotGreaterTilde;\": \"\\u2275\",\n        \"&NotHumpDownHump;\": \"\\u224E\\u0338\",\n        \"&NotHumpEqual;\": \"\\u224F\\u0338\",\n        \"&NotLeftTriangle;\": \"\\u22EA\",\n        \"&NotLeftTriangleBar;\": \"\\u29CF\\u0338\",\n        \"&NotLeftTriangleEqual;\": \"\\u22EC\",\n        \"&NotLess;\": \"\\u226E\",\n        \"&NotLessEqual;\": \"\\u2270\",\n        \"&NotLessGreater;\": \"\\u2278\",\n        \"&NotLessLess;\": \"\\u226A\\u0338\",\n        \"&NotLessSlantEqual;\": \"\\u2A7D\\u0338\",\n        \"&NotLessTilde;\": \"\\u2274\",\n        \"&NotNestedGreaterGreater;\": \"\\u2AA2\\u0338\",\n        \"&NotNestedLessLess;\": \"\\u2AA1\\u0338\",\n        \"&NotPrecedes;\": \"\\u2280\",\n        \"&NotPrecedesEqual;\": \"\\u2AAF\\u0338\",\n        \"&NotPrecedesSlantEqual;\": \"\\u22E0\",\n        \"&NotReverseElement;\": \"\\u220C\",\n        \"&NotRightTriangle;\": \"\\u22EB\",\n        \"&NotRightTriangleBar;\": \"\\u29D0\\u0338\",\n        \"&NotRightTriangleEqual;\": \"\\u22ED\",\n        \"&NotSquareSubset;\": \"\\u228F\\u0338\",\n        \"&NotSquareSubsetEqual;\": \"\\u22E2\",\n        \"&NotSquareSuperset;\": \"\\u2290\\u0338\",\n        \"&NotSquareSupersetEqual;\": \"\\u22E3\",\n        \"&NotSubset;\": \"\\u2282\\u20D2\",\n        \"&NotSubsetEqual;\": \"\\u2288\",\n        \"&NotSucceeds;\": \"\\u2281\",\n        \"&NotSucceedsEqual;\": \"\\u2AB0\\u0338\",\n        \"&NotSucceedsSlantEqual;\": \"\\u22E1\",\n        \"&NotSucceedsTilde;\": \"\\u227F\\u0338\",\n        \"&NotSuperset;\": \"\\u2283\\u20D2\",\n        \"&NotSupersetEqual;\": \"\\u2289\",\n        \"&NotTilde;\": \"\\u2241\",\n        \"&NotTildeEqual;\": \"\\u2244\",\n        \"&NotTildeFullEqual;\": \"\\u2247\",\n        \"&NotTildeTilde;\": \"\\u2249\",\n        \"&NotVerticalBar;\": \"\\u2224\",\n        \"&Nscr;\": \"\\uD835\\uDCA9\",\n        \"&Ntilde\": \"\\u00D1\",\n        \"&Ntilde;\": \"\\u00D1\",\n        \"&Nu;\": \"\\u039D\",\n        \"&OElig;\": \"\\u0152\",\n        \"&Oacute\": \"\\u00D3\",\n        \"&Oacute;\": \"\\u00D3\",\n        \"&Ocirc\": \"\\u00D4\",\n        \"&Ocirc;\": \"\\u00D4\",\n        \"&Ocy;\": \"\\u041E\",\n        \"&Odblac;\": \"\\u0150\",\n        \"&Ofr;\": \"\\uD835\\uDD12\",\n        \"&Ograve\": \"\\u00D2\",\n        \"&Ograve;\": \"\\u00D2\",\n        \"&Omacr;\": \"\\u014C\",\n        \"&Omega;\": \"\\u03A9\",\n        \"&Omicron;\": \"\\u039F\",\n        \"&Oopf;\": \"\\uD835\\uDD46\",\n        \"&OpenCurlyDoubleQuote;\": \"\\u201C\",\n        \"&OpenCurlyQuote;\": \"\\u2018\",\n        \"&Or;\": \"\\u2A54\",\n        \"&Oscr;\": \"\\uD835\\uDCAA\",\n        \"&Oslash\": \"\\u00D8\",\n        \"&Oslash;\": \"\\u00D8\",\n        \"&Otilde\": \"\\u00D5\",\n        \"&Otilde;\": \"\\u00D5\",\n        \"&Otimes;\": \"\\u2A37\",\n        \"&Ouml\": \"\\u00D6\",\n        \"&Ouml;\": \"\\u00D6\",\n        \"&OverBar;\": \"\\u203E\",\n        \"&OverBrace;\": \"\\u23DE\",\n        \"&OverBracket;\": \"\\u23B4\",\n        \"&OverParenthesis;\": \"\\u23DC\",\n        \"&PartialD;\": \"\\u2202\",\n        \"&Pcy;\": \"\\u041F\",\n        \"&Pfr;\": \"\\uD835\\uDD13\",\n        \"&Phi;\": \"\\u03A6\",\n        \"&Pi;\": \"\\u03A0\",\n        \"&PlusMinus;\": \"\\u00B1\",\n        \"&Poincareplane;\": \"\\u210C\",\n        \"&Popf;\": \"\\u2119\",\n        \"&Pr;\": \"\\u2ABB\",\n        \"&Precedes;\": \"\\u227A\",\n        \"&PrecedesEqual;\": \"\\u2AAF\",\n        \"&PrecedesSlantEqual;\": \"\\u227C\",\n        \"&PrecedesTilde;\": \"\\u227E\",\n        \"&Prime;\": \"\\u2033\",\n        \"&Product;\": \"\\u220F\",\n        \"&Proportion;\": \"\\u2237\",\n        \"&Proportional;\": \"\\u221D\",\n        \"&Pscr;\": \"\\uD835\\uDCAB\",\n        \"&Psi;\": \"\\u03A8\",\n        \"&QUOT\": \"\\u0022\",\n        \"&QUOT;\": \"\\u0022\",\n        \"&Qfr;\": \"\\uD835\\uDD14\",\n        \"&Qopf;\": \"\\u211A\",\n        \"&Qscr;\": \"\\uD835\\uDCAC\",\n        \"&RBarr;\": \"\\u2910\",\n        \"&REG\": \"\\u00AE\",\n        \"&REG;\": \"\\u00AE\",\n        \"&Racute;\": \"\\u0154\",\n        \"&Rang;\": \"\\u27EB\",\n        \"&Rarr;\": \"\\u21A0\",\n        \"&Rarrtl;\": \"\\u2916\",\n        \"&Rcaron;\": \"\\u0158\",\n        \"&Rcedil;\": \"\\u0156\",\n        \"&Rcy;\": \"\\u0420\",\n        \"&Re;\": \"\\u211C\",\n        \"&ReverseElement;\": \"\\u220B\",\n        \"&ReverseEquilibrium;\": \"\\u21CB\",\n        \"&ReverseUpEquilibrium;\": \"\\u296F\",\n        \"&Rfr;\": \"\\u211C\",\n        \"&Rho;\": \"\\u03A1\",\n        \"&RightAngleBracket;\": \"\\u27E9\",\n        \"&RightArrow;\": \"\\u2192\",\n        \"&RightArrowBar;\": \"\\u21E5\",\n        \"&RightArrowLeftArrow;\": \"\\u21C4\",\n        \"&RightCeiling;\": \"\\u2309\",\n        \"&RightDoubleBracket;\": \"\\u27E7\",\n        \"&RightDownTeeVector;\": \"\\u295D\",\n        \"&RightDownVector;\": \"\\u21C2\",\n        \"&RightDownVectorBar;\": \"\\u2955\",\n        \"&RightFloor;\": \"\\u230B\",\n        \"&RightTee;\": \"\\u22A2\",\n        \"&RightTeeArrow;\": \"\\u21A6\",\n        \"&RightTeeVector;\": \"\\u295B\",\n        \"&RightTriangle;\": \"\\u22B3\",\n        \"&RightTriangleBar;\": \"\\u29D0\",\n        \"&RightTriangleEqual;\": \"\\u22B5\",\n        \"&RightUpDownVector;\": \"\\u294F\",\n        \"&RightUpTeeVector;\": \"\\u295C\",\n        \"&RightUpVector;\": \"\\u21BE\",\n        \"&RightUpVectorBar;\": \"\\u2954\",\n        \"&RightVector;\": \"\\u21C0\",\n        \"&RightVectorBar;\": \"\\u2953\",\n        \"&Rightarrow;\": \"\\u21D2\",\n        \"&Ropf;\": \"\\u211D\",\n        \"&RoundImplies;\": \"\\u2970\",\n        \"&Rrightarrow;\": \"\\u21DB\",\n        \"&Rscr;\": \"\\u211B\",\n        \"&Rsh;\": \"\\u21B1\",\n        \"&RuleDelayed;\": \"\\u29F4\",\n        \"&SHCHcy;\": \"\\u0429\",\n        \"&SHcy;\": \"\\u0428\",\n        \"&SOFTcy;\": \"\\u042C\",\n        \"&Sacute;\": \"\\u015A\",\n        \"&Sc;\": \"\\u2ABC\",\n        \"&Scaron;\": \"\\u0160\",\n        \"&Scedil;\": \"\\u015E\",\n        \"&Scirc;\": \"\\u015C\",\n        \"&Scy;\": \"\\u0421\",\n        \"&Sfr;\": \"\\uD835\\uDD16\",\n        \"&ShortDownArrow;\": \"\\u2193\",\n        \"&ShortLeftArrow;\": \"\\u2190\",\n        \"&ShortRightArrow;\": \"\\u2192\",\n        \"&ShortUpArrow;\": \"\\u2191\",\n        \"&Sigma;\": \"\\u03A3\",\n        \"&SmallCircle;\": \"\\u2218\",\n        \"&Sopf;\": \"\\uD835\\uDD4A\",\n        \"&Sqrt;\": \"\\u221A\",\n        \"&Square;\": \"\\u25A1\",\n        \"&SquareIntersection;\": \"\\u2293\",\n        \"&SquareSubset;\": \"\\u228F\",\n        \"&SquareSubsetEqual;\": \"\\u2291\",\n        \"&SquareSuperset;\": \"\\u2290\",\n        \"&SquareSupersetEqual;\": \"\\u2292\",\n        \"&SquareUnion;\": \"\\u2294\",\n        \"&Sscr;\": \"\\uD835\\uDCAE\",\n        \"&Star;\": \"\\u22C6\",\n        \"&Sub;\": \"\\u22D0\",\n        \"&Subset;\": \"\\u22D0\",\n        \"&SubsetEqual;\": \"\\u2286\",\n        \"&Succeeds;\": \"\\u227B\",\n        \"&SucceedsEqual;\": \"\\u2AB0\",\n        \"&SucceedsSlantEqual;\": \"\\u227D\",\n        \"&SucceedsTilde;\": \"\\u227F\",\n        \"&SuchThat;\": \"\\u220B\",\n        \"&Sum;\": \"\\u2211\",\n        \"&Sup;\": \"\\u22D1\",\n        \"&Superset;\": \"\\u2283\",\n        \"&SupersetEqual;\": \"\\u2287\",\n        \"&Supset;\": \"\\u22D1\",\n        \"&THORN\": \"\\u00DE\",\n        \"&THORN;\": \"\\u00DE\",\n        \"&TRADE;\": \"\\u2122\",\n        \"&TSHcy;\": \"\\u040B\",\n        \"&TScy;\": \"\\u0426\",\n        \"&Tab;\": \"\\u0009\",\n        \"&Tau;\": \"\\u03A4\",\n        \"&Tcaron;\": \"\\u0164\",\n        \"&Tcedil;\": \"\\u0162\",\n        \"&Tcy;\": \"\\u0422\",\n        \"&Tfr;\": \"\\uD835\\uDD17\",\n        \"&Therefore;\": \"\\u2234\",\n        \"&Theta;\": \"\\u0398\",\n        \"&ThickSpace;\": \"\\u205F\\u200A\",\n        \"&ThinSpace;\": \"\\u2009\",\n        \"&Tilde;\": \"\\u223C\",\n        \"&TildeEqual;\": \"\\u2243\",\n        \"&TildeFullEqual;\": \"\\u2245\",\n        \"&TildeTilde;\": \"\\u2248\",\n        \"&Topf;\": \"\\uD835\\uDD4B\",\n        \"&TripleDot;\": \"\\u20DB\",\n        \"&Tscr;\": \"\\uD835\\uDCAF\",\n        \"&Tstrok;\": \"\\u0166\",\n        \"&Uacute\": \"\\u00DA\",\n        \"&Uacute;\": \"\\u00DA\",\n        \"&Uarr;\": \"\\u219F\",\n        \"&Uarrocir;\": \"\\u2949\",\n        \"&Ubrcy;\": \"\\u040E\",\n        \"&Ubreve;\": \"\\u016C\",\n        \"&Ucirc\": \"\\u00DB\",\n        \"&Ucirc;\": \"\\u00DB\",\n        \"&Ucy;\": \"\\u0423\",\n        \"&Udblac;\": \"\\u0170\",\n        \"&Ufr;\": \"\\uD835\\uDD18\",\n        \"&Ugrave\": \"\\u00D9\",\n        \"&Ugrave;\": \"\\u00D9\",\n        \"&Umacr;\": \"\\u016A\",\n        \"&UnderBar;\": \"\\u005F\",\n        \"&UnderBrace;\": \"\\u23DF\",\n        \"&UnderBracket;\": \"\\u23B5\",\n        \"&UnderParenthesis;\": \"\\u23DD\",\n        \"&Union;\": \"\\u22C3\",\n        \"&UnionPlus;\": \"\\u228E\",\n        \"&Uogon;\": \"\\u0172\",\n        \"&Uopf;\": \"\\uD835\\uDD4C\",\n        \"&UpArrow;\": \"\\u2191\",\n        \"&UpArrowBar;\": \"\\u2912\",\n        \"&UpArrowDownArrow;\": \"\\u21C5\",\n        \"&UpDownArrow;\": \"\\u2195\",\n        \"&UpEquilibrium;\": \"\\u296E\",\n        \"&UpTee;\": \"\\u22A5\",\n        \"&UpTeeArrow;\": \"\\u21A5\",\n        \"&Uparrow;\": \"\\u21D1\",\n        \"&Updownarrow;\": \"\\u21D5\",\n        \"&UpperLeftArrow;\": \"\\u2196\",\n        \"&UpperRightArrow;\": \"\\u2197\",\n        \"&Upsi;\": \"\\u03D2\",\n        \"&Upsilon;\": \"\\u03A5\",\n        \"&Uring;\": \"\\u016E\",\n        \"&Uscr;\": \"\\uD835\\uDCB0\",\n        \"&Utilde;\": \"\\u0168\",\n        \"&Uuml\": \"\\u00DC\",\n        \"&Uuml;\": \"\\u00DC\",\n        \"&VDash;\": \"\\u22AB\",\n        \"&Vbar;\": \"\\u2AEB\",\n        \"&Vcy;\": \"\\u0412\",\n        \"&Vdash;\": \"\\u22A9\",\n        \"&Vdashl;\": \"\\u2AE6\",\n        \"&Vee;\": \"\\u22C1\",\n        \"&Verbar;\": \"\\u2016\",\n        \"&Vert;\": \"\\u2016\",\n        \"&VerticalBar;\": \"\\u2223\",\n        \"&VerticalLine;\": \"\\u007C\",\n        \"&VerticalSeparator;\": \"\\u2758\",\n        \"&VerticalTilde;\": \"\\u2240\",\n        \"&VeryThinSpace;\": \"\\u200A\",\n        \"&Vfr;\": \"\\uD835\\uDD19\",\n        \"&Vopf;\": \"\\uD835\\uDD4D\",\n        \"&Vscr;\": \"\\uD835\\uDCB1\",\n        \"&Vvdash;\": \"\\u22AA\",\n        \"&Wcirc;\": \"\\u0174\",\n        \"&Wedge;\": \"\\u22C0\",\n        \"&Wfr;\": \"\\uD835\\uDD1A\",\n        \"&Wopf;\": \"\\uD835\\uDD4E\",\n        \"&Wscr;\": \"\\uD835\\uDCB2\",\n        \"&Xfr;\": \"\\uD835\\uDD1B\",\n        \"&Xi;\": \"\\u039E\",\n        \"&Xopf;\": \"\\uD835\\uDD4F\",\n        \"&Xscr;\": \"\\uD835\\uDCB3\",\n        \"&YAcy;\": \"\\u042F\",\n        \"&YIcy;\": \"\\u0407\",\n        \"&YUcy;\": \"\\u042E\",\n        \"&Yacute\": \"\\u00DD\",\n        \"&Yacute;\": \"\\u00DD\",\n        \"&Ycirc;\": \"\\u0176\",\n        \"&Ycy;\": \"\\u042B\",\n        \"&Yfr;\": \"\\uD835\\uDD1C\",\n        \"&Yopf;\": \"\\uD835\\uDD50\",\n        \"&Yscr;\": \"\\uD835\\uDCB4\",\n        \"&Yuml;\": \"\\u0178\",\n        \"&ZHcy;\": \"\\u0416\",\n        \"&Zacute;\": \"\\u0179\",\n        \"&Zcaron;\": \"\\u017D\",\n        \"&Zcy;\": \"\\u0417\",\n        \"&Zdot;\": \"\\u017B\",\n        \"&ZeroWidthSpace;\": \"\\u200B\",\n        \"&Zeta;\": \"\\u0396\",\n        \"&Zfr;\": \"\\u2128\",\n        \"&Zopf;\": \"\\u2124\",\n        \"&Zscr;\": \"\\uD835\\uDCB5\",\n        \"&aacute\": \"\\u00E1\",\n        \"&aacute;\": \"\\u00E1\",\n        \"&abreve;\": \"\\u0103\",\n        \"&ac;\": \"\\u223E\",\n        \"&acE;\": \"\\u223E\\u0333\",\n        \"&acd;\": \"\\u223F\",\n        \"&acirc\": \"\\u00E2\",\n        \"&acirc;\": \"\\u00E2\",\n        \"&acute\": \"\\u00B4\",\n        \"&acute;\": \"\\u00B4\",\n        \"&acy;\": \"\\u0430\",\n        \"&aelig\": \"\\u00E6\",\n        \"&aelig;\": \"\\u00E6\",\n        \"&af;\": \"\\u2061\",\n        \"&afr;\": \"\\uD835\\uDD1E\",\n        \"&agrave\": \"\\u00E0\",\n        \"&agrave;\": \"\\u00E0\",\n        \"&alefsym;\": \"\\u2135\",\n        \"&aleph;\": \"\\u2135\",\n        \"&alpha;\": \"\\u03B1\",\n        \"&amacr;\": \"\\u0101\",\n        \"&amalg;\": \"\\u2A3F\",\n        \"&amp\": \"\\u0026\",\n        \"&amp;\": \"\\u0026\",\n        \"&and;\": \"\\u2227\",\n        \"&andand;\": \"\\u2A55\",\n        \"&andd;\": \"\\u2A5C\",\n        \"&andslope;\": \"\\u2A58\",\n        \"&andv;\": \"\\u2A5A\",\n        \"&ang;\": \"\\u2220\",\n        \"&ange;\": \"\\u29A4\",\n        \"&angle;\": \"\\u2220\",\n        \"&angmsd;\": \"\\u2221\",\n        \"&angmsdaa;\": \"\\u29A8\",\n        \"&angmsdab;\": \"\\u29A9\",\n        \"&angmsdac;\": \"\\u29AA\",\n        \"&angmsdad;\": \"\\u29AB\",\n        \"&angmsdae;\": \"\\u29AC\",\n        \"&angmsdaf;\": \"\\u29AD\",\n        \"&angmsdag;\": \"\\u29AE\",\n        \"&angmsdah;\": \"\\u29AF\",\n        \"&angrt;\": \"\\u221F\",\n        \"&angrtvb;\": \"\\u22BE\",\n        \"&angrtvbd;\": \"\\u299D\",\n        \"&angsph;\": \"\\u2222\",\n        \"&angst;\": \"\\u00C5\",\n        \"&angzarr;\": \"\\u237C\",\n        \"&aogon;\": \"\\u0105\",\n        \"&aopf;\": \"\\uD835\\uDD52\",\n        \"&ap;\": \"\\u2248\",\n        \"&apE;\": \"\\u2A70\",\n        \"&apacir;\": \"\\u2A6F\",\n        \"&ape;\": \"\\u224A\",\n        \"&apid;\": \"\\u224B\",\n        \"&apos;\": \"\\u0027\",\n        \"&approx;\": \"\\u2248\",\n        \"&approxeq;\": \"\\u224A\",\n        \"&aring\": \"\\u00E5\",\n        \"&aring;\": \"\\u00E5\",\n        \"&ascr;\": \"\\uD835\\uDCB6\",\n        \"&ast;\": \"\\u002A\",\n        \"&asymp;\": \"\\u2248\",\n        \"&asympeq;\": \"\\u224D\",\n        \"&atilde\": \"\\u00E3\",\n        \"&atilde;\": \"\\u00E3\",\n        \"&auml\": \"\\u00E4\",\n        \"&auml;\": \"\\u00E4\",\n        \"&awconint;\": \"\\u2233\",\n        \"&awint;\": \"\\u2A11\",\n        \"&bNot;\": \"\\u2AED\",\n        \"&backcong;\": \"\\u224C\",\n        \"&backepsilon;\": \"\\u03F6\",\n        \"&backprime;\": \"\\u2035\",\n        \"&backsim;\": \"\\u223D\",\n        \"&backsimeq;\": \"\\u22CD\",\n        \"&barvee;\": \"\\u22BD\",\n        \"&barwed;\": \"\\u2305\",\n        \"&barwedge;\": \"\\u2305\",\n        \"&bbrk;\": \"\\u23B5\",\n        \"&bbrktbrk;\": \"\\u23B6\",\n        \"&bcong;\": \"\\u224C\",\n        \"&bcy;\": \"\\u0431\",\n        \"&bdquo;\": \"\\u201E\",\n        \"&becaus;\": \"\\u2235\",\n        \"&because;\": \"\\u2235\",\n        \"&bemptyv;\": \"\\u29B0\",\n        \"&bepsi;\": \"\\u03F6\",\n        \"&bernou;\": \"\\u212C\",\n        \"&beta;\": \"\\u03B2\",\n        \"&beth;\": \"\\u2136\",\n        \"&between;\": \"\\u226C\",\n        \"&bfr;\": \"\\uD835\\uDD1F\",\n        \"&bigcap;\": \"\\u22C2\",\n        \"&bigcirc;\": \"\\u25EF\",\n        \"&bigcup;\": \"\\u22C3\",\n        \"&bigodot;\": \"\\u2A00\",\n        \"&bigoplus;\": \"\\u2A01\",\n        \"&bigotimes;\": \"\\u2A02\",\n        \"&bigsqcup;\": \"\\u2A06\",\n        \"&bigstar;\": \"\\u2605\",\n        \"&bigtriangledown;\": \"\\u25BD\",\n        \"&bigtriangleup;\": \"\\u25B3\",\n        \"&biguplus;\": \"\\u2A04\",\n        \"&bigvee;\": \"\\u22C1\",\n        \"&bigwedge;\": \"\\u22C0\",\n        \"&bkarow;\": \"\\u290D\",\n        \"&blacklozenge;\": \"\\u29EB\",\n        \"&blacksquare;\": \"\\u25AA\",\n        \"&blacktriangle;\": \"\\u25B4\",\n        \"&blacktriangledown;\": \"\\u25BE\",\n        \"&blacktriangleleft;\": \"\\u25C2\",\n        \"&blacktriangleright;\": \"\\u25B8\",\n        \"&blank;\": \"\\u2423\",\n        \"&blk12;\": \"\\u2592\",\n        \"&blk14;\": \"\\u2591\",\n        \"&blk34;\": \"\\u2593\",\n        \"&block;\": \"\\u2588\",\n        \"&bne;\": \"\\u003D\\u20E5\",\n        \"&bnequiv;\": \"\\u2261\\u20E5\",\n        \"&bnot;\": \"\\u2310\",\n        \"&bopf;\": \"\\uD835\\uDD53\",\n        \"&bot;\": \"\\u22A5\",\n        \"&bottom;\": \"\\u22A5\",\n        \"&bowtie;\": \"\\u22C8\",\n        \"&boxDL;\": \"\\u2557\",\n        \"&boxDR;\": \"\\u2554\",\n        \"&boxDl;\": \"\\u2556\",\n        \"&boxDr;\": \"\\u2553\",\n        \"&boxH;\": \"\\u2550\",\n        \"&boxHD;\": \"\\u2566\",\n        \"&boxHU;\": \"\\u2569\",\n        \"&boxHd;\": \"\\u2564\",\n        \"&boxHu;\": \"\\u2567\",\n        \"&boxUL;\": \"\\u255D\",\n        \"&boxUR;\": \"\\u255A\",\n        \"&boxUl;\": \"\\u255C\",\n        \"&boxUr;\": \"\\u2559\",\n        \"&boxV;\": \"\\u2551\",\n        \"&boxVH;\": \"\\u256C\",\n        \"&boxVL;\": \"\\u2563\",\n        \"&boxVR;\": \"\\u2560\",\n        \"&boxVh;\": \"\\u256B\",\n        \"&boxVl;\": \"\\u2562\",\n        \"&boxVr;\": \"\\u255F\",\n        \"&boxbox;\": \"\\u29C9\",\n        \"&boxdL;\": \"\\u2555\",\n        \"&boxdR;\": \"\\u2552\",\n        \"&boxdl;\": \"\\u2510\",\n        \"&boxdr;\": \"\\u250C\",\n        \"&boxh;\": \"\\u2500\",\n        \"&boxhD;\": \"\\u2565\",\n        \"&boxhU;\": \"\\u2568\",\n        \"&boxhd;\": \"\\u252C\",\n        \"&boxhu;\": \"\\u2534\",\n        \"&boxminus;\": \"\\u229F\",\n        \"&boxplus;\": \"\\u229E\",\n        \"&boxtimes;\": \"\\u22A0\",\n        \"&boxuL;\": \"\\u255B\",\n        \"&boxuR;\": \"\\u2558\",\n        \"&boxul;\": \"\\u2518\",\n        \"&boxur;\": \"\\u2514\",\n        \"&boxv;\": \"\\u2502\",\n        \"&boxvH;\": \"\\u256A\",\n        \"&boxvL;\": \"\\u2561\",\n        \"&boxvR;\": \"\\u255E\",\n        \"&boxvh;\": \"\\u253C\",\n        \"&boxvl;\": \"\\u2524\",\n        \"&boxvr;\": \"\\u251C\",\n        \"&bprime;\": \"\\u2035\",\n        \"&breve;\": \"\\u02D8\",\n        \"&brvbar\": \"\\u00A6\",\n        \"&brvbar;\": \"\\u00A6\",\n        \"&bscr;\": \"\\uD835\\uDCB7\",\n        \"&bsemi;\": \"\\u204F\",\n        \"&bsim;\": \"\\u223D\",\n        \"&bsime;\": \"\\u22CD\",\n        \"&bsol;\": \"\\u005C\",\n        \"&bsolb;\": \"\\u29C5\",\n        \"&bsolhsub;\": \"\\u27C8\",\n        \"&bull;\": \"\\u2022\",\n        \"&bullet;\": \"\\u2022\",\n        \"&bump;\": \"\\u224E\",\n        \"&bumpE;\": \"\\u2AAE\",\n        \"&bumpe;\": \"\\u224F\",\n        \"&bumpeq;\": \"\\u224F\",\n        \"&cacute;\": \"\\u0107\",\n        \"&cap;\": \"\\u2229\",\n        \"&capand;\": \"\\u2A44\",\n        \"&capbrcup;\": \"\\u2A49\",\n        \"&capcap;\": \"\\u2A4B\",\n        \"&capcup;\": \"\\u2A47\",\n        \"&capdot;\": \"\\u2A40\",\n        \"&caps;\": \"\\u2229\\uFE00\",\n        \"&caret;\": \"\\u2041\",\n        \"&caron;\": \"\\u02C7\",\n        \"&ccaps;\": \"\\u2A4D\",\n        \"&ccaron;\": \"\\u010D\",\n        \"&ccedil\": \"\\u00E7\",\n        \"&ccedil;\": \"\\u00E7\",\n        \"&ccirc;\": \"\\u0109\",\n        \"&ccups;\": \"\\u2A4C\",\n        \"&ccupssm;\": \"\\u2A50\",\n        \"&cdot;\": \"\\u010B\",\n        \"&cedil\": \"\\u00B8\",\n        \"&cedil;\": \"\\u00B8\",\n        \"&cemptyv;\": \"\\u29B2\",\n        \"&cent\": \"\\u00A2\",\n        \"&cent;\": \"\\u00A2\",\n        \"&centerdot;\": \"\\u00B7\",\n        \"&cfr;\": \"\\uD835\\uDD20\",\n        \"&chcy;\": \"\\u0447\",\n        \"&check;\": \"\\u2713\",\n        \"&checkmark;\": \"\\u2713\",\n        \"&chi;\": \"\\u03C7\",\n        \"&cir;\": \"\\u25CB\",\n        \"&cirE;\": \"\\u29C3\",\n        \"&circ;\": \"\\u02C6\",\n        \"&circeq;\": \"\\u2257\",\n        \"&circlearrowleft;\": \"\\u21BA\",\n        \"&circlearrowright;\": \"\\u21BB\",\n        \"&circledR;\": \"\\u00AE\",\n        \"&circledS;\": \"\\u24C8\",\n        \"&circledast;\": \"\\u229B\",\n        \"&circledcirc;\": \"\\u229A\",\n        \"&circleddash;\": \"\\u229D\",\n        \"&cire;\": \"\\u2257\",\n        \"&cirfnint;\": \"\\u2A10\",\n        \"&cirmid;\": \"\\u2AEF\",\n        \"&cirscir;\": \"\\u29C2\",\n        \"&clubs;\": \"\\u2663\",\n        \"&clubsuit;\": \"\\u2663\",\n        \"&colon;\": \"\\u003A\",\n        \"&colone;\": \"\\u2254\",\n        \"&coloneq;\": \"\\u2254\",\n        \"&comma;\": \"\\u002C\",\n        \"&commat;\": \"\\u0040\",\n        \"&comp;\": \"\\u2201\",\n        \"&compfn;\": \"\\u2218\",\n        \"&complement;\": \"\\u2201\",\n        \"&complexes;\": \"\\u2102\",\n        \"&cong;\": \"\\u2245\",\n        \"&congdot;\": \"\\u2A6D\",\n        \"&conint;\": \"\\u222E\",\n        \"&copf;\": \"\\uD835\\uDD54\",\n        \"&coprod;\": \"\\u2210\",\n        \"&copy\": \"\\u00A9\",\n        \"&copy;\": \"\\u00A9\",\n        \"&copysr;\": \"\\u2117\",\n        \"&crarr;\": \"\\u21B5\",\n        \"&cross;\": \"\\u2717\",\n        \"&cscr;\": \"\\uD835\\uDCB8\",\n        \"&csub;\": \"\\u2ACF\",\n        \"&csube;\": \"\\u2AD1\",\n        \"&csup;\": \"\\u2AD0\",\n        \"&csupe;\": \"\\u2AD2\",\n        \"&ctdot;\": \"\\u22EF\",\n        \"&cudarrl;\": \"\\u2938\",\n        \"&cudarrr;\": \"\\u2935\",\n        \"&cuepr;\": \"\\u22DE\",\n        \"&cuesc;\": \"\\u22DF\",\n        \"&cularr;\": \"\\u21B6\",\n        \"&cularrp;\": \"\\u293D\",\n        \"&cup;\": \"\\u222A\",\n        \"&cupbrcap;\": \"\\u2A48\",\n        \"&cupcap;\": \"\\u2A46\",\n        \"&cupcup;\": \"\\u2A4A\",\n        \"&cupdot;\": \"\\u228D\",\n        \"&cupor;\": \"\\u2A45\",\n        \"&cups;\": \"\\u222A\\uFE00\",\n        \"&curarr;\": \"\\u21B7\",\n        \"&curarrm;\": \"\\u293C\",\n        \"&curlyeqprec;\": \"\\u22DE\",\n        \"&curlyeqsucc;\": \"\\u22DF\",\n        \"&curlyvee;\": \"\\u22CE\",\n        \"&curlywedge;\": \"\\u22CF\",\n        \"&curren\": \"\\u00A4\",\n        \"&curren;\": \"\\u00A4\",\n        \"&curvearrowleft;\": \"\\u21B6\",\n        \"&curvearrowright;\": \"\\u21B7\",\n        \"&cuvee;\": \"\\u22CE\",\n        \"&cuwed;\": \"\\u22CF\",\n        \"&cwconint;\": \"\\u2232\",\n        \"&cwint;\": \"\\u2231\",\n        \"&cylcty;\": \"\\u232D\",\n        \"&dArr;\": \"\\u21D3\",\n        \"&dHar;\": \"\\u2965\",\n        \"&dagger;\": \"\\u2020\",\n        \"&daleth;\": \"\\u2138\",\n        \"&darr;\": \"\\u2193\",\n        \"&dash;\": \"\\u2010\",\n        \"&dashv;\": \"\\u22A3\",\n        \"&dbkarow;\": \"\\u290F\",\n        \"&dblac;\": \"\\u02DD\",\n        \"&dcaron;\": \"\\u010F\",\n        \"&dcy;\": \"\\u0434\",\n        \"&dd;\": \"\\u2146\",\n        \"&ddagger;\": \"\\u2021\",\n        \"&ddarr;\": \"\\u21CA\",\n        \"&ddotseq;\": \"\\u2A77\",\n        \"&deg\": \"\\u00B0\",\n        \"&deg;\": \"\\u00B0\",\n        \"&delta;\": \"\\u03B4\",\n        \"&demptyv;\": \"\\u29B1\",\n        \"&dfisht;\": \"\\u297F\",\n        \"&dfr;\": \"\\uD835\\uDD21\",\n        \"&dharl;\": \"\\u21C3\",\n        \"&dharr;\": \"\\u21C2\",\n        \"&diam;\": \"\\u22C4\",\n        \"&diamond;\": \"\\u22C4\",\n        \"&diamondsuit;\": \"\\u2666\",\n        \"&diams;\": \"\\u2666\",\n        \"&die;\": \"\\u00A8\",\n        \"&digamma;\": \"\\u03DD\",\n        \"&disin;\": \"\\u22F2\",\n        \"&div;\": \"\\u00F7\",\n        \"&divide\": \"\\u00F7\",\n        \"&divide;\": \"\\u00F7\",\n        \"&divideontimes;\": \"\\u22C7\",\n        \"&divonx;\": \"\\u22C7\",\n        \"&djcy;\": \"\\u0452\",\n        \"&dlcorn;\": \"\\u231E\",\n        \"&dlcrop;\": \"\\u230D\",\n        \"&dollar;\": \"\\u0024\",\n        \"&dopf;\": \"\\uD835\\uDD55\",\n        \"&dot;\": \"\\u02D9\",\n        \"&doteq;\": \"\\u2250\",\n        \"&doteqdot;\": \"\\u2251\",\n        \"&dotminus;\": \"\\u2238\",\n        \"&dotplus;\": \"\\u2214\",\n        \"&dotsquare;\": \"\\u22A1\",\n        \"&doublebarwedge;\": \"\\u2306\",\n        \"&downarrow;\": \"\\u2193\",\n        \"&downdownarrows;\": \"\\u21CA\",\n        \"&downharpoonleft;\": \"\\u21C3\",\n        \"&downharpoonright;\": \"\\u21C2\",\n        \"&drbkarow;\": \"\\u2910\",\n        \"&drcorn;\": \"\\u231F\",\n        \"&drcrop;\": \"\\u230C\",\n        \"&dscr;\": \"\\uD835\\uDCB9\",\n        \"&dscy;\": \"\\u0455\",\n        \"&dsol;\": \"\\u29F6\",\n        \"&dstrok;\": \"\\u0111\",\n        \"&dtdot;\": \"\\u22F1\",\n        \"&dtri;\": \"\\u25BF\",\n        \"&dtrif;\": \"\\u25BE\",\n        \"&duarr;\": \"\\u21F5\",\n        \"&duhar;\": \"\\u296F\",\n        \"&dwangle;\": \"\\u29A6\",\n        \"&dzcy;\": \"\\u045F\",\n        \"&dzigrarr;\": \"\\u27FF\",\n        \"&eDDot;\": \"\\u2A77\",\n        \"&eDot;\": \"\\u2251\",\n        \"&eacute\": \"\\u00E9\",\n        \"&eacute;\": \"\\u00E9\",\n        \"&easter;\": \"\\u2A6E\",\n        \"&ecaron;\": \"\\u011B\",\n        \"&ecir;\": \"\\u2256\",\n        \"&ecirc\": \"\\u00EA\",\n        \"&ecirc;\": \"\\u00EA\",\n        \"&ecolon;\": \"\\u2255\",\n        \"&ecy;\": \"\\u044D\",\n        \"&edot;\": \"\\u0117\",\n        \"&ee;\": \"\\u2147\",\n        \"&efDot;\": \"\\u2252\",\n        \"&efr;\": \"\\uD835\\uDD22\",\n        \"&eg;\": \"\\u2A9A\",\n        \"&egrave\": \"\\u00E8\",\n        \"&egrave;\": \"\\u00E8\",\n        \"&egs;\": \"\\u2A96\",\n        \"&egsdot;\": \"\\u2A98\",\n        \"&el;\": \"\\u2A99\",\n        \"&elinters;\": \"\\u23E7\",\n        \"&ell;\": \"\\u2113\",\n        \"&els;\": \"\\u2A95\",\n        \"&elsdot;\": \"\\u2A97\",\n        \"&emacr;\": \"\\u0113\",\n        \"&empty;\": \"\\u2205\",\n        \"&emptyset;\": \"\\u2205\",\n        \"&emptyv;\": \"\\u2205\",\n        \"&emsp13;\": \"\\u2004\",\n        \"&emsp14;\": \"\\u2005\",\n        \"&emsp;\": \"\\u2003\",\n        \"&eng;\": \"\\u014B\",\n        \"&ensp;\": \"\\u2002\",\n        \"&eogon;\": \"\\u0119\",\n        \"&eopf;\": \"\\uD835\\uDD56\",\n        \"&epar;\": \"\\u22D5\",\n        \"&eparsl;\": \"\\u29E3\",\n        \"&eplus;\": \"\\u2A71\",\n        \"&epsi;\": \"\\u03B5\",\n        \"&epsilon;\": \"\\u03B5\",\n        \"&epsiv;\": \"\\u03F5\",\n        \"&eqcirc;\": \"\\u2256\",\n        \"&eqcolon;\": \"\\u2255\",\n        \"&eqsim;\": \"\\u2242\",\n        \"&eqslantgtr;\": \"\\u2A96\",\n        \"&eqslantless;\": \"\\u2A95\",\n        \"&equals;\": \"\\u003D\",\n        \"&equest;\": \"\\u225F\",\n        \"&equiv;\": \"\\u2261\",\n        \"&equivDD;\": \"\\u2A78\",\n        \"&eqvparsl;\": \"\\u29E5\",\n        \"&erDot;\": \"\\u2253\",\n        \"&erarr;\": \"\\u2971\",\n        \"&escr;\": \"\\u212F\",\n        \"&esdot;\": \"\\u2250\",\n        \"&esim;\": \"\\u2242\",\n        \"&eta;\": \"\\u03B7\",\n        \"&eth\": \"\\u00F0\",\n        \"&eth;\": \"\\u00F0\",\n        \"&euml\": \"\\u00EB\",\n        \"&euml;\": \"\\u00EB\",\n        \"&euro;\": \"\\u20AC\",\n        \"&excl;\": \"\\u0021\",\n        \"&exist;\": \"\\u2203\",\n        \"&expectation;\": \"\\u2130\",\n        \"&exponentiale;\": \"\\u2147\",\n        \"&fallingdotseq;\": \"\\u2252\",\n        \"&fcy;\": \"\\u0444\",\n        \"&female;\": \"\\u2640\",\n        \"&ffilig;\": \"\\uFB03\",\n        \"&fflig;\": \"\\uFB00\",\n        \"&ffllig;\": \"\\uFB04\",\n        \"&ffr;\": \"\\uD835\\uDD23\",\n        \"&filig;\": \"\\uFB01\",\n        \"&fjlig;\": \"\\u0066\\u006A\",\n        \"&flat;\": \"\\u266D\",\n        \"&fllig;\": \"\\uFB02\",\n        \"&fltns;\": \"\\u25B1\",\n        \"&fnof;\": \"\\u0192\",\n        \"&fopf;\": \"\\uD835\\uDD57\",\n        \"&forall;\": \"\\u2200\",\n        \"&fork;\": \"\\u22D4\",\n        \"&forkv;\": \"\\u2AD9\",\n        \"&fpartint;\": \"\\u2A0D\",\n        \"&frac12\": \"\\u00BD\",\n        \"&frac12;\": \"\\u00BD\",\n        \"&frac13;\": \"\\u2153\",\n        \"&frac14\": \"\\u00BC\",\n        \"&frac14;\": \"\\u00BC\",\n        \"&frac15;\": \"\\u2155\",\n        \"&frac16;\": \"\\u2159\",\n        \"&frac18;\": \"\\u215B\",\n        \"&frac23;\": \"\\u2154\",\n        \"&frac25;\": \"\\u2156\",\n        \"&frac34\": \"\\u00BE\",\n        \"&frac34;\": \"\\u00BE\",\n        \"&frac35;\": \"\\u2157\",\n        \"&frac38;\": \"\\u215C\",\n        \"&frac45;\": \"\\u2158\",\n        \"&frac56;\": \"\\u215A\",\n        \"&frac58;\": \"\\u215D\",\n        \"&frac78;\": \"\\u215E\",\n        \"&frasl;\": \"\\u2044\",\n        \"&frown;\": \"\\u2322\",\n        \"&fscr;\": \"\\uD835\\uDCBB\",\n        \"&gE;\": \"\\u2267\",\n        \"&gEl;\": \"\\u2A8C\",\n        \"&gacute;\": \"\\u01F5\",\n        \"&gamma;\": \"\\u03B3\",\n        \"&gammad;\": \"\\u03DD\",\n        \"&gap;\": \"\\u2A86\",\n        \"&gbreve;\": \"\\u011F\",\n        \"&gcirc;\": \"\\u011D\",\n        \"&gcy;\": \"\\u0433\",\n        \"&gdot;\": \"\\u0121\",\n        \"&ge;\": \"\\u2265\",\n        \"&gel;\": \"\\u22DB\",\n        \"&geq;\": \"\\u2265\",\n        \"&geqq;\": \"\\u2267\",\n        \"&geqslant;\": \"\\u2A7E\",\n        \"&ges;\": \"\\u2A7E\",\n        \"&gescc;\": \"\\u2AA9\",\n        \"&gesdot;\": \"\\u2A80\",\n        \"&gesdoto;\": \"\\u2A82\",\n        \"&gesdotol;\": \"\\u2A84\",\n        \"&gesl;\": \"\\u22DB\\uFE00\",\n        \"&gesles;\": \"\\u2A94\",\n        \"&gfr;\": \"\\uD835\\uDD24\",\n        \"&gg;\": \"\\u226B\",\n        \"&ggg;\": \"\\u22D9\",\n        \"&gimel;\": \"\\u2137\",\n        \"&gjcy;\": \"\\u0453\",\n        \"&gl;\": \"\\u2277\",\n        \"&glE;\": \"\\u2A92\",\n        \"&gla;\": \"\\u2AA5\",\n        \"&glj;\": \"\\u2AA4\",\n        \"&gnE;\": \"\\u2269\",\n        \"&gnap;\": \"\\u2A8A\",\n        \"&gnapprox;\": \"\\u2A8A\",\n        \"&gne;\": \"\\u2A88\",\n        \"&gneq;\": \"\\u2A88\",\n        \"&gneqq;\": \"\\u2269\",\n        \"&gnsim;\": \"\\u22E7\",\n        \"&gopf;\": \"\\uD835\\uDD58\",\n        \"&grave;\": \"\\u0060\",\n        \"&gscr;\": \"\\u210A\",\n        \"&gsim;\": \"\\u2273\",\n        \"&gsime;\": \"\\u2A8E\",\n        \"&gsiml;\": \"\\u2A90\",\n        \"&gt\": \"\\u003E\",\n        \"&gt;\": \"\\u003E\",\n        \"&gtcc;\": \"\\u2AA7\",\n        \"&gtcir;\": \"\\u2A7A\",\n        \"&gtdot;\": \"\\u22D7\",\n        \"&gtlPar;\": \"\\u2995\",\n        \"&gtquest;\": \"\\u2A7C\",\n        \"&gtrapprox;\": \"\\u2A86\",\n        \"&gtrarr;\": \"\\u2978\",\n        \"&gtrdot;\": \"\\u22D7\",\n        \"&gtreqless;\": \"\\u22DB\",\n        \"&gtreqqless;\": \"\\u2A8C\",\n        \"&gtrless;\": \"\\u2277\",\n        \"&gtrsim;\": \"\\u2273\",\n        \"&gvertneqq;\": \"\\u2269\\uFE00\",\n        \"&gvnE;\": \"\\u2269\\uFE00\",\n        \"&hArr;\": \"\\u21D4\",\n        \"&hairsp;\": \"\\u200A\",\n        \"&half;\": \"\\u00BD\",\n        \"&hamilt;\": \"\\u210B\",\n        \"&hardcy;\": \"\\u044A\",\n        \"&harr;\": \"\\u2194\",\n        \"&harrcir;\": \"\\u2948\",\n        \"&harrw;\": \"\\u21AD\",\n        \"&hbar;\": \"\\u210F\",\n        \"&hcirc;\": \"\\u0125\",\n        \"&hearts;\": \"\\u2665\",\n        \"&heartsuit;\": \"\\u2665\",\n        \"&hellip;\": \"\\u2026\",\n        \"&hercon;\": \"\\u22B9\",\n        \"&hfr;\": \"\\uD835\\uDD25\",\n        \"&hksearow;\": \"\\u2925\",\n        \"&hkswarow;\": \"\\u2926\",\n        \"&hoarr;\": \"\\u21FF\",\n        \"&homtht;\": \"\\u223B\",\n        \"&hookleftarrow;\": \"\\u21A9\",\n        \"&hookrightarrow;\": \"\\u21AA\",\n        \"&hopf;\": \"\\uD835\\uDD59\",\n        \"&horbar;\": \"\\u2015\",\n        \"&hscr;\": \"\\uD835\\uDCBD\",\n        \"&hslash;\": \"\\u210F\",\n        \"&hstrok;\": \"\\u0127\",\n        \"&hybull;\": \"\\u2043\",\n        \"&hyphen;\": \"\\u2010\",\n        \"&iacute\": \"\\u00ED\",\n        \"&iacute;\": \"\\u00ED\",\n        \"&ic;\": \"\\u2063\",\n        \"&icirc\": \"\\u00EE\",\n        \"&icirc;\": \"\\u00EE\",\n        \"&icy;\": \"\\u0438\",\n        \"&iecy;\": \"\\u0435\",\n        \"&iexcl\": \"\\u00A1\",\n        \"&iexcl;\": \"\\u00A1\",\n        \"&iff;\": \"\\u21D4\",\n        \"&ifr;\": \"\\uD835\\uDD26\",\n        \"&igrave\": \"\\u00EC\",\n        \"&igrave;\": \"\\u00EC\",\n        \"&ii;\": \"\\u2148\",\n        \"&iiiint;\": \"\\u2A0C\",\n        \"&iiint;\": \"\\u222D\",\n        \"&iinfin;\": \"\\u29DC\",\n        \"&iiota;\": \"\\u2129\",\n        \"&ijlig;\": \"\\u0133\",\n        \"&imacr;\": \"\\u012B\",\n        \"&image;\": \"\\u2111\",\n        \"&imagline;\": \"\\u2110\",\n        \"&imagpart;\": \"\\u2111\",\n        \"&imath;\": \"\\u0131\",\n        \"&imof;\": \"\\u22B7\",\n        \"&imped;\": \"\\u01B5\",\n        \"&in;\": \"\\u2208\",\n        \"&incare;\": \"\\u2105\",\n        \"&infin;\": \"\\u221E\",\n        \"&infintie;\": \"\\u29DD\",\n        \"&inodot;\": \"\\u0131\",\n        \"&int;\": \"\\u222B\",\n        \"&intcal;\": \"\\u22BA\",\n        \"&integers;\": \"\\u2124\",\n        \"&intercal;\": \"\\u22BA\",\n        \"&intlarhk;\": \"\\u2A17\",\n        \"&intprod;\": \"\\u2A3C\",\n        \"&iocy;\": \"\\u0451\",\n        \"&iogon;\": \"\\u012F\",\n        \"&iopf;\": \"\\uD835\\uDD5A\",\n        \"&iota;\": \"\\u03B9\",\n        \"&iprod;\": \"\\u2A3C\",\n        \"&iquest\": \"\\u00BF\",\n        \"&iquest;\": \"\\u00BF\",\n        \"&iscr;\": \"\\uD835\\uDCBE\",\n        \"&isin;\": \"\\u2208\",\n        \"&isinE;\": \"\\u22F9\",\n        \"&isindot;\": \"\\u22F5\",\n        \"&isins;\": \"\\u22F4\",\n        \"&isinsv;\": \"\\u22F3\",\n        \"&isinv;\": \"\\u2208\",\n        \"&it;\": \"\\u2062\",\n        \"&itilde;\": \"\\u0129\",\n        \"&iukcy;\": \"\\u0456\",\n        \"&iuml\": \"\\u00EF\",\n        \"&iuml;\": \"\\u00EF\",\n        \"&jcirc;\": \"\\u0135\",\n        \"&jcy;\": \"\\u0439\",\n        \"&jfr;\": \"\\uD835\\uDD27\",\n        \"&jmath;\": \"\\u0237\",\n        \"&jopf;\": \"\\uD835\\uDD5B\",\n        \"&jscr;\": \"\\uD835\\uDCBF\",\n        \"&jsercy;\": \"\\u0458\",\n        \"&jukcy;\": \"\\u0454\",\n        \"&kappa;\": \"\\u03BA\",\n        \"&kappav;\": \"\\u03F0\",\n        \"&kcedil;\": \"\\u0137\",\n        \"&kcy;\": \"\\u043A\",\n        \"&kfr;\": \"\\uD835\\uDD28\",\n        \"&kgreen;\": \"\\u0138\",\n        \"&khcy;\": \"\\u0445\",\n        \"&kjcy;\": \"\\u045C\",\n        \"&kopf;\": \"\\uD835\\uDD5C\",\n        \"&kscr;\": \"\\uD835\\uDCC0\",\n        \"&lAarr;\": \"\\u21DA\",\n        \"&lArr;\": \"\\u21D0\",\n        \"&lAtail;\": \"\\u291B\",\n        \"&lBarr;\": \"\\u290E\",\n        \"&lE;\": \"\\u2266\",\n        \"&lEg;\": \"\\u2A8B\",\n        \"&lHar;\": \"\\u2962\",\n        \"&lacute;\": \"\\u013A\",\n        \"&laemptyv;\": \"\\u29B4\",\n        \"&lagran;\": \"\\u2112\",\n        \"&lambda;\": \"\\u03BB\",\n        \"&lang;\": \"\\u27E8\",\n        \"&langd;\": \"\\u2991\",\n        \"&langle;\": \"\\u27E8\",\n        \"&lap;\": \"\\u2A85\",\n        \"&laquo\": \"\\u00AB\",\n        \"&laquo;\": \"\\u00AB\",\n        \"&larr;\": \"\\u2190\",\n        \"&larrb;\": \"\\u21E4\",\n        \"&larrbfs;\": \"\\u291F\",\n        \"&larrfs;\": \"\\u291D\",\n        \"&larrhk;\": \"\\u21A9\",\n        \"&larrlp;\": \"\\u21AB\",\n        \"&larrpl;\": \"\\u2939\",\n        \"&larrsim;\": \"\\u2973\",\n        \"&larrtl;\": \"\\u21A2\",\n        \"&lat;\": \"\\u2AAB\",\n        \"&latail;\": \"\\u2919\",\n        \"&late;\": \"\\u2AAD\",\n        \"&lates;\": \"\\u2AAD\\uFE00\",\n        \"&lbarr;\": \"\\u290C\",\n        \"&lbbrk;\": \"\\u2772\",\n        \"&lbrace;\": \"\\u007B\",\n        \"&lbrack;\": \"\\u005B\",\n        \"&lbrke;\": \"\\u298B\",\n        \"&lbrksld;\": \"\\u298F\",\n        \"&lbrkslu;\": \"\\u298D\",\n        \"&lcaron;\": \"\\u013E\",\n        \"&lcedil;\": \"\\u013C\",\n        \"&lceil;\": \"\\u2308\",\n        \"&lcub;\": \"\\u007B\",\n        \"&lcy;\": \"\\u043B\",\n        \"&ldca;\": \"\\u2936\",\n        \"&ldquo;\": \"\\u201C\",\n        \"&ldquor;\": \"\\u201E\",\n        \"&ldrdhar;\": \"\\u2967\",\n        \"&ldrushar;\": \"\\u294B\",\n        \"&ldsh;\": \"\\u21B2\",\n        \"&le;\": \"\\u2264\",\n        \"&leftarrow;\": \"\\u2190\",\n        \"&leftarrowtail;\": \"\\u21A2\",\n        \"&leftharpoondown;\": \"\\u21BD\",\n        \"&leftharpoonup;\": \"\\u21BC\",\n        \"&leftleftarrows;\": \"\\u21C7\",\n        \"&leftrightarrow;\": \"\\u2194\",\n        \"&leftrightarrows;\": \"\\u21C6\",\n        \"&leftrightharpoons;\": \"\\u21CB\",\n        \"&leftrightsquigarrow;\": \"\\u21AD\",\n        \"&leftthreetimes;\": \"\\u22CB\",\n        \"&leg;\": \"\\u22DA\",\n        \"&leq;\": \"\\u2264\",\n        \"&leqq;\": \"\\u2266\",\n        \"&leqslant;\": \"\\u2A7D\",\n        \"&les;\": \"\\u2A7D\",\n        \"&lescc;\": \"\\u2AA8\",\n        \"&lesdot;\": \"\\u2A7F\",\n        \"&lesdoto;\": \"\\u2A81\",\n        \"&lesdotor;\": \"\\u2A83\",\n        \"&lesg;\": \"\\u22DA\\uFE00\",\n        \"&lesges;\": \"\\u2A93\",\n        \"&lessapprox;\": \"\\u2A85\",\n        \"&lessdot;\": \"\\u22D6\",\n        \"&lesseqgtr;\": \"\\u22DA\",\n        \"&lesseqqgtr;\": \"\\u2A8B\",\n        \"&lessgtr;\": \"\\u2276\",\n        \"&lesssim;\": \"\\u2272\",\n        \"&lfisht;\": \"\\u297C\",\n        \"&lfloor;\": \"\\u230A\",\n        \"&lfr;\": \"\\uD835\\uDD29\",\n        \"&lg;\": \"\\u2276\",\n        \"&lgE;\": \"\\u2A91\",\n        \"&lhard;\": \"\\u21BD\",\n        \"&lharu;\": \"\\u21BC\",\n        \"&lharul;\": \"\\u296A\",\n        \"&lhblk;\": \"\\u2584\",\n        \"&ljcy;\": \"\\u0459\",\n        \"&ll;\": \"\\u226A\",\n        \"&llarr;\": \"\\u21C7\",\n        \"&llcorner;\": \"\\u231E\",\n        \"&llhard;\": \"\\u296B\",\n        \"&lltri;\": \"\\u25FA\",\n        \"&lmidot;\": \"\\u0140\",\n        \"&lmoust;\": \"\\u23B0\",\n        \"&lmoustache;\": \"\\u23B0\",\n        \"&lnE;\": \"\\u2268\",\n        \"&lnap;\": \"\\u2A89\",\n        \"&lnapprox;\": \"\\u2A89\",\n        \"&lne;\": \"\\u2A87\",\n        \"&lneq;\": \"\\u2A87\",\n        \"&lneqq;\": \"\\u2268\",\n        \"&lnsim;\": \"\\u22E6\",\n        \"&loang;\": \"\\u27EC\",\n        \"&loarr;\": \"\\u21FD\",\n        \"&lobrk;\": \"\\u27E6\",\n        \"&longleftarrow;\": \"\\u27F5\",\n        \"&longleftrightarrow;\": \"\\u27F7\",\n        \"&longmapsto;\": \"\\u27FC\",\n        \"&longrightarrow;\": \"\\u27F6\",\n        \"&looparrowleft;\": \"\\u21AB\",\n        \"&looparrowright;\": \"\\u21AC\",\n        \"&lopar;\": \"\\u2985\",\n        \"&lopf;\": \"\\uD835\\uDD5D\",\n        \"&loplus;\": \"\\u2A2D\",\n        \"&lotimes;\": \"\\u2A34\",\n        \"&lowast;\": \"\\u2217\",\n        \"&lowbar;\": \"\\u005F\",\n        \"&loz;\": \"\\u25CA\",\n        \"&lozenge;\": \"\\u25CA\",\n        \"&lozf;\": \"\\u29EB\",\n        \"&lpar;\": \"\\u0028\",\n        \"&lparlt;\": \"\\u2993\",\n        \"&lrarr;\": \"\\u21C6\",\n        \"&lrcorner;\": \"\\u231F\",\n        \"&lrhar;\": \"\\u21CB\",\n        \"&lrhard;\": \"\\u296D\",\n        \"&lrm;\": \"\\u200E\",\n        \"&lrtri;\": \"\\u22BF\",\n        \"&lsaquo;\": \"\\u2039\",\n        \"&lscr;\": \"\\uD835\\uDCC1\",\n        \"&lsh;\": \"\\u21B0\",\n        \"&lsim;\": \"\\u2272\",\n        \"&lsime;\": \"\\u2A8D\",\n        \"&lsimg;\": \"\\u2A8F\",\n        \"&lsqb;\": \"\\u005B\",\n        \"&lsquo;\": \"\\u2018\",\n        \"&lsquor;\": \"\\u201A\",\n        \"&lstrok;\": \"\\u0142\",\n        \"&lt\": \"\\u003C\",\n        \"&lt;\": \"\\u003C\",\n        \"&ltcc;\": \"\\u2AA6\",\n        \"&ltcir;\": \"\\u2A79\",\n        \"&ltdot;\": \"\\u22D6\",\n        \"&lthree;\": \"\\u22CB\",\n        \"&ltimes;\": \"\\u22C9\",\n        \"&ltlarr;\": \"\\u2976\",\n        \"&ltquest;\": \"\\u2A7B\",\n        \"&ltrPar;\": \"\\u2996\",\n        \"&ltri;\": \"\\u25C3\",\n        \"&ltrie;\": \"\\u22B4\",\n        \"&ltrif;\": \"\\u25C2\",\n        \"&lurdshar;\": \"\\u294A\",\n        \"&luruhar;\": \"\\u2966\",\n        \"&lvertneqq;\": \"\\u2268\\uFE00\",\n        \"&lvnE;\": \"\\u2268\\uFE00\",\n        \"&mDDot;\": \"\\u223A\",\n        \"&macr\": \"\\u00AF\",\n        \"&macr;\": \"\\u00AF\",\n        \"&male;\": \"\\u2642\",\n        \"&malt;\": \"\\u2720\",\n        \"&maltese;\": \"\\u2720\",\n        \"&map;\": \"\\u21A6\",\n        \"&mapsto;\": \"\\u21A6\",\n        \"&mapstodown;\": \"\\u21A7\",\n        \"&mapstoleft;\": \"\\u21A4\",\n        \"&mapstoup;\": \"\\u21A5\",\n        \"&marker;\": \"\\u25AE\",\n        \"&mcomma;\": \"\\u2A29\",\n        \"&mcy;\": \"\\u043C\",\n        \"&mdash;\": \"\\u2014\",\n        \"&measuredangle;\": \"\\u2221\",\n        \"&mfr;\": \"\\uD835\\uDD2A\",\n        \"&mho;\": \"\\u2127\",\n        \"&micro\": \"\\u00B5\",\n        \"&micro;\": \"\\u00B5\",\n        \"&mid;\": \"\\u2223\",\n        \"&midast;\": \"\\u002A\",\n        \"&midcir;\": \"\\u2AF0\",\n        \"&middot\": \"\\u00B7\",\n        \"&middot;\": \"\\u00B7\",\n        \"&minus;\": \"\\u2212\",\n        \"&minusb;\": \"\\u229F\",\n        \"&minusd;\": \"\\u2238\",\n        \"&minusdu;\": \"\\u2A2A\",\n        \"&mlcp;\": \"\\u2ADB\",\n        \"&mldr;\": \"\\u2026\",\n        \"&mnplus;\": \"\\u2213\",\n        \"&models;\": \"\\u22A7\",\n        \"&mopf;\": \"\\uD835\\uDD5E\",\n        \"&mp;\": \"\\u2213\",\n        \"&mscr;\": \"\\uD835\\uDCC2\",\n        \"&mstpos;\": \"\\u223E\",\n        \"&mu;\": \"\\u03BC\",\n        \"&multimap;\": \"\\u22B8\",\n        \"&mumap;\": \"\\u22B8\",\n        \"&nGg;\": \"\\u22D9\\u0338\",\n        \"&nGt;\": \"\\u226B\\u20D2\",\n        \"&nGtv;\": \"\\u226B\\u0338\",\n        \"&nLeftarrow;\": \"\\u21CD\",\n        \"&nLeftrightarrow;\": \"\\u21CE\",\n        \"&nLl;\": \"\\u22D8\\u0338\",\n        \"&nLt;\": \"\\u226A\\u20D2\",\n        \"&nLtv;\": \"\\u226A\\u0338\",\n        \"&nRightarrow;\": \"\\u21CF\",\n        \"&nVDash;\": \"\\u22AF\",\n        \"&nVdash;\": \"\\u22AE\",\n        \"&nabla;\": \"\\u2207\",\n        \"&nacute;\": \"\\u0144\",\n        \"&nang;\": \"\\u2220\\u20D2\",\n        \"&nap;\": \"\\u2249\",\n        \"&napE;\": \"\\u2A70\\u0338\",\n        \"&napid;\": \"\\u224B\\u0338\",\n        \"&napos;\": \"\\u0149\",\n        \"&napprox;\": \"\\u2249\",\n        \"&natur;\": \"\\u266E\",\n        \"&natural;\": \"\\u266E\",\n        \"&naturals;\": \"\\u2115\",\n        \"&nbsp\": \"\\u00A0\",\n        \"&nbsp;\": \"\\u00A0\",\n        \"&nbump;\": \"\\u224E\\u0338\",\n        \"&nbumpe;\": \"\\u224F\\u0338\",\n        \"&ncap;\": \"\\u2A43\",\n        \"&ncaron;\": \"\\u0148\",\n        \"&ncedil;\": \"\\u0146\",\n        \"&ncong;\": \"\\u2247\",\n        \"&ncongdot;\": \"\\u2A6D\\u0338\",\n        \"&ncup;\": \"\\u2A42\",\n        \"&ncy;\": \"\\u043D\",\n        \"&ndash;\": \"\\u2013\",\n        \"&ne;\": \"\\u2260\",\n        \"&neArr;\": \"\\u21D7\",\n        \"&nearhk;\": \"\\u2924\",\n        \"&nearr;\": \"\\u2197\",\n        \"&nearrow;\": \"\\u2197\",\n        \"&nedot;\": \"\\u2250\\u0338\",\n        \"&nequiv;\": \"\\u2262\",\n        \"&nesear;\": \"\\u2928\",\n        \"&nesim;\": \"\\u2242\\u0338\",\n        \"&nexist;\": \"\\u2204\",\n        \"&nexists;\": \"\\u2204\",\n        \"&nfr;\": \"\\uD835\\uDD2B\",\n        \"&ngE;\": \"\\u2267\\u0338\",\n        \"&nge;\": \"\\u2271\",\n        \"&ngeq;\": \"\\u2271\",\n        \"&ngeqq;\": \"\\u2267\\u0338\",\n        \"&ngeqslant;\": \"\\u2A7E\\u0338\",\n        \"&nges;\": \"\\u2A7E\\u0338\",\n        \"&ngsim;\": \"\\u2275\",\n        \"&ngt;\": \"\\u226F\",\n        \"&ngtr;\": \"\\u226F\",\n        \"&nhArr;\": \"\\u21CE\",\n        \"&nharr;\": \"\\u21AE\",\n        \"&nhpar;\": \"\\u2AF2\",\n        \"&ni;\": \"\\u220B\",\n        \"&nis;\": \"\\u22FC\",\n        \"&nisd;\": \"\\u22FA\",\n        \"&niv;\": \"\\u220B\",\n        \"&njcy;\": \"\\u045A\",\n        \"&nlArr;\": \"\\u21CD\",\n        \"&nlE;\": \"\\u2266\\u0338\",\n        \"&nlarr;\": \"\\u219A\",\n        \"&nldr;\": \"\\u2025\",\n        \"&nle;\": \"\\u2270\",\n        \"&nleftarrow;\": \"\\u219A\",\n        \"&nleftrightarrow;\": \"\\u21AE\",\n        \"&nleq;\": \"\\u2270\",\n        \"&nleqq;\": \"\\u2266\\u0338\",\n        \"&nleqslant;\": \"\\u2A7D\\u0338\",\n        \"&nles;\": \"\\u2A7D\\u0338\",\n        \"&nless;\": \"\\u226E\",\n        \"&nlsim;\": \"\\u2274\",\n        \"&nlt;\": \"\\u226E\",\n        \"&nltri;\": \"\\u22EA\",\n        \"&nltrie;\": \"\\u22EC\",\n        \"&nmid;\": \"\\u2224\",\n        \"&nopf;\": \"\\uD835\\uDD5F\",\n        \"&not\": \"\\u00AC\",\n        \"&not;\": \"\\u00AC\",\n        \"&notin;\": \"\\u2209\",\n        \"&notinE;\": \"\\u22F9\\u0338\",\n        \"&notindot;\": \"\\u22F5\\u0338\",\n        \"&notinva;\": \"\\u2209\",\n        \"&notinvb;\": \"\\u22F7\",\n        \"&notinvc;\": \"\\u22F6\",\n        \"&notni;\": \"\\u220C\",\n        \"&notniva;\": \"\\u220C\",\n        \"&notnivb;\": \"\\u22FE\",\n        \"&notnivc;\": \"\\u22FD\",\n        \"&npar;\": \"\\u2226\",\n        \"&nparallel;\": \"\\u2226\",\n        \"&nparsl;\": \"\\u2AFD\\u20E5\",\n        \"&npart;\": \"\\u2202\\u0338\",\n        \"&npolint;\": \"\\u2A14\",\n        \"&npr;\": \"\\u2280\",\n        \"&nprcue;\": \"\\u22E0\",\n        \"&npre;\": \"\\u2AAF\\u0338\",\n        \"&nprec;\": \"\\u2280\",\n        \"&npreceq;\": \"\\u2AAF\\u0338\",\n        \"&nrArr;\": \"\\u21CF\",\n        \"&nrarr;\": \"\\u219B\",\n        \"&nrarrc;\": \"\\u2933\\u0338\",\n        \"&nrarrw;\": \"\\u219D\\u0338\",\n        \"&nrightarrow;\": \"\\u219B\",\n        \"&nrtri;\": \"\\u22EB\",\n        \"&nrtrie;\": \"\\u22ED\",\n        \"&nsc;\": \"\\u2281\",\n        \"&nsccue;\": \"\\u22E1\",\n        \"&nsce;\": \"\\u2AB0\\u0338\",\n        \"&nscr;\": \"\\uD835\\uDCC3\",\n        \"&nshortmid;\": \"\\u2224\",\n        \"&nshortparallel;\": \"\\u2226\",\n        \"&nsim;\": \"\\u2241\",\n        \"&nsime;\": \"\\u2244\",\n        \"&nsimeq;\": \"\\u2244\",\n        \"&nsmid;\": \"\\u2224\",\n        \"&nspar;\": \"\\u2226\",\n        \"&nsqsube;\": \"\\u22E2\",\n        \"&nsqsupe;\": \"\\u22E3\",\n        \"&nsub;\": \"\\u2284\",\n        \"&nsubE;\": \"\\u2AC5\\u0338\",\n        \"&nsube;\": \"\\u2288\",\n        \"&nsubset;\": \"\\u2282\\u20D2\",\n        \"&nsubseteq;\": \"\\u2288\",\n        \"&nsubseteqq;\": \"\\u2AC5\\u0338\",\n        \"&nsucc;\": \"\\u2281\",\n        \"&nsucceq;\": \"\\u2AB0\\u0338\",\n        \"&nsup;\": \"\\u2285\",\n        \"&nsupE;\": \"\\u2AC6\\u0338\",\n        \"&nsupe;\": \"\\u2289\",\n        \"&nsupset;\": \"\\u2283\\u20D2\",\n        \"&nsupseteq;\": \"\\u2289\",\n        \"&nsupseteqq;\": \"\\u2AC6\\u0338\",\n        \"&ntgl;\": \"\\u2279\",\n        \"&ntilde\": \"\\u00F1\",\n        \"&ntilde;\": \"\\u00F1\",\n        \"&ntlg;\": \"\\u2278\",\n        \"&ntriangleleft;\": \"\\u22EA\",\n        \"&ntrianglelefteq;\": \"\\u22EC\",\n        \"&ntriangleright;\": \"\\u22EB\",\n        \"&ntrianglerighteq;\": \"\\u22ED\",\n        \"&nu;\": \"\\u03BD\",\n        \"&num;\": \"\\u0023\",\n        \"&numero;\": \"\\u2116\",\n        \"&numsp;\": \"\\u2007\",\n        \"&nvDash;\": \"\\u22AD\",\n        \"&nvHarr;\": \"\\u2904\",\n        \"&nvap;\": \"\\u224D\\u20D2\",\n        \"&nvdash;\": \"\\u22AC\",\n        \"&nvge;\": \"\\u2265\\u20D2\",\n        \"&nvgt;\": \"\\u003E\\u20D2\",\n        \"&nvinfin;\": \"\\u29DE\",\n        \"&nvlArr;\": \"\\u2902\",\n        \"&nvle;\": \"\\u2264\\u20D2\",\n        \"&nvlt;\": \"\\u003C\\u20D2\",\n        \"&nvltrie;\": \"\\u22B4\\u20D2\",\n        \"&nvrArr;\": \"\\u2903\",\n        \"&nvrtrie;\": \"\\u22B5\\u20D2\",\n        \"&nvsim;\": \"\\u223C\\u20D2\",\n        \"&nwArr;\": \"\\u21D6\",\n        \"&nwarhk;\": \"\\u2923\",\n        \"&nwarr;\": \"\\u2196\",\n        \"&nwarrow;\": \"\\u2196\",\n        \"&nwnear;\": \"\\u2927\",\n        \"&oS;\": \"\\u24C8\",\n        \"&oacute\": \"\\u00F3\",\n        \"&oacute;\": \"\\u00F3\",\n        \"&oast;\": \"\\u229B\",\n        \"&ocir;\": \"\\u229A\",\n        \"&ocirc\": \"\\u00F4\",\n        \"&ocirc;\": \"\\u00F4\",\n        \"&ocy;\": \"\\u043E\",\n        \"&odash;\": \"\\u229D\",\n        \"&odblac;\": \"\\u0151\",\n        \"&odiv;\": \"\\u2A38\",\n        \"&odot;\": \"\\u2299\",\n        \"&odsold;\": \"\\u29BC\",\n        \"&oelig;\": \"\\u0153\",\n        \"&ofcir;\": \"\\u29BF\",\n        \"&ofr;\": \"\\uD835\\uDD2C\",\n        \"&ogon;\": \"\\u02DB\",\n        \"&ograve\": \"\\u00F2\",\n        \"&ograve;\": \"\\u00F2\",\n        \"&ogt;\": \"\\u29C1\",\n        \"&ohbar;\": \"\\u29B5\",\n        \"&ohm;\": \"\\u03A9\",\n        \"&oint;\": \"\\u222E\",\n        \"&olarr;\": \"\\u21BA\",\n        \"&olcir;\": \"\\u29BE\",\n        \"&olcross;\": \"\\u29BB\",\n        \"&oline;\": \"\\u203E\",\n        \"&olt;\": \"\\u29C0\",\n        \"&omacr;\": \"\\u014D\",\n        \"&omega;\": \"\\u03C9\",\n        \"&omicron;\": \"\\u03BF\",\n        \"&omid;\": \"\\u29B6\",\n        \"&ominus;\": \"\\u2296\",\n        \"&oopf;\": \"\\uD835\\uDD60\",\n        \"&opar;\": \"\\u29B7\",\n        \"&operp;\": \"\\u29B9\",\n        \"&oplus;\": \"\\u2295\",\n        \"&or;\": \"\\u2228\",\n        \"&orarr;\": \"\\u21BB\",\n        \"&ord;\": \"\\u2A5D\",\n        \"&order;\": \"\\u2134\",\n        \"&orderof;\": \"\\u2134\",\n        \"&ordf\": \"\\u00AA\",\n        \"&ordf;\": \"\\u00AA\",\n        \"&ordm\": \"\\u00BA\",\n        \"&ordm;\": \"\\u00BA\",\n        \"&origof;\": \"\\u22B6\",\n        \"&oror;\": \"\\u2A56\",\n        \"&orslope;\": \"\\u2A57\",\n        \"&orv;\": \"\\u2A5B\",\n        \"&oscr;\": \"\\u2134\",\n        \"&oslash\": \"\\u00F8\",\n        \"&oslash;\": \"\\u00F8\",\n        \"&osol;\": \"\\u2298\",\n        \"&otilde\": \"\\u00F5\",\n        \"&otilde;\": \"\\u00F5\",\n        \"&otimes;\": \"\\u2297\",\n        \"&otimesas;\": \"\\u2A36\",\n        \"&ouml\": \"\\u00F6\",\n        \"&ouml;\": \"\\u00F6\",\n        \"&ovbar;\": \"\\u233D\",\n        \"&par;\": \"\\u2225\",\n        \"&para\": \"\\u00B6\",\n        \"&para;\": \"\\u00B6\",\n        \"&parallel;\": \"\\u2225\",\n        \"&parsim;\": \"\\u2AF3\",\n        \"&parsl;\": \"\\u2AFD\",\n        \"&part;\": \"\\u2202\",\n        \"&pcy;\": \"\\u043F\",\n        \"&percnt;\": \"\\u0025\",\n        \"&period;\": \"\\u002E\",\n        \"&permil;\": \"\\u2030\",\n        \"&perp;\": \"\\u22A5\",\n        \"&pertenk;\": \"\\u2031\",\n        \"&pfr;\": \"\\uD835\\uDD2D\",\n        \"&phi;\": \"\\u03C6\",\n        \"&phiv;\": \"\\u03D5\",\n        \"&phmmat;\": \"\\u2133\",\n        \"&phone;\": \"\\u260E\",\n        \"&pi;\": \"\\u03C0\",\n        \"&pitchfork;\": \"\\u22D4\",\n        \"&piv;\": \"\\u03D6\",\n        \"&planck;\": \"\\u210F\",\n        \"&planckh;\": \"\\u210E\",\n        \"&plankv;\": \"\\u210F\",\n        \"&plus;\": \"\\u002B\",\n        \"&plusacir;\": \"\\u2A23\",\n        \"&plusb;\": \"\\u229E\",\n        \"&pluscir;\": \"\\u2A22\",\n        \"&plusdo;\": \"\\u2214\",\n        \"&plusdu;\": \"\\u2A25\",\n        \"&pluse;\": \"\\u2A72\",\n        \"&plusmn\": \"\\u00B1\",\n        \"&plusmn;\": \"\\u00B1\",\n        \"&plussim;\": \"\\u2A26\",\n        \"&plustwo;\": \"\\u2A27\",\n        \"&pm;\": \"\\u00B1\",\n        \"&pointint;\": \"\\u2A15\",\n        \"&popf;\": \"\\uD835\\uDD61\",\n        \"&pound\": \"\\u00A3\",\n        \"&pound;\": \"\\u00A3\",\n        \"&pr;\": \"\\u227A\",\n        \"&prE;\": \"\\u2AB3\",\n        \"&prap;\": \"\\u2AB7\",\n        \"&prcue;\": \"\\u227C\",\n        \"&pre;\": \"\\u2AAF\",\n        \"&prec;\": \"\\u227A\",\n        \"&precapprox;\": \"\\u2AB7\",\n        \"&preccurlyeq;\": \"\\u227C\",\n        \"&preceq;\": \"\\u2AAF\",\n        \"&precnapprox;\": \"\\u2AB9\",\n        \"&precneqq;\": \"\\u2AB5\",\n        \"&precnsim;\": \"\\u22E8\",\n        \"&precsim;\": \"\\u227E\",\n        \"&prime;\": \"\\u2032\",\n        \"&primes;\": \"\\u2119\",\n        \"&prnE;\": \"\\u2AB5\",\n        \"&prnap;\": \"\\u2AB9\",\n        \"&prnsim;\": \"\\u22E8\",\n        \"&prod;\": \"\\u220F\",\n        \"&profalar;\": \"\\u232E\",\n        \"&profline;\": \"\\u2312\",\n        \"&profsurf;\": \"\\u2313\",\n        \"&prop;\": \"\\u221D\",\n        \"&propto;\": \"\\u221D\",\n        \"&prsim;\": \"\\u227E\",\n        \"&prurel;\": \"\\u22B0\",\n        \"&pscr;\": \"\\uD835\\uDCC5\",\n        \"&psi;\": \"\\u03C8\",\n        \"&puncsp;\": \"\\u2008\",\n        \"&qfr;\": \"\\uD835\\uDD2E\",\n        \"&qint;\": \"\\u2A0C\",\n        \"&qopf;\": \"\\uD835\\uDD62\",\n        \"&qprime;\": \"\\u2057\",\n        \"&qscr;\": \"\\uD835\\uDCC6\",\n        \"&quaternions;\": \"\\u210D\",\n        \"&quatint;\": \"\\u2A16\",\n        \"&quest;\": \"\\u003F\",\n        \"&questeq;\": \"\\u225F\",\n        \"&quot\": \"\\u0022\",\n        \"&quot;\": \"\\u0022\",\n        \"&rAarr;\": \"\\u21DB\",\n        \"&rArr;\": \"\\u21D2\",\n        \"&rAtail;\": \"\\u291C\",\n        \"&rBarr;\": \"\\u290F\",\n        \"&rHar;\": \"\\u2964\",\n        \"&race;\": \"\\u223D\\u0331\",\n        \"&racute;\": \"\\u0155\",\n        \"&radic;\": \"\\u221A\",\n        \"&raemptyv;\": \"\\u29B3\",\n        \"&rang;\": \"\\u27E9\",\n        \"&rangd;\": \"\\u2992\",\n        \"&range;\": \"\\u29A5\",\n        \"&rangle;\": \"\\u27E9\",\n        \"&raquo\": \"\\u00BB\",\n        \"&raquo;\": \"\\u00BB\",\n        \"&rarr;\": \"\\u2192\",\n        \"&rarrap;\": \"\\u2975\",\n        \"&rarrb;\": \"\\u21E5\",\n        \"&rarrbfs;\": \"\\u2920\",\n        \"&rarrc;\": \"\\u2933\",\n        \"&rarrfs;\": \"\\u291E\",\n        \"&rarrhk;\": \"\\u21AA\",\n        \"&rarrlp;\": \"\\u21AC\",\n        \"&rarrpl;\": \"\\u2945\",\n        \"&rarrsim;\": \"\\u2974\",\n        \"&rarrtl;\": \"\\u21A3\",\n        \"&rarrw;\": \"\\u219D\",\n        \"&ratail;\": \"\\u291A\",\n        \"&ratio;\": \"\\u2236\",\n        \"&rationals;\": \"\\u211A\",\n        \"&rbarr;\": \"\\u290D\",\n        \"&rbbrk;\": \"\\u2773\",\n        \"&rbrace;\": \"\\u007D\",\n        \"&rbrack;\": \"\\u005D\",\n        \"&rbrke;\": \"\\u298C\",\n        \"&rbrksld;\": \"\\u298E\",\n        \"&rbrkslu;\": \"\\u2990\",\n        \"&rcaron;\": \"\\u0159\",\n        \"&rcedil;\": \"\\u0157\",\n        \"&rceil;\": \"\\u2309\",\n        \"&rcub;\": \"\\u007D\",\n        \"&rcy;\": \"\\u0440\",\n        \"&rdca;\": \"\\u2937\",\n        \"&rdldhar;\": \"\\u2969\",\n        \"&rdquo;\": \"\\u201D\",\n        \"&rdquor;\": \"\\u201D\",\n        \"&rdsh;\": \"\\u21B3\",\n        \"&real;\": \"\\u211C\",\n        \"&realine;\": \"\\u211B\",\n        \"&realpart;\": \"\\u211C\",\n        \"&reals;\": \"\\u211D\",\n        \"&rect;\": \"\\u25AD\",\n        \"&reg\": \"\\u00AE\",\n        \"&reg;\": \"\\u00AE\",\n        \"&rfisht;\": \"\\u297D\",\n        \"&rfloor;\": \"\\u230B\",\n        \"&rfr;\": \"\\uD835\\uDD2F\",\n        \"&rhard;\": \"\\u21C1\",\n        \"&rharu;\": \"\\u21C0\",\n        \"&rharul;\": \"\\u296C\",\n        \"&rho;\": \"\\u03C1\",\n        \"&rhov;\": \"\\u03F1\",\n        \"&rightarrow;\": \"\\u2192\",\n        \"&rightarrowtail;\": \"\\u21A3\",\n        \"&rightharpoondown;\": \"\\u21C1\",\n        \"&rightharpoonup;\": \"\\u21C0\",\n        \"&rightleftarrows;\": \"\\u21C4\",\n        \"&rightleftharpoons;\": \"\\u21CC\",\n        \"&rightrightarrows;\": \"\\u21C9\",\n        \"&rightsquigarrow;\": \"\\u219D\",\n        \"&rightthreetimes;\": \"\\u22CC\",\n        \"&ring;\": \"\\u02DA\",\n        \"&risingdotseq;\": \"\\u2253\",\n        \"&rlarr;\": \"\\u21C4\",\n        \"&rlhar;\": \"\\u21CC\",\n        \"&rlm;\": \"\\u200F\",\n        \"&rmoust;\": \"\\u23B1\",\n        \"&rmoustache;\": \"\\u23B1\",\n        \"&rnmid;\": \"\\u2AEE\",\n        \"&roang;\": \"\\u27ED\",\n        \"&roarr;\": \"\\u21FE\",\n        \"&robrk;\": \"\\u27E7\",\n        \"&ropar;\": \"\\u2986\",\n        \"&ropf;\": \"\\uD835\\uDD63\",\n        \"&roplus;\": \"\\u2A2E\",\n        \"&rotimes;\": \"\\u2A35\",\n        \"&rpar;\": \"\\u0029\",\n        \"&rpargt;\": \"\\u2994\",\n        \"&rppolint;\": \"\\u2A12\",\n        \"&rrarr;\": \"\\u21C9\",\n        \"&rsaquo;\": \"\\u203A\",\n        \"&rscr;\": \"\\uD835\\uDCC7\",\n        \"&rsh;\": \"\\u21B1\",\n        \"&rsqb;\": \"\\u005D\",\n        \"&rsquo;\": \"\\u2019\",\n        \"&rsquor;\": \"\\u2019\",\n        \"&rthree;\": \"\\u22CC\",\n        \"&rtimes;\": \"\\u22CA\",\n        \"&rtri;\": \"\\u25B9\",\n        \"&rtrie;\": \"\\u22B5\",\n        \"&rtrif;\": \"\\u25B8\",\n        \"&rtriltri;\": \"\\u29CE\",\n        \"&ruluhar;\": \"\\u2968\",\n        \"&rx;\": \"\\u211E\",\n        \"&sacute;\": \"\\u015B\",\n        \"&sbquo;\": \"\\u201A\",\n        \"&sc;\": \"\\u227B\",\n        \"&scE;\": \"\\u2AB4\",\n        \"&scap;\": \"\\u2AB8\",\n        \"&scaron;\": \"\\u0161\",\n        \"&sccue;\": \"\\u227D\",\n        \"&sce;\": \"\\u2AB0\",\n        \"&scedil;\": \"\\u015F\",\n        \"&scirc;\": \"\\u015D\",\n        \"&scnE;\": \"\\u2AB6\",\n        \"&scnap;\": \"\\u2ABA\",\n        \"&scnsim;\": \"\\u22E9\",\n        \"&scpolint;\": \"\\u2A13\",\n        \"&scsim;\": \"\\u227F\",\n        \"&scy;\": \"\\u0441\",\n        \"&sdot;\": \"\\u22C5\",\n        \"&sdotb;\": \"\\u22A1\",\n        \"&sdote;\": \"\\u2A66\",\n        \"&seArr;\": \"\\u21D8\",\n        \"&searhk;\": \"\\u2925\",\n        \"&searr;\": \"\\u2198\",\n        \"&searrow;\": \"\\u2198\",\n        \"&sect\": \"\\u00A7\",\n        \"&sect;\": \"\\u00A7\",\n        \"&semi;\": \"\\u003B\",\n        \"&seswar;\": \"\\u2929\",\n        \"&setminus;\": \"\\u2216\",\n        \"&setmn;\": \"\\u2216\",\n        \"&sext;\": \"\\u2736\",\n        \"&sfr;\": \"\\uD835\\uDD30\",\n        \"&sfrown;\": \"\\u2322\",\n        \"&sharp;\": \"\\u266F\",\n        \"&shchcy;\": \"\\u0449\",\n        \"&shcy;\": \"\\u0448\",\n        \"&shortmid;\": \"\\u2223\",\n        \"&shortparallel;\": \"\\u2225\",\n        \"&shy\": \"\\u00AD\",\n        \"&shy;\": \"\\u00AD\",\n        \"&sigma;\": \"\\u03C3\",\n        \"&sigmaf;\": \"\\u03C2\",\n        \"&sigmav;\": \"\\u03C2\",\n        \"&sim;\": \"\\u223C\",\n        \"&simdot;\": \"\\u2A6A\",\n        \"&sime;\": \"\\u2243\",\n        \"&simeq;\": \"\\u2243\",\n        \"&simg;\": \"\\u2A9E\",\n        \"&simgE;\": \"\\u2AA0\",\n        \"&siml;\": \"\\u2A9D\",\n        \"&simlE;\": \"\\u2A9F\",\n        \"&simne;\": \"\\u2246\",\n        \"&simplus;\": \"\\u2A24\",\n        \"&simrarr;\": \"\\u2972\",\n        \"&slarr;\": \"\\u2190\",\n        \"&smallsetminus;\": \"\\u2216\",\n        \"&smashp;\": \"\\u2A33\",\n        \"&smeparsl;\": \"\\u29E4\",\n        \"&smid;\": \"\\u2223\",\n        \"&smile;\": \"\\u2323\",\n        \"&smt;\": \"\\u2AAA\",\n        \"&smte;\": \"\\u2AAC\",\n        \"&smtes;\": \"\\u2AAC\\uFE00\",\n        \"&softcy;\": \"\\u044C\",\n        \"&sol;\": \"\\u002F\",\n        \"&solb;\": \"\\u29C4\",\n        \"&solbar;\": \"\\u233F\",\n        \"&sopf;\": \"\\uD835\\uDD64\",\n        \"&spades;\": \"\\u2660\",\n        \"&spadesuit;\": \"\\u2660\",\n        \"&spar;\": \"\\u2225\",\n        \"&sqcap;\": \"\\u2293\",\n        \"&sqcaps;\": \"\\u2293\\uFE00\",\n        \"&sqcup;\": \"\\u2294\",\n        \"&sqcups;\": \"\\u2294\\uFE00\",\n        \"&sqsub;\": \"\\u228F\",\n        \"&sqsube;\": \"\\u2291\",\n        \"&sqsubset;\": \"\\u228F\",\n        \"&sqsubseteq;\": \"\\u2291\",\n        \"&sqsup;\": \"\\u2290\",\n        \"&sqsupe;\": \"\\u2292\",\n        \"&sqsupset;\": \"\\u2290\",\n        \"&sqsupseteq;\": \"\\u2292\",\n        \"&squ;\": \"\\u25A1\",\n        \"&square;\": \"\\u25A1\",\n        \"&squarf;\": \"\\u25AA\",\n        \"&squf;\": \"\\u25AA\",\n        \"&srarr;\": \"\\u2192\",\n        \"&sscr;\": \"\\uD835\\uDCC8\",\n        \"&ssetmn;\": \"\\u2216\",\n        \"&ssmile;\": \"\\u2323\",\n        \"&sstarf;\": \"\\u22C6\",\n        \"&star;\": \"\\u2606\",\n        \"&starf;\": \"\\u2605\",\n        \"&straightepsilon;\": \"\\u03F5\",\n        \"&straightphi;\": \"\\u03D5\",\n        \"&strns;\": \"\\u00AF\",\n        \"&sub;\": \"\\u2282\",\n        \"&subE;\": \"\\u2AC5\",\n        \"&subdot;\": \"\\u2ABD\",\n        \"&sube;\": \"\\u2286\",\n        \"&subedot;\": \"\\u2AC3\",\n        \"&submult;\": \"\\u2AC1\",\n        \"&subnE;\": \"\\u2ACB\",\n        \"&subne;\": \"\\u228A\",\n        \"&subplus;\": \"\\u2ABF\",\n        \"&subrarr;\": \"\\u2979\",\n        \"&subset;\": \"\\u2282\",\n        \"&subseteq;\": \"\\u2286\",\n        \"&subseteqq;\": \"\\u2AC5\",\n        \"&subsetneq;\": \"\\u228A\",\n        \"&subsetneqq;\": \"\\u2ACB\",\n        \"&subsim;\": \"\\u2AC7\",\n        \"&subsub;\": \"\\u2AD5\",\n        \"&subsup;\": \"\\u2AD3\",\n        \"&succ;\": \"\\u227B\",\n        \"&succapprox;\": \"\\u2AB8\",\n        \"&succcurlyeq;\": \"\\u227D\",\n        \"&succeq;\": \"\\u2AB0\",\n        \"&succnapprox;\": \"\\u2ABA\",\n        \"&succneqq;\": \"\\u2AB6\",\n        \"&succnsim;\": \"\\u22E9\",\n        \"&succsim;\": \"\\u227F\",\n        \"&sum;\": \"\\u2211\",\n        \"&sung;\": \"\\u266A\",\n        \"&sup1\": \"\\u00B9\",\n        \"&sup1;\": \"\\u00B9\",\n        \"&sup2\": \"\\u00B2\",\n        \"&sup2;\": \"\\u00B2\",\n        \"&sup3\": \"\\u00B3\",\n        \"&sup3;\": \"\\u00B3\",\n        \"&sup;\": \"\\u2283\",\n        \"&supE;\": \"\\u2AC6\",\n        \"&supdot;\": \"\\u2ABE\",\n        \"&supdsub;\": \"\\u2AD8\",\n        \"&supe;\": \"\\u2287\",\n        \"&supedot;\": \"\\u2AC4\",\n        \"&suphsol;\": \"\\u27C9\",\n        \"&suphsub;\": \"\\u2AD7\",\n        \"&suplarr;\": \"\\u297B\",\n        \"&supmult;\": \"\\u2AC2\",\n        \"&supnE;\": \"\\u2ACC\",\n        \"&supne;\": \"\\u228B\",\n        \"&supplus;\": \"\\u2AC0\",\n        \"&supset;\": \"\\u2283\",\n        \"&supseteq;\": \"\\u2287\",\n        \"&supseteqq;\": \"\\u2AC6\",\n        \"&supsetneq;\": \"\\u228B\",\n        \"&supsetneqq;\": \"\\u2ACC\",\n        \"&supsim;\": \"\\u2AC8\",\n        \"&supsub;\": \"\\u2AD4\",\n        \"&supsup;\": \"\\u2AD6\",\n        \"&swArr;\": \"\\u21D9\",\n        \"&swarhk;\": \"\\u2926\",\n        \"&swarr;\": \"\\u2199\",\n        \"&swarrow;\": \"\\u2199\",\n        \"&swnwar;\": \"\\u292A\",\n        \"&szlig\": \"\\u00DF\",\n        \"&szlig;\": \"\\u00DF\",\n        \"&target;\": \"\\u2316\",\n        \"&tau;\": \"\\u03C4\",\n        \"&tbrk;\": \"\\u23B4\",\n        \"&tcaron;\": \"\\u0165\",\n        \"&tcedil;\": \"\\u0163\",\n        \"&tcy;\": \"\\u0442\",\n        \"&tdot;\": \"\\u20DB\",\n        \"&telrec;\": \"\\u2315\",\n        \"&tfr;\": \"\\uD835\\uDD31\",\n        \"&there4;\": \"\\u2234\",\n        \"&therefore;\": \"\\u2234\",\n        \"&theta;\": \"\\u03B8\",\n        \"&thetasym;\": \"\\u03D1\",\n        \"&thetav;\": \"\\u03D1\",\n        \"&thickapprox;\": \"\\u2248\",\n        \"&thicksim;\": \"\\u223C\",\n        \"&thinsp;\": \"\\u2009\",\n        \"&thkap;\": \"\\u2248\",\n        \"&thksim;\": \"\\u223C\",\n        \"&thorn\": \"\\u00FE\",\n        \"&thorn;\": \"\\u00FE\",\n        \"&tilde;\": \"\\u02DC\",\n        \"&times\": \"\\u00D7\",\n        \"&times;\": \"\\u00D7\",\n        \"&timesb;\": \"\\u22A0\",\n        \"&timesbar;\": \"\\u2A31\",\n        \"&timesd;\": \"\\u2A30\",\n        \"&tint;\": \"\\u222D\",\n        \"&toea;\": \"\\u2928\",\n        \"&top;\": \"\\u22A4\",\n        \"&topbot;\": \"\\u2336\",\n        \"&topcir;\": \"\\u2AF1\",\n        \"&topf;\": \"\\uD835\\uDD65\",\n        \"&topfork;\": \"\\u2ADA\",\n        \"&tosa;\": \"\\u2929\",\n        \"&tprime;\": \"\\u2034\",\n        \"&trade;\": \"\\u2122\",\n        \"&triangle;\": \"\\u25B5\",\n        \"&triangledown;\": \"\\u25BF\",\n        \"&triangleleft;\": \"\\u25C3\",\n        \"&trianglelefteq;\": \"\\u22B4\",\n        \"&triangleq;\": \"\\u225C\",\n        \"&triangleright;\": \"\\u25B9\",\n        \"&trianglerighteq;\": \"\\u22B5\",\n        \"&tridot;\": \"\\u25EC\",\n        \"&trie;\": \"\\u225C\",\n        \"&triminus;\": \"\\u2A3A\",\n        \"&triplus;\": \"\\u2A39\",\n        \"&trisb;\": \"\\u29CD\",\n        \"&tritime;\": \"\\u2A3B\",\n        \"&trpezium;\": \"\\u23E2\",\n        \"&tscr;\": \"\\uD835\\uDCC9\",\n        \"&tscy;\": \"\\u0446\",\n        \"&tshcy;\": \"\\u045B\",\n        \"&tstrok;\": \"\\u0167\",\n        \"&twixt;\": \"\\u226C\",\n        \"&twoheadleftarrow;\": \"\\u219E\",\n        \"&twoheadrightarrow;\": \"\\u21A0\",\n        \"&uArr;\": \"\\u21D1\",\n        \"&uHar;\": \"\\u2963\",\n        \"&uacute\": \"\\u00FA\",\n        \"&uacute;\": \"\\u00FA\",\n        \"&uarr;\": \"\\u2191\",\n        \"&ubrcy;\": \"\\u045E\",\n        \"&ubreve;\": \"\\u016D\",\n        \"&ucirc\": \"\\u00FB\",\n        \"&ucirc;\": \"\\u00FB\",\n        \"&ucy;\": \"\\u0443\",\n        \"&udarr;\": \"\\u21C5\",\n        \"&udblac;\": \"\\u0171\",\n        \"&udhar;\": \"\\u296E\",\n        \"&ufisht;\": \"\\u297E\",\n        \"&ufr;\": \"\\uD835\\uDD32\",\n        \"&ugrave\": \"\\u00F9\",\n        \"&ugrave;\": \"\\u00F9\",\n        \"&uharl;\": \"\\u21BF\",\n        \"&uharr;\": \"\\u21BE\",\n        \"&uhblk;\": \"\\u2580\",\n        \"&ulcorn;\": \"\\u231C\",\n        \"&ulcorner;\": \"\\u231C\",\n        \"&ulcrop;\": \"\\u230F\",\n        \"&ultri;\": \"\\u25F8\",\n        \"&umacr;\": \"\\u016B\",\n        \"&uml\": \"\\u00A8\",\n        \"&uml;\": \"\\u00A8\",\n        \"&uogon;\": \"\\u0173\",\n        \"&uopf;\": \"\\uD835\\uDD66\",\n        \"&uparrow;\": \"\\u2191\",\n        \"&updownarrow;\": \"\\u2195\",\n        \"&upharpoonleft;\": \"\\u21BF\",\n        \"&upharpoonright;\": \"\\u21BE\",\n        \"&uplus;\": \"\\u228E\",\n        \"&upsi;\": \"\\u03C5\",\n        \"&upsih;\": \"\\u03D2\",\n        \"&upsilon;\": \"\\u03C5\",\n        \"&upuparrows;\": \"\\u21C8\",\n        \"&urcorn;\": \"\\u231D\",\n        \"&urcorner;\": \"\\u231D\",\n        \"&urcrop;\": \"\\u230E\",\n        \"&uring;\": \"\\u016F\",\n        \"&urtri;\": \"\\u25F9\",\n        \"&uscr;\": \"\\uD835\\uDCCA\",\n        \"&utdot;\": \"\\u22F0\",\n        \"&utilde;\": \"\\u0169\",\n        \"&utri;\": \"\\u25B5\",\n        \"&utrif;\": \"\\u25B4\",\n        \"&uuarr;\": \"\\u21C8\",\n        \"&uuml\": \"\\u00FC\",\n        \"&uuml;\": \"\\u00FC\",\n        \"&uwangle;\": \"\\u29A7\",\n        \"&vArr;\": \"\\u21D5\",\n        \"&vBar;\": \"\\u2AE8\",\n        \"&vBarv;\": \"\\u2AE9\",\n        \"&vDash;\": \"\\u22A8\",\n        \"&vangrt;\": \"\\u299C\",\n        \"&varepsilon;\": \"\\u03F5\",\n        \"&varkappa;\": \"\\u03F0\",\n        \"&varnothing;\": \"\\u2205\",\n        \"&varphi;\": \"\\u03D5\",\n        \"&varpi;\": \"\\u03D6\",\n        \"&varpropto;\": \"\\u221D\",\n        \"&varr;\": \"\\u2195\",\n        \"&varrho;\": \"\\u03F1\",\n        \"&varsigma;\": \"\\u03C2\",\n        \"&varsubsetneq;\": \"\\u228A\\uFE00\",\n        \"&varsubsetneqq;\": \"\\u2ACB\\uFE00\",\n        \"&varsupsetneq;\": \"\\u228B\\uFE00\",\n        \"&varsupsetneqq;\": \"\\u2ACC\\uFE00\",\n        \"&vartheta;\": \"\\u03D1\",\n        \"&vartriangleleft;\": \"\\u22B2\",\n        \"&vartriangleright;\": \"\\u22B3\",\n        \"&vcy;\": \"\\u0432\",\n        \"&vdash;\": \"\\u22A2\",\n        \"&vee;\": \"\\u2228\",\n        \"&veebar;\": \"\\u22BB\",\n        \"&veeeq;\": \"\\u225A\",\n        \"&vellip;\": \"\\u22EE\",\n        \"&verbar;\": \"\\u007C\",\n        \"&vert;\": \"\\u007C\",\n        \"&vfr;\": \"\\uD835\\uDD33\",\n        \"&vltri;\": \"\\u22B2\",\n        \"&vnsub;\": \"\\u2282\\u20D2\",\n        \"&vnsup;\": \"\\u2283\\u20D2\",\n        \"&vopf;\": \"\\uD835\\uDD67\",\n        \"&vprop;\": \"\\u221D\",\n        \"&vrtri;\": \"\\u22B3\",\n        \"&vscr;\": \"\\uD835\\uDCCB\",\n        \"&vsubnE;\": \"\\u2ACB\\uFE00\",\n        \"&vsubne;\": \"\\u228A\\uFE00\",\n        \"&vsupnE;\": \"\\u2ACC\\uFE00\",\n        \"&vsupne;\": \"\\u228B\\uFE00\",\n        \"&vzigzag;\": \"\\u299A\",\n        \"&wcirc;\": \"\\u0175\",\n        \"&wedbar;\": \"\\u2A5F\",\n        \"&wedge;\": \"\\u2227\",\n        \"&wedgeq;\": \"\\u2259\",\n        \"&weierp;\": \"\\u2118\",\n        \"&wfr;\": \"\\uD835\\uDD34\",\n        \"&wopf;\": \"\\uD835\\uDD68\",\n        \"&wp;\": \"\\u2118\",\n        \"&wr;\": \"\\u2240\",\n        \"&wreath;\": \"\\u2240\",\n        \"&wscr;\": \"\\uD835\\uDCCC\",\n        \"&xcap;\": \"\\u22C2\",\n        \"&xcirc;\": \"\\u25EF\",\n        \"&xcup;\": \"\\u22C3\",\n        \"&xdtri;\": \"\\u25BD\",\n        \"&xfr;\": \"\\uD835\\uDD35\",\n        \"&xhArr;\": \"\\u27FA\",\n        \"&xharr;\": \"\\u27F7\",\n        \"&xi;\": \"\\u03BE\",\n        \"&xlArr;\": \"\\u27F8\",\n        \"&xlarr;\": \"\\u27F5\",\n        \"&xmap;\": \"\\u27FC\",\n        \"&xnis;\": \"\\u22FB\",\n        \"&xodot;\": \"\\u2A00\",\n        \"&xopf;\": \"\\uD835\\uDD69\",\n        \"&xoplus;\": \"\\u2A01\",\n        \"&xotime;\": \"\\u2A02\",\n        \"&xrArr;\": \"\\u27F9\",\n        \"&xrarr;\": \"\\u27F6\",\n        \"&xscr;\": \"\\uD835\\uDCCD\",\n        \"&xsqcup;\": \"\\u2A06\",\n        \"&xuplus;\": \"\\u2A04\",\n        \"&xutri;\": \"\\u25B3\",\n        \"&xvee;\": \"\\u22C1\",\n        \"&xwedge;\": \"\\u22C0\",\n        \"&yacute\": \"\\u00FD\",\n        \"&yacute;\": \"\\u00FD\",\n        \"&yacy;\": \"\\u044F\",\n        \"&ycirc;\": \"\\u0177\",\n        \"&ycy;\": \"\\u044B\",\n        \"&yen\": \"\\u00A5\",\n        \"&yen;\": \"\\u00A5\",\n        \"&yfr;\": \"\\uD835\\uDD36\",\n        \"&yicy;\": \"\\u0457\",\n        \"&yopf;\": \"\\uD835\\uDD6A\",\n        \"&yscr;\": \"\\uD835\\uDCCE\",\n        \"&yucy;\": \"\\u044E\",\n        \"&yuml\": \"\\u00FF\",\n        \"&yuml;\": \"\\u00FF\",\n        \"&zacute;\": \"\\u017A\",\n        \"&zcaron;\": \"\\u017E\",\n        \"&zcy;\": \"\\u0437\",\n        \"&zdot;\": \"\\u017C\",\n        \"&zeetrf;\": \"\\u2128\",\n        \"&zeta;\": \"\\u03B6\",\n        \"&zfr;\": \"\\uD835\\uDD37\",\n        \"&zhcy;\": \"\\u0436\",\n        \"&zigrarr;\": \"\\u21DD\",\n        \"&zopf;\": \"\\uD835\\uDD6B\",\n        \"&zscr;\": \"\\uD835\\uDCCF\",\n        \"&zwj;\": \"\\u200D\",\n        \"&zwnj;\": \"\\u200C\"\n    };\n\n    return {\n        convert: (entity: string): string => {\n\n            if (!/^&.*;$/.test(entity)) {\n\n                // completely invalid entity, return input unchanged\n                return entity;\n\n            } else {\n\n                // try to match decimal code\n                let decCodeMatch = /^&#(\\d+);$/.exec(entity);\n\n                if (decCodeMatch) {\n\n                    return String.fromCodePoint(Number(decCodeMatch[1]));\n\n                } else {\n\n                    let hexCodeMatch = /^&#x([\\da-f]+);/.exec(entity);\n\n                    if (hexCodeMatch) {\n\n                        return String.fromCodePoint(Number('0x' + hexCodeMatch[1]));\n\n                    } else {\n\n                        // return named entity or input unchanged\n                        return namedEntities[entity] ?? entity;\n\n                    }\n\n                }\n\n            }\n\n        }\n    }\n\n})();\n", "\r\n/** A helper converting a number to a roman numeral representation. */\r\nexport const NumberToRomanConverter = (() => {\r\n\r\n    const maxConvertible = 1000 * 1000; // allow a thousand thousands at max (will print around a thousand Ms)\r\n\r\n    const ones = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];\r\n    const tens = ['', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'];\r\n    const hundreds = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'];\r\n\r\n    return {\r\n\r\n        /** The absolute maximum value that this converter can handle. */\r\n        max: maxConvertible,\r\n\r\n        /** Converts the given number to its roman numeral representation. */\r\n        convert: (n: number) => {\r\n\r\n            if (n < 0)\r\n                throw new Error(`Can only convert positive numbers.`);\r\n\r\n            else if (n > maxConvertible)\r\n                throw new Error(`Number ${n} is too big for conversion. Max is ${maxConvertible}.`);\r\n\r\n\r\n            // implementation idea from wikipedia:\r\n            // https://en.wikipedia.org/wiki/Roman_numerals#Standard_form\r\n\r\n            const thousandsCount = Math.floor(n / 1000);\r\n            \r\n            const hundredsCount = Math.floor(n % 1000 / 100);\r\n            const tensCount = Math.floor(n % 100 / 10);\r\n            const onesCount = Math.floor(n % 10);\r\n\r\n            return 'M'.repeat(thousandsCount)\r\n                + hundreds[hundredsCount]\r\n                + tens[tensCount]\r\n                + ones[onesCount];\r\n\r\n        }\r\n\r\n    };\r\n\r\n})();\r\n", "\r\n/** A helper converting a number to its textual representation. */\r\nexport const NumberToTextConverter = (() => {\r\n\r\n    const maxConvertible = 2 ** 31 - 1;\r\n\r\n    // consts for more readable code\r\n    const million = 1_000_000;\r\n    const billion = 1_000_000_000;\r\n\r\n    const zeroToNineteen = [\r\n        'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine',\r\n        'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'\r\n    ];\r\n\r\n    const tens = ['zero', 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];\r\n\r\n    // converts numbers between 0 and 19\r\n    const _convertUnder20 = (n: number) => {\r\n        return zeroToNineteen[n];\r\n    };\r\n\r\n    // converts numbers between 0 and 100\r\n    const _convertUnderHundred = (n: number) => {\r\n\r\n        if (n < 20) {\r\n\r\n            return _convertUnder20(n);\r\n\r\n        } else {\r\n\r\n            let tenCount = Math.floor(n / 10);\r\n            let output = tens[tenCount];\r\n\r\n            let rest = n % 10;\r\n\r\n            if (rest > 0) {\r\n\r\n                return `${output} ${_convertUnder20(rest)}`;\r\n\r\n            } else {\r\n\r\n                return output;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n    // converts numbers between 0 and 999\r\n    const _convertUnderThousand = (n: number) => {\r\n\r\n        if (n < 100) {\r\n\r\n            return _convertUnderHundred(n);\r\n\r\n        } else {\r\n\r\n            let hundredCount = Math.floor(n / 100);\r\n            let output = _convertUnder20(hundredCount);\r\n\r\n            let rest = n % 100;\r\n\r\n            if (rest > 0)\r\n                return `${output} hundred ${_convertUnderHundred(rest)}`;\r\n\r\n            else\r\n                return output;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    // converts numbers between 0 and 999,999\r\n    const _convertUnderMillion = (n: number) => {\r\n\r\n        if (n < 1000) {\r\n\r\n            return _convertUnderThousand(n);\r\n\r\n        } else {\r\n\r\n            let thousandCount = Math.floor(n / 1000);\r\n            let output = _convertUnderThousand(thousandCount);\r\n\r\n            let rest = n % 1000;\r\n\r\n            if (rest > 0)\r\n                return `${output} thousand ${_convertUnderThousand(rest)}`;\r\n\r\n            else\r\n                return output;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    // converts numbers between 0 and 999,999,999\r\n    const _convertUnderBillion = (n: number) => {\r\n\r\n        if (n < million) {\r\n\r\n            return _convertUnderMillion(n);\r\n\r\n        } else {\r\n\r\n            let millionCount = Math.floor(n / million);\r\n            let output = _convertUnderThousand(millionCount);\r\n\r\n            let rest = n % million;\r\n\r\n            if (rest > 0)\r\n                return `${output} million ${_convertUnderMillion(rest)}`;\r\n\r\n            else\r\n                return `${output} million`;\r\n\r\n        }\r\n\r\n    };\r\n\r\n    // converts numbers between 0 and 2,147,483,647 (max)\r\n    return {\r\n\r\n        /** The absolute maximum value that this converter can handle. */\r\n        max: maxConvertible,\r\n\r\n        /** Converts the given number to its text representation. */\r\n        convert: (n: number) => {\r\n\r\n            if (n < 0)\r\n                throw new Error(`Can only convert positive numbers.`);\r\n\r\n            else if (n > maxConvertible)\r\n                throw new Error(`Number ${n} is too big for conversion. Max is ${maxConvertible}.`);\r\n\r\n\r\n            if (n < billion) {\r\n\r\n                return _convertUnderBillion(n);\r\n\r\n            } else {\r\n\r\n                let billionCount = Math.floor(n / billion);\r\n\r\n                // billion count can be at most 2\r\n                let output = _convertUnder20(billionCount);\r\n\r\n                let rest = n % billion;\r\n\r\n                if (rest > 0)\r\n                    return `${output} billion ${_convertUnderBillion(rest)}`;\r\n\r\n                else\r\n                    return `${output} billion`;\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n", "\r\n/** A helper returning an ordinal suffix (st, nd, rd) for a given number. */\r\nexport const OrdinalSuffixHelper = (() => {\r\n\r\n    const suffixForDigit = (digit: number) => {\r\n\r\n        if (digit === 1)\r\n            return 'st';\r\n\r\n        else if (digit === 2)\r\n            return 'nd';\r\n\r\n        else if (digit === 3)\r\n            return 'rd';\r\n\r\n        else\r\n            return 'th';\r\n\r\n    }\r\n\r\n    return {\r\n        /** Returns an ordinal suffix (st, nd, rd, th), for the given number. */\r\n        getSuffix: (number: number) => {\r\n\r\n            // we don't care about the sign\r\n            number = Math.abs(number);\r\n\r\n            if (number <= 9)\r\n                return suffixForDigit(number);\r\n\r\n            else if (number < 20)\r\n                return 'th'\r\n\r\n            else\r\n                return suffixForDigit(number % 10);\r\n        }\r\n    };\r\n\r\n})();", "\r\nexport const TextCapitalizer = (() => ({\r\n\r\n    capitalize: (text: string) => {\r\n\r\n        // Kustom only capitalizes letters at the start of the string and after spaces\r\n        // the pattern should be: (?<=^|\\s).\r\n        // this would make it work for characters after start of string and after any whitespace\r\n        // but for now, this implementation replicated the flawed behaviour\r\n        return text.replace(/(?<=^| )./g, match => match.toUpperCase());\r\n\r\n    }\r\n\r\n}))();\r\n", "import {\r\n    EvaluationWarning,\r\n    EvaluationError,\r\n    KodeFunctionWithModes,\r\n    InvalidArgumentError,\r\n    RegexEvaluationError,\r\n} from \"../../../kodeine.js\";\r\nimport { HtmlEntityConverter } from \"../helpers/html-entitity-converter.js\";\r\nimport { NumberToRomanConverter } from \"../helpers/number-to-roman-converter.js\";\r\nimport { NumberToTextConverter } from \"../helpers/number-to-text-converter.js\";\r\nimport { OrdinalSuffixHelper } from \"../helpers/ordinal-suffix-helper.js\";\r\nimport { TextCapitalizer } from \"../helpers/text-capitalizer.js\";\r\n\r\n/** Implementation of Kustom's tc() (text converter) function. */\r\nexport class TcFunction extends KodeFunctionWithModes {\r\n    getName() { return 'tc'; }\r\n\r\n\r\n    /** Shared part of implementation for tc(cut) and tc(ell). */\r\n    private static _cut(text: string, startOrLength: number, length?: number): string {\r\n\r\n        if (length) {\r\n\r\n            // two numeric arguments passed\r\n\r\n            if (length === 0)\r\n\r\n                // length is zero, always return empty string\r\n                return '';\r\n\r\n            else if (length > 0)\r\n\r\n                // length is positive\r\n\r\n                if (startOrLength >= 0)\r\n                    // start and length are positive\r\n                    return text.substring(startOrLength, startOrLength + length)\r\n\r\n                else\r\n\r\n                    // start is negative, length is positive\r\n\r\n                    if (length >= Math.abs(startOrLength))\r\n                        // starting 3 characters from end and taking >= 3 doesn't work\r\n                        // it proably should but it does not\r\n                        return '';\r\n\r\n                    else\r\n                        // treat start as index from end, take length characters\r\n                        return text.substring(text.length + startOrLength, length);\r\n\r\n            else\r\n\r\n                // length is negative\r\n\r\n                if (startOrLength > 0)\r\n\r\n                    // start is positive, length is negative\r\n\r\n                    if (length === -1 || Math.abs(length) <= startOrLength)\r\n                        // if length is -1, return empty string (seems unintentional)\r\n                        // if start is 3, length -3, -2 and -1 won't work\r\n                        return '';\r\n\r\n                    else\r\n                        // if length is less than -1, treat it as index from end but offest by start\r\n                        return text.substring(startOrLength, startOrLength + text.length + length);\r\n\r\n\r\n                else if (startOrLength === 0)\r\n\r\n                    // start is 0 and length is negative, treat length as index from end\r\n                    // this cannot be merged with the first condition\r\n                    // because when start is 0, length = -1 works as expected\r\n                    return text.substring(0, text.length + length);\r\n\r\n                else\r\n\r\n                    // start and length are negative, seems to always return empty string\r\n                    return '';\r\n\r\n\r\n        } else {\r\n\r\n            // one numeric argument passed\r\n\r\n            if (startOrLength >= 0)\r\n                // positive or zero, treat as length (get first n characters)\r\n                return text.substring(0, startOrLength);\r\n\r\n            else\r\n                // negative, treat as count from end\r\n                return text.substring(text.length + startOrLength);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.mode('low',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n                return text.toLowerCase();\r\n            }\r\n        );\r\n\r\n        this.mode('up',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n                return text.toUpperCase();\r\n            }\r\n        );\r\n\r\n        this.mode('cap',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n\r\n                if (text === '') {\r\n\r\n                    throw new InvalidArgumentError(\r\n                        'tc(cap)', 'text', 1, this.call.args[1], text,\r\n                        'Kustom will throw \"string index out of range: 1\" when attempting to capitalize an empty string. This does not seem to affect function evaluation.'\r\n                    );\r\n\r\n                }\r\n\r\n                // Kustom only capitalizes letters at the start of the string and after spaces\r\n                // more about this in TextCapitalizer\r\n                return TextCapitalizer.capitalize(text);\r\n            }\r\n        );\r\n\r\n        this.mode('cut',\r\n            ['txt text', 'num startOrLength', 'num length?'],\r\n            function (text: string, startOrLength: number, length?: number): string {\r\n\r\n                // call shared implementation\r\n                return TcFunction._cut(text, startOrLength, length);\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('ell',\r\n            ['txt text', 'num startOrLength', 'num length?'],\r\n            function (text: string, startOrLength: number, length?: number): string {\r\n\r\n                // call shared implementation\r\n                let output = TcFunction._cut(text, startOrLength, length);\r\n\r\n                if (output != '' && output.length < text.length)\r\n                    // the output was shortened and it isn't an empty string, add ellipsis\r\n                    return output + '...';\r\n\r\n                else\r\n                    // otherwise, return the output untouched\r\n                    return output;\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('count',\r\n            ['txt text', 'txt searchFor'],\r\n            function (text: string, searchFor: string): number {\r\n\r\n                let count = 0;\r\n\r\n                // go through every character (there is probably a way to optimize this)\r\n                for (let i = 0; i < text.length - searchFor.length + 1; i++) {\r\n\r\n                    // check if first character matches before checking entire substring, small optimization\r\n                    if (text[i] == searchFor[0] && text.substring(i, i + searchFor.length) == searchFor) {\r\n\r\n                        count++;\r\n\r\n                        // move to after the current match:\r\n                        // tc(count, aaaa, aa) returns 2, not 3\r\n                        i += searchFor.length - 1;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                return count;\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('utf',\r\n            ['txt hexCode'],\r\n            function (hexCode: string): string {\r\n\r\n                // parse the code as a hex number\r\n                let parsedCode = Number('0x' + hexCode);\r\n\r\n                if (isNaN(parsedCode)) {\r\n\r\n                    // given code is not a hex number\r\n                    throw new InvalidArgumentError(\r\n                        `tc(utf)`, 'hexCode', 1,\r\n                        this.call.args[1], hexCode,\r\n                        'Value could not be parsed as a hexadecimal number.'\r\n                    );\r\n\r\n                } else {\r\n\r\n                    try {\r\n\r\n                        // try to get a character using the code\r\n                        return String.fromCodePoint(parsedCode);\r\n\r\n                    } catch (err: any) {\r\n\r\n                        // couldn't get character using code, throw\r\n                        throw new InvalidArgumentError(\r\n                            `tc(utf)`, 'hexCode', 1,\r\n                            this.call.args[1], hexCode,\r\n                            'Value is not a valid character code: ' + err.message\r\n                        );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('len',\r\n            ['txt text'],\r\n            function (text: string): number {\r\n                return text.length\r\n            }\r\n        );\r\n\r\n        this.mode('n2w',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n\r\n                // capture numbers with -, because negative numbers throw when their absolute value is over maximum\r\n                // positive numbers over the maximum return the maximum, but in words\r\n                let expr = /-?\\d+/g;\r\n\r\n                // replace each number occurence\r\n                return text.replace(expr, match => {\r\n\r\n                    // parse as number (should never be an invalid number if it matches the pattern)\r\n                    let num = Number(match)\r\n\r\n                    if (isNaN(num)) {\r\n\r\n                        // if the number somehow is invalid, add a warning and don't replace\r\n\r\n                        this.evalCtx.sideEffects.warnings.push(\r\n                            new EvaluationWarning(\r\n                                this.call.args[1],\r\n                                `Number ${match} could not be parsed.`\r\n                            )\r\n                        );\r\n\r\n                        return match;\r\n\r\n                    } else {\r\n\r\n                        if (-num > NumberToTextConverter.max) {\r\n\r\n                            // special case for negative numbers that have an absolute value over the maximum\r\n                            // this does not happen for positive numbers, instead, the max as words is returned\r\n                            throw new InvalidArgumentError(\r\n                                'tc(n2w)', 'text', 1,\r\n                                this.call.args[1], match, `Negative numbers throw an error when their absolute value is greater than the max value for a signed 32 bit integer (${NumberToTextConverter.max}).`\r\n                            );\r\n\r\n                        }\r\n\r\n                        // convert and prepend a - if the input was negative\r\n                        return (num < 0 ? '-' : '') + NumberToTextConverter.convert(Math.min(Math.abs(num), NumberToTextConverter.max));\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('ord',\r\n            ['num number'],\r\n            function (number: number): string {\r\n\r\n                // this function breaks in Kustom when the number is in input format \"1.0\"\r\n                // most commonly happens when the negation operator is used\r\n                // for now not replicating this (I assume) bug\r\n                return OrdinalSuffixHelper.getSuffix(number);\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('roman',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n\r\n                // capture copy pasted from tc(n2w), which I assume Kustom also does under the hood\r\n                // the problem is using large numbers with this crashes KLWP, so I can't really test it\r\n                let expr = /-?\\d+/g;\r\n\r\n                // replace each number occurence\r\n                return text.replace(expr, match => {\r\n\r\n                    // parse as number (should never be an invalid number if it matches the pattern)\r\n                    let num = Number(match)\r\n\r\n                    if (isNaN(num)) {\r\n\r\n                        // if the number somehow is invalid, add a warning and don't replace\r\n\r\n                        this.evalCtx.sideEffects.warnings.push(\r\n                            new EvaluationWarning(\r\n                                this.call.args[1],\r\n                                `Number ${match} could not be parsed.`\r\n                            )\r\n                        );\r\n\r\n                        return match;\r\n\r\n                    } else {\r\n\r\n                        if (Math.abs(num) > NumberToRomanConverter.max) {\r\n\r\n                            // we probably could allow the user to go further,\r\n                            // but not only will this output A LOT of characters,\r\n                            // it will also straight up crash the app at like 7 or 8 digits\r\n                            throw new InvalidArgumentError(\r\n                                'tc(roman)', 'text', 1,\r\n                                this.call.args[1], match, `Number ${match} is greater than the maximum for tc(roman) (${NumberToTextConverter.max}). `\r\n                                + 'Each decimal digit you add to your number increases the number of Ms (roman numeral for 1,000) in the output exponentially. '\r\n                                + 'To illustrate, 1,000,000 results in 1,000 Ms, 10,000,000 results in 10,000 Ms and 100,000,000 results in 100,000 Ms. '\r\n                            + 'TL;DR: Kustom will crash.'\r\n                            );\r\n\r\n                        }\r\n\r\n                        // convert and prepend a - if the input was negative\r\n                        return (num < 0 ? '-' : '') + NumberToRomanConverter.convert(Math.abs(num));\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('lpad',\r\n            ['txt text', 'num targetLength', 'txt padWith?'],\r\n            function (text: string, targetLength: number, padWith?: string): string {\r\n\r\n                if (text.length >= targetLength) {\r\n\r\n                    // text is already long enough\r\n                    return text;\r\n\r\n                } else {\r\n\r\n                    padWith ??= '0'; // pad with 0 by default\r\n\r\n                    let fullRepeatCount = Math.floor((targetLength - text.length) / padWith.length);\r\n                    let additionalCharCount = targetLength - text.length - fullRepeatCount * padWith.length;\r\n\r\n                    return padWith.repeat(fullRepeatCount)              // full repeats\r\n                        + padWith.substring(0, additionalCharCount)     // partial repeat\r\n                        + text;                                         // source text\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('rpad',\r\n            ['txt text', 'num targetLength', 'txt padWith?'],\r\n            function (text: string, targetLength: number, padWith?: string): string {\r\n\r\n                if (text.length >= targetLength) {\r\n\r\n                    // text is already long enough\r\n                    return text;\r\n\r\n                } else {\r\n\r\n                    padWith ??= '0'; // pad with 0 by default\r\n\r\n                    let fullRepeatCount = Math.floor((targetLength - text.length) / padWith.length);\r\n                    let additionalCharCount = targetLength - text.length - fullRepeatCount * padWith.length;\r\n\r\n                    return text                                         // source text\r\n                        + padWith.repeat(fullRepeatCount)               // full repeats\r\n                        + padWith.substring(0, additionalCharCount);    // partial repeat\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('split',\r\n            ['txt text', 'txt splitBy', 'num index'],\r\n            function (text: string, splitBy: string, index: number): string {\r\n\r\n                if (index < 0) {\r\n\r\n                    // Kustom throws an error for indices less than 0 but not for indices greater than array length\r\n                    throw new InvalidArgumentError(\r\n                        'tc(split)', 'index', 3, this.call.args[3], index,\r\n                        'Kustom will throw \"length=[split element count]; index=[passed index];\" when passing a negative index to tc(split). '\r\n                        + 'Note that this does not happen when the passed index is greater than or equal to [split element count].'\r\n                    );\r\n\r\n                }\r\n\r\n                // Kustom skips over empty elements\r\n                // tc(split, aXXb, X, 1) => b instead of \"\"\r\n                // also normalize undefined to \"\"\r\n                return text.split(splitBy).filter(s => s !== '')[index] ?? '';\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('reg',\r\n            ['txt text', 'txt pattern', 'txt replacement'],\r\n            function (text: string, pattern: string, replacement: string): string {\r\n\r\n                try {\r\n\r\n                    // create a global (multi-match) pattern from the given string\r\n                    let expr = new RegExp(pattern, 'g');\r\n\r\n                    // the replacement in Kustom is far less powerful than in JS\r\n                    // pretty much the only thing that works is $0 to insert entire match and $1, $2 etc. to insert matched groups\r\n                    // you can escape those $0, $1 etc. tokens with a backslash: \\\\\r\n                    // backslashes are removed from the replacement, unless they are double backslashes\r\n                    // \\n, \\r, \\t do not work, the backslash gets removed and the letter gets printed\r\n                    // same with $` and $' (before match and after match)\r\n                    // JS has $& for inserting entire match, Kustom uses $0 instead\r\n                    // because of that I decided to manually handle replacing tokens in the replacement string\r\n\r\n                    let hadErrors = false;\r\n\r\n                    let result = text.replace(expr, (...sourceMatchArgs: string[]) => {\r\n\r\n                        let sourceMatchGroupCount = sourceMatchArgs.length - 3;\r\n\r\n                        // Kustom only supports one digit capture group backreferences\r\n                        // $0, $1 etc. work, $10 is just $1 and character 0\r\n                        // this pattern should probably have \\d+ instead of \\d\r\n                        return replacement.replace(/(\\\\*)\\$(\\d)|(\\\\+)/g, (groupMatch: string, backslashes: string, digit?: string): string => {\r\n\r\n                            // start by escaping backslashes\r\n\r\n                            // if backslashes is undefined, the part after | matched, meaning just backslashes are matched and we can use groupMatch\r\n                            // alternatively, we could accept another argument, but this is more convenient\r\n                            backslashes ??= groupMatch;\r\n\r\n                            let outBackslashes = '\\\\'.repeat(Math.floor((backslashes ?? groupMatch).length / 2));\r\n\r\n                            if (backslashes.length % 2 === 0) {\r\n\r\n                                // even number of backslashes means they cancel each other out\r\n                                // the $0, $1 etc. token is not escaped and should be replaced\r\n                                // with the contents of its corresponding captured group\r\n\r\n                                if (digit) {\r\n\r\n                                    // captured an unescaped $0, $1 etc. after the backslashes\r\n                                    // replace with appropriate capture group contents\r\n\r\n                                    let groupNumber = Number(digit);\r\n\r\n                                    if (groupNumber > sourceMatchGroupCount) {\r\n\r\n                                        // this could throw, but that would only show one error at a time\r\n                                        // instead we collect all errors, set a flag and return empty string\r\n                                        // at the end if the flag was set\r\n                                        this.evalCtx.sideEffects.errors.push(\r\n                                            new EvaluationError(\r\n                                                this.call.args[3],\r\n                                                'Replacement contains a reference to a group index that wasn\\'t captured '\r\n                                                + `(captured ${sourceMatchGroupCount} group${sourceMatchGroupCount === 1 ? '' : 's'}, `\r\n                                                + `referenced group $${digit}). tc(reg) will return an empty string.`\r\n                                            )\r\n                                        );\r\n\r\n                                        hadErrors = true;\r\n\r\n                                        return outBackslashes + `$${digit}`;\r\n\r\n                                    } else {\r\n\r\n                                        // argument 0 is conveniently the whole match, so this should simply work\r\n                                        return outBackslashes + sourceMatchArgs[groupNumber];\r\n\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    // did not capture a $0, $1 etc. after the backslashes\r\n                                    return outBackslashes;\r\n\r\n                                }\r\n\r\n                            } else {\r\n\r\n                                // odd number of backslashes means they don't cancel each other out\r\n\r\n                                if (digit)\r\n                                    // the last backslash escapes a $0, $1 etc. token\r\n                                    // return backslashes plus the escaped token\r\n                                    return outBackslashes + `$${digit}`;\r\n\r\n                                else\r\n                                    // the last backslash escapes something else, ignore it\r\n                                    return outBackslashes;\r\n\r\n                            }\r\n\r\n                        });\r\n\r\n                    });\r\n\r\n                    // if result had errors, return empty string\r\n                    // this could be done using throw and catch to cut evaluation short,\r\n                    // but it's done using a flag, so that if there are multiple errors,\r\n                    // they will all show up as warnings immediately, instead of one after another\r\n                    return hadErrors ? '' : result;\r\n\r\n                } catch (err: any) {\r\n\r\n                    throw new RegexEvaluationError(this.call.args[2], err.message);\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n        // TODO: maybe implement accurately at some point\r\n        this.mode('html',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n\r\n                this.evalCtx.sideEffects.warnings.push(\r\n                    new EvaluationWarning(\r\n                        this.call,\r\n                        'tc(html) is not implemented accurately. You might see significant differences when running your formula in Kustom.'\r\n                    )\r\n                );\r\n\r\n                // simple implementation that does the basic job\r\n                return text\r\n                    // remove <anything> in html brackets\r\n                    .replace(/<[^>]+?>/g, '')\r\n                    // convert &entities; to string\r\n                    .replace(/&.*?;/g, match => HtmlEntityConverter.convert(match));\r\n\r\n            }\r\n        );\r\n\r\n        // TODO: maybe implement accurately at some point\r\n        this.mode('url',\r\n            ['txt text', 'txt encoding?'],\r\n            function (text: string, encoding?: string): string {\r\n\r\n                if (encoding) {\r\n\r\n                    this.evalCtx.sideEffects.warnings.push(\r\n                        new EvaluationWarning(\r\n                            this.call.args[2],\r\n                            'This argument currently does nothing in kodeine. Known values accepted by Kustom are ascii, unicode, utf8, utf16 and utf32, other values throw an error.'\r\n                        )\r\n                    );\r\n\r\n                }\r\n\r\n                // tc(url) isn't actually suitable to encoding entire urls, only params\r\n                // this should probably be encodeURI instead\r\n                return encodeURIComponent(text);\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('nfmt',\r\n            ['txt text'],\r\n            function (text: string): string {\r\n\r\n                if (/\\.\\.+/.test(text)) {\r\n\r\n                    // check for multiple points because kustom does for some reason\r\n\r\n                    throw new InvalidArgumentError(\r\n                        'tc(nmft)', 'text', 1, this.call.args[1], text,\r\n                        'Kustom throws \"tc: multiple points\" when there are two or more consecutive points (.) anywhere in the input string.'\r\n                    );\r\n\r\n                }\r\n\r\n                // capture numbers\r\n                let expr = /-?(\\d+\\.?\\d*|\\d*\\.?\\d+)/g;\r\n\r\n                // replace each number occurence\r\n                return text.replace(expr, match => {\r\n\r\n                    // parse as number (should never be an invalid number if it matches the pattern)\r\n                    let num = Number(match)\r\n\r\n                    if (isNaN(num)) {\r\n\r\n                        // if the number somehow is invalid, add a warning and don't replace\r\n\r\n                        this.evalCtx.sideEffects.warnings.push(\r\n                            new EvaluationWarning(\r\n                                this.call.args[1],\r\n                                `Number ${match} could not be parsed.`\r\n                            )\r\n                        );\r\n\r\n                        return match;\r\n\r\n                    } else {\r\n\r\n                        return num.toLocaleString();\r\n\r\n                    }\r\n\r\n                });\r\n            }\r\n\r\n        );\r\n\r\n        this.mode('lines',\r\n            ['txt text'],\r\n            function (text: string): number {\r\n\r\n                // even empty string counts as one line\r\n                let count = 1;\r\n\r\n                // hold the index to start searching from\r\n                let currentPos = 0;\r\n\r\n                while (currentPos != -1) {\r\n\r\n                    // look for the next newline character\r\n                    currentPos = text.indexOf('\\n', currentPos);\r\n\r\n                    if (currentPos >= 0) {\r\n\r\n                        // newline found, increase count and start next search after it\r\n                        count++;\r\n                        currentPos++;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                return count;\r\n\r\n            }\r\n        );\r\n\r\n        this.mode('type',\r\n            ['txt text'],\r\n            function (text: string) {\r\n\r\n                if (!text || !text.trim()) {\r\n\r\n                    // as a start, make sure the text isn't empty or whitespace\r\n                    return 'LATIN';\r\n\r\n                } else {\r\n\r\n                    let num = Number(text);\r\n                    if (!isNaN(num)) {\r\n\r\n                        return 'NUMBER';\r\n\r\n                    }\r\n\r\n                    // https://stackoverflow.com/questions/4446244/how-to-check-if-any-arabic-character-exists-in-the-string-javascript\r\n                    else if (/[\\u0600-\\u06FF]/.test(text)) {\r\n                        return 'ARABIC';\r\n                    }\r\n\r\n                    // https://stackoverflow.com/questions/26846663/detect-russian-cyrillic-in-javascript-string\r\n                    else if (/[\\u0400-\\u04FF]/.test(text)) {\r\n\r\n                        return 'CYRILLIC';\r\n\r\n                    }\r\n\r\n                    // https://stackoverflow.com/questions/50320061/how-can-i-validate-greek-characters-in-javascript\r\n                    else if (/[\\u0370-\\u03FF\\u1F00-\\u1FFF]/.test(text)) {\r\n\r\n                        return 'GREEK';\r\n\r\n                    }\r\n\r\n                    // japanese stuff:\r\n                    // https://stackoverflow.com/questions/15033196/using-javascript-to-check-whether-a-string-contains-japanese-characters-includi\r\n\r\n                    else if (/[\\u3040-\\u309f]/.test(text)) {\r\n\r\n                        return 'HIRAGANA';\r\n\r\n                    }\r\n\r\n                    else if (/[\\u30a0-\\u30ff\\uff00-\\uff9f]/.test(text)) {\r\n\r\n                        return 'KATAKANA';\r\n\r\n                    }\r\n\r\n                    else if (/[\\u4e00-\\u9faf\\u3400-\\u4dbf]/.test(text)) {\r\n\r\n                        return 'CJK';\r\n\r\n                    }\r\n\r\n                    else {\r\n\r\n                        // consider everything else latin by default\r\n                        return 'LATIN';\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n}", "import {\r\n    IKodeFunction,\r\n    EvaluationError,\r\n    FunctionCall,\r\n    KodeValue,\r\n    EvaluationContext\r\n} from \"../../../kodeine.js\";\r\n\r\nexport class DfFunction extends IKodeFunction {\r\n    \r\n    getName() { return 'df'; }\r\n\r\n    call(evalCtx: EvaluationContext, call: FunctionCall, args: KodeValue[]): KodeValue {\r\n\r\n        throw new EvaluationError(call, 'This function isn\\'t implemented yet.');\r\n        \r\n    }\r\n\r\n}\r\n", "import {\r\n    KodeValue,\r\n    IUnaryOperator,\r\n    EvaluationContext,\r\n    UnaryOperation,\r\n    UnaryMinusStringModeWarning\r\n} from \"../../../kodeine.js\";\r\n\r\n/** Implements the only unary operator in kode, negation (unary minus). */\r\nexport class NegationOperator extends IUnaryOperator {\r\n\r\n    getSymbol() { return '-'; }\r\n\r\n    operation(evalCtx: EvaluationContext, operation: UnaryOperation, a: KodeValue): KodeValue {\r\n\r\n        if (a.isNumeric) {\r\n\r\n            // the arugment is numeric, everything works as expected\r\n            let value = -a.numericValue;\r\n            if (Number.isInteger(value))\r\n                // replicate the weird behaviour .0 being added to integers after negation\r\n                return new KodeValue(value + '.0');\r\n\r\n            else\r\n                return new KodeValue(value);\r\n\r\n\r\n        } else {\r\n\r\n            evalCtx.sideEffects.warnings.push(new UnaryMinusStringModeWarning(operation));\r\n\r\n            // the argument is not numeric, panic\r\n            // ...no, really, this is what Kustom does\r\n            // -abc => abc-null\r\n            return new KodeValue(a.text + '-null', operation.source);\r\n\r\n        }\r\n    }\r\n\r\n}\r\n", "import {\r\n    KodeValue,\r\n    IBinaryOperator,\r\n    BinaryOperation,\r\n    EvaluationContext\r\n} from \"../../../kodeine.js\";\r\n\r\n/** \r\n * Base class for operators that work in one way if both arguments are numeric,\r\n * and otherwise concatenate with the operator symbol in the middle.\r\n * @example <caption>Example two mode operator.</caption>\r\n * 2 / 2    // returns 1\r\n * \"a\" / 2  // returns \"a/2\"\r\n */\r\nexport abstract class TwoModeBinaryOperator extends IBinaryOperator {\r\n\r\n    /** Selects between a numeric mode and default text mode. */\r\n    operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue {\r\n\r\n        if (a.isNumeric && b.isNumeric) {\r\n\r\n            // both values are numeric, run numeric mode\r\n            return new KodeValue(this.numericMode(a.numericValue, b.numericValue), operation.source);\r\n\r\n        } else {\r\n\r\n            // at least one of the values is not numeric, run text mode\r\n            return new KodeValue(this.textMode(a, b), operation.source);\r\n\r\n        }\r\n    }\r\n\r\n    /** \r\n     * Implements the numeric mode of this operator.\r\n     * @param a Left hand side numeric argument.\r\n     * @param b Right hand side numeric argument.\r\n     * @returns Numeric mode operation result.\r\n     */\r\n    abstract numericMode(a: number, b: number): (number | boolean);\r\n\r\n    /** \r\n     * Implements the text mode of this operator.\r\n     * The default implementation concatenates two values together \r\n     * and inserts the operator symbol in the middle.\r\n     * @param a The left hand side argument.\r\n     * @param b The right hand side argument.\r\n     * @returns Text mode operation result.\r\n     */\r\n    textMode(a: KodeValue, b: KodeValue): string {\r\n\r\n        // if either a or b is numeric, concat the numeric value instead of the text value.\r\n        // for example, 2.000 + \"text\" => 2text\r\n\r\n        if (a.isNumeric)\r\n            return a.numericValue + this.getSymbol() + b.text;\r\n\r\n        else if (b.isNumeric)\r\n            return a.text + this.getSymbol() + b.numericValue;\r\n\r\n        else\r\n            return a.text + this.getSymbol() + b.text;\r\n\r\n    }\r\n}\r\n", "import {\r\n    KodeValue,\r\n    IBinaryOperator,\r\n    RegexEvaluationError,\r\n    BinaryOperation,\r\n    EvaluationContext,\r\n    TwoModeBinaryOperator\r\n} from \"../../../kodeine.js\";\r\n\r\n// this module contains implementations of all binary operators available in Kustom.\r\n// most operators here extend TwoModeBinaryOperator and therefore only need to\r\n// implement their symbol, precedence and numeric mode.\r\n\r\n// operator precedence values:\r\n// 5    ^\r\n// 4    * / %\r\n// 3    + -\r\n// 2    = != < > <= >= ~=\r\n// 1    | &\r\n\r\n\r\n// precedence: 5\r\n\r\nexport class ExponentiationOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '^'; }\r\n    getPrecedence() { return 5; }\r\n    numericMode(a: number, b: number): number {\r\n        return a ** b;\r\n    }\r\n}\r\n\r\n\r\n// precedence: 4\r\n\r\nexport class MultiplicationOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '*'; }\r\n    getPrecedence() { return 4; }\r\n    numericMode(a: number, b: number): number {\r\n        return a * b;\r\n    }\r\n}\r\n\r\nexport class DivisionOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '/'; }\r\n    getPrecedence() { return 4; }\r\n    numericMode(a: number, b: number): number {\r\n        return a / b;\r\n    }\r\n}\r\n\r\nexport class ModuloOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '%'; }\r\n    getPrecedence() { return 4; }\r\n    numericMode(a: number, b: number): number {\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// precedence: 3\r\n\r\nexport class AdditionOperator extends IBinaryOperator {\r\n    getSymbol() { return '+'; }\r\n    getPrecedence() { return 3; }\r\n    operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue {\r\n        if (a.isNumeric && b.isNumeric) {\r\n            return new KodeValue(a.numericValue + b.numericValue);\r\n        } else {\r\n            if (a.isNumeric)\r\n                return new KodeValue(a.numericValue + b.text, operation.source);\r\n            else if (b.isNumeric)\r\n                return new KodeValue(a.text + b.numericValue, operation.source);\r\n            else\r\n                return new KodeValue(a.text + b.text, operation.source);\r\n        }\r\n    }\r\n}\r\n\r\nexport class SubtractionOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '-'; }\r\n    getPrecedence() { return 3; }\r\n    numericMode(a: number, b: number): number {\r\n        return a - b;\r\n    }\r\n}\r\n\r\n\r\n// precedence: 2\r\n\r\nexport class EqualityOperator extends IBinaryOperator {\r\n    getSymbol() { return '='; }\r\n    getPrecedence() { return 2; }\r\n    operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue {\r\n        return new KodeValue(a.equals(b), operation.source);\r\n    }\r\n}\r\n\r\nexport class InequalityOperator extends IBinaryOperator {\r\n    getSymbol() { return '!='; }\r\n    getPrecedence() { return 2; }\r\n    operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue {\r\n        if (a.isNumeric && b.isNumeric)\r\n            return new KodeValue(a.numericValue != b.numericValue, operation.source);\r\n        else if (a.isNumeric || b.isNumeric)\r\n            return new KodeValue(1, operation.source);\r\n        else\r\n            return new KodeValue(a.text.trim().toLowerCase() != b.text.trim().toLowerCase(), operation.source);\r\n    }\r\n}\r\n\r\nexport class LesserThanOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '<'; }\r\n    getPrecedence() { return 2; }\r\n    numericMode(a: number, b: number): boolean {\r\n        return a < b;\r\n    }\r\n}\r\n\r\nexport class GreaterThanOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '>'; }\r\n    getPrecedence() { return 2; }\r\n    numericMode(a: number, b: number): boolean {\r\n        return a > b;\r\n    }\r\n}\r\n\r\nexport class LesserThanOrEqualToOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '<='; }\r\n    getPrecedence() { return 2; }\r\n    numericMode(a: number, b: number): boolean {\r\n        return a <= b;\r\n    }\r\n}\r\n\r\nexport class GreaterThanOrEqualToOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '>='; }\r\n    getPrecedence() { return 2; }\r\n    numericMode(a: number, b: number): boolean {\r\n        return a >= b;\r\n    }\r\n}\r\n\r\nexport class RegexMatchOperator extends IBinaryOperator {\r\n    getSymbol() { return '~='; }\r\n    getPrecedence() { return 2; }\r\n    operation(evalCtx: EvaluationContext, operation: BinaryOperation, a: KodeValue, b: KodeValue): KodeValue {\r\n        try {\r\n            return new KodeValue(new RegExp(b.text).test(a.text), operation.source);\r\n        } catch (err: any) {\r\n            throw new RegexEvaluationError(operation.argB, err?.toString());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// precedence: 1\r\n\r\nexport class LogicalOrOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '|'; }\r\n    getPrecedence() { return 1; }\r\n    numericMode(a: number, b: number): number {\r\n        return a == 1 || b == 1 ? 1 : 0;\r\n    }\r\n}\r\n\r\nexport class LogicalAndOperator extends TwoModeBinaryOperator {\r\n    getSymbol() { return '&'; }\r\n    getPrecedence() { return 1; }\r\n    numericMode(a: number, b: number): number {\r\n        return a == 1 && b == 1 ? 1 : 0;\r\n    }\r\n}\r\n", "\r\n/** Represents a token emited by the lexer. */\r\nexport abstract class FormulaToken {\r\n\r\n    /** Returns the index of the first character of this token in the formula source text. */\r\n    abstract getStartIndex(): number;\r\n\r\n    /** Returns the index of the first character after this token in the formula source text. */\r\n    abstract getEndIndex(): number;\r\n\r\n    /** Returns the source text of this token. */\r\n    abstract getSourceText(): string;\r\n\r\n    /** Returns a human-readable name of this token. */\r\n    abstract getName(): string;\r\n\r\n    /** Get what this token should output in a plain text part. By default this returns the source text. */\r\n    getPlainTextOutput(): string {\r\n        return this.getSourceText();\r\n    }\r\n\r\n}\r\n", "import { \r\n    ICharReader, IFormulaTokenLexer,\r\n    FormulaToken,\r\n    ClosingParenthesisToken, CommaToken, DollarSignToken, EscapedDollarSignToken, OpeningParenthesisToken, OperatorToken, PlainTextToken, QuotedValueToken, UnclosedQuotedValueToken, UnquotedValueToken, WhitespaceToken\r\n} from \"../kodeine.js\";\r\n\r\n/** \r\n * Values representing the current state of the lexer. \r\n * - {@link Default}: Not in an evaluable part of the formula (reading plain text)\r\n * - {@link Kode}: In an evaluable part of the formula (reading kode tokens)\r\n*/\r\nexport enum KodeineLexerState {\r\n    Default, Kode\r\n}\r\n\r\n/** The default Kodeine lexer. Reads characters from an {@link ICharReader} and combines them into {@link FormulaToken}s. */\r\nexport class KodeineLexer implements IFormulaTokenLexer {\r\n\r\n    /** The source of characters for the lexer. */\r\n    private readonly _charReader: ICharReader;\r\n\r\n    /** An array of all symbols to be considered operator symbols, ordered from longest to shortest. */\r\n    private readonly _operatorSymbols: string[];\r\n\r\n    /** The current state of the lexer. The lexer will only interpret certain characters as tokens if its in the {@link KodeineLexerState.Kode} state. */\r\n    private _state = KodeineLexerState.Default;\r\n\r\n    /** A queue holding tokens that were already peeked, but not consumed. */\r\n    private _tokenQueue: FormulaToken[] = [];\r\n\r\n    /** Constructs a {@link KodeineLexer} with an {@link ICharReader} as a source of characters and an array of operator symbols. */\r\n    constructor(charReader: ICharReader, operatorSymbols: string[]) {\r\n        this._charReader = charReader;\r\n        this._operatorSymbols = operatorSymbols;\r\n    }\r\n\r\n    peek(tokenCount: number, offset: number = 0): FormulaToken[] {\r\n\r\n        // the array of tokens to be returned\r\n        let outTokens: FormulaToken[];\r\n\r\n        if (this._tokenQueue.length > 0) {\r\n\r\n            // there are tokens in the queue, start filling up the outTokens array from the queue\r\n            outTokens = this._tokenQueue.slice(offset, tokenCount);\r\n\r\n        } else {\r\n\r\n            // no tokens in the queue, start with an empty array\r\n            outTokens = [];\r\n\r\n        }\r\n\r\n        // continue reading tokens into the queue and the outTokens array\r\n        // until we have enough tokens or there are no more characters to read\r\n        while (outTokens.length < tokenCount && !this._charReader.EOF()) {\r\n\r\n            let nextToken = this._readNextToken();\r\n            this._tokenQueue.push(nextToken);\r\n            outTokens.push(nextToken);\r\n\r\n        }\r\n\r\n        // return tokens\r\n        return outTokens;\r\n    }\r\n\r\n    consume(tokenCount: number): FormulaToken[] {\r\n\r\n        // the array of tokens to be returned\r\n        let outTokens: FormulaToken[];\r\n\r\n        if (this._tokenQueue.length > 0) {\r\n\r\n            // there are tokens in the queue, remove them from the queue and put in outTokens\r\n            outTokens = this._tokenQueue.splice(0, tokenCount);\r\n\r\n        } else {\r\n\r\n            // no tokens in the queue, start with an empty array\r\n            outTokens = [];\r\n\r\n        }\r\n\r\n        // continue reading tokens into the outTokens array \r\n        // until we have enough tokens or there are no more characters to read\r\n        // don't queue tokens, they are consumed immediately\r\n        while (outTokens.length < tokenCount && !this._charReader.EOF()) {\r\n\r\n            let nextToken = this._readNextToken();\r\n            outTokens.push(nextToken);\r\n\r\n        }\r\n\r\n        // return tokens\r\n        return outTokens;\r\n    }\r\n\r\n    EOF(): boolean {\r\n        // no more characters AND token queue is empty\r\n        return this._charReader.EOF() && this._tokenQueue.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Reads characters from the source until a full token is read.\r\n     * \r\n     * As a principle, the lexer does not throw syntax errors when reading tokens,\r\n     * leaving it up to the parser to check if the order of tokens is valid.\r\n     * \r\n     * @returns The next token read from the source.\r\n     */\r\n    private _readNextToken(): FormulaToken {\r\n\r\n        // save the current position in the source formula text\r\n        // to use as the start index of the token we will be reading\r\n        let startIndex = this._charReader.getPosition();\r\n\r\n        // consume the first character of this token\r\n        let char = this._charReader.consume(1);\r\n\r\n        // check the current state of the lexer\r\n        if (this._state === KodeineLexerState.Default) {\r\n\r\n            // default state = we are not currently in kode\r\n            // every character is plain text, unless we encounter a dollar sign\r\n            // in the future we might also need to watch out for BB codes\r\n\r\n            if (char === '$') {\r\n\r\n                // this token starts with a dollar sign ($)\r\n                // - beggining of an evaluable part ($),\r\n                // - escaped dollar sign ($$)\r\n\r\n                // to know, we need to check the following character:\r\n                let nextChar = this._charReader.peek(1);\r\n\r\n                if (nextChar === '$') {\r\n\r\n                    // this is an escaped dollar sign ($$)\r\n                    // consume the second dollar sign as a part of this token\r\n                    this._charReader.consume(1);\r\n\r\n                    return new EscapedDollarSignToken(startIndex);\r\n\r\n                } else {\r\n\r\n                    // this is the beginning of an evaluable part\r\n                    // switch the lexer state\r\n                    this._state = KodeineLexerState.Kode;\r\n\r\n                    return new DollarSignToken(startIndex);\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                // this token does not start with a dollar sign, and so it is a plain text token\r\n\r\n                // create a buffer containing the first character of the token\r\n                let buffer = char;\r\n\r\n                // read until there are no more characters, or a dollar sign ($) is peeked\r\n                while (!this._charReader.EOF() && this._charReader.peek(1) !== '$') {\r\n\r\n                    // consume character into buffer\r\n                    buffer += this._charReader.consume(1);\r\n\r\n                }\r\n\r\n                // all characters of this plain text token are now in the buffer\r\n                return new PlainTextToken(buffer, startIndex);\r\n            }\r\n\r\n\r\n        } else if (this._state === KodeineLexerState.Kode) {\r\n\r\n            // kode state\r\n            // we have to pay attention to more than just dollar signs here\r\n\r\n            if (this._isWhitespace(char)) {\r\n\r\n                // this token starts with a whitespace character, so we are reading a whitespace token\r\n\r\n                // create a buffer containing the first character of the token\r\n                let buffer = char;\r\n\r\n                // read until there are no more characters, or a non-whitespace character is peeked\r\n                while (!this._charReader.EOF() && this._isWhitespace(this._charReader.peek(1))) {\r\n\r\n                    // consume character into buffer\r\n                    buffer += this._charReader.consume(1);\r\n\r\n                }\r\n\r\n                // all characters of this whitespace token are now in the buffer\r\n                return new WhitespaceToken(buffer, startIndex);\r\n\r\n            } else if (char === '(') {\r\n\r\n                // opening parenthesis\r\n                // it's the parser's job to check if this begins a subexpression or a function call\r\n                return new OpeningParenthesisToken(startIndex);\r\n\r\n            } else if (char === ')') {\r\n\r\n                // closing parenthesis\r\n                return new ClosingParenthesisToken(startIndex);\r\n\r\n            } else if (char === ',') {\r\n\r\n                // comma\r\n                return new CommaToken(startIndex);\r\n\r\n            } else if (char === '\"') {\r\n\r\n                // this token starts with a quotation mark\r\n\r\n                // start with an empty buffer - we only pass the inner value to the token\r\n                let buffer = '';\r\n\r\n                // read until there are no more characters, or a closing doublequote is peeked\r\n                while (!this._charReader.EOF() && this._charReader.peek(1) !== '\"') {\r\n\r\n                    // consume character into buffer\r\n                    buffer += this._charReader.consume(1);\r\n\r\n                }\r\n\r\n                if (this._charReader.EOF()) {\r\n\r\n                    // reached EOF before reaching a closing quotation mark\r\n                    // this means we found an unclosed quoted value, which is a syntax error,\r\n                    // because we don't throw syntax errors in the lexer, we return an unclosed quoted value token\r\n                    // and let the parser decide what to do with it\r\n                    return new UnclosedQuotedValueToken(buffer, startIndex);\r\n\r\n                } else {\r\n\r\n                    // we reached a closing quotation mark\r\n                    // consume the ending quotation mark character\r\n                    this._charReader.consume(1);\r\n\r\n                    // all inner value characters are now in the buffer\r\n                    return new QuotedValueToken(buffer, startIndex);\r\n\r\n                }\r\n\r\n            } else if (char === '$') {\r\n\r\n                // we encountered a dollar sign, which signals the end of this evaluable part\r\n                // switch the state to default\r\n                this._state = KodeineLexerState.Default;\r\n\r\n                return new DollarSignToken(startIndex);\r\n\r\n            } else {\r\n\r\n                // this token starts with a character that isn't easily recognizable as a special character\r\n                // we could have encountered:\r\n                // - an operator\r\n                // - an unquoted value\r\n\r\n\r\n                // find any operators that start with the same character as this token\r\n                let initiallyMatchingOperatorSymbols = this._operatorSymbols.filter(op => op.startsWith(char));\r\n\r\n\r\n                if (initiallyMatchingOperatorSymbols.length > 0) {\r\n\r\n                    // found at least one operator with first char matching\r\n                    // with Kustom's default set of operators, there are no two multi-char operators with the same first character\r\n                    // so there's always going to be one matching operator at most\r\n                    // but since I made this pretty extensible, it should work regardless of how many operators match\r\n\r\n                    // find the longest matching operator by peeking an appropriate number of characters\r\n                    // and comparing to the operator symbol\r\n\r\n                    let longestMatchingOperatorSymbol = '';\r\n\r\n                    for (var multiCharOperatorSymbol of initiallyMatchingOperatorSymbols) {\r\n\r\n                        if (multiCharOperatorSymbol.length > longestMatchingOperatorSymbol.length\r\n                            && char + this._charReader.peek(multiCharOperatorSymbol.length - 1) === multiCharOperatorSymbol) {\r\n\r\n                            // we found a fully matching operator that is longer than the previous fully matching operator\r\n                            longestMatchingOperatorSymbol = multiCharOperatorSymbol;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    // after that process we either have the longest matching multi-char operator or an empty string indicating that no operators matched\r\n                    if (longestMatchingOperatorSymbol) {\r\n\r\n                        // matched an entire operator, consume remaining characters of the symbol\r\n                        this._charReader.consume(longestMatchingOperatorSymbol.length - 1);\r\n                        return new OperatorToken(longestMatchingOperatorSymbol, startIndex);\r\n\r\n                    } else {\r\n\r\n                        // matched first character of operator, but not the entire operator\r\n                        // with Kustom's default set of operators that means ~ or ! (problematic characters)\r\n                        // those chars are treated like value tokens all by themselves, \r\n                        // by which I mean that they throw err: literal cannot follow another literal\r\n                        // when next to a quoted or unquoted value.\r\n                        return new UnquotedValueToken(char, startIndex);\r\n\r\n                    }\r\n\r\n\r\n                } else {\r\n\r\n                    // did not match any operators\r\n                    // we are reading an unquoted value token\r\n\r\n                    // create a buffer containing the first character of the token\r\n                    let buffer = char;\r\n\r\n                    // create an empty buffer for whitespace\r\n                    let whitespaceBuffer = '';\r\n\r\n                    // counter holding how many characters ahead we are peeking to see if the whitespace is trailing or in the middle\r\n                    let offset = 0;\r\n\r\n                    let foundTrailingWhitespace = false;\r\n\r\n                    // read until manual break\r\n                    while (true) {\r\n\r\n                        // peek the next character\r\n                        let nextChar = this._charReader.peek(1, offset++);\r\n\r\n                        if (this._isWhitespace(nextChar)) {\r\n\r\n                            // the next character is whitespace\r\n                            whitespaceBuffer = nextChar;\r\n\r\n                            // continue reading whitespace into the whitespace buffer until manual break\r\n                            while (true) {\r\n\r\n                                // peek next character\r\n                                nextChar = this._charReader.peek(1, offset++);\r\n\r\n                                if (this._isWhitespace(nextChar)) {\r\n\r\n                                    // the next character is whitespace, add to buffer\r\n                                    whitespaceBuffer += nextChar;\r\n\r\n                                } else if (this._isUnquotedTextChar(nextChar)) {\r\n\r\n                                    // the next character is an unquoted text character\r\n                                    // the whitespace we read is not trailing, add to buffer\r\n                                    buffer += whitespaceBuffer + nextChar;\r\n                                    break;\r\n\r\n                                } else {\r\n\r\n                                    // the next character is not an unquoted text character\r\n                                    // the whitespace we read is trailing, so we should discard it and read it as a separate token\r\n                                    foundTrailingWhitespace = true;\r\n                                    break;\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                            // we finished reading whitespace\r\n                            if (foundTrailingWhitespace) {\r\n\r\n                                // if we found trailing whitespace, the entire unquoted value token is already in the buffer, exit the loop\r\n                                break;\r\n                            }\r\n\r\n                        } else if (this._isUnquotedTextChar(nextChar)) {\r\n\r\n                            // the next character is a part of the unquoted string\r\n                            buffer += nextChar;\r\n\r\n                        } else {\r\n\r\n                            // the next character is neither whitespace nor a part of the unquoted string,\r\n                            // the entire unquoted value token is already in the buffer, exit the loop\r\n                            break;\r\n\r\n                        }\r\n                    }\r\n\r\n                    // after we exited the loop we only care about the buffer,\r\n                    // if the whitespace buffer is not empty, it just contains trailing whitespace, which should be a separate token\r\n\r\n                    // consume characters that we peeked and added to the buffer (-1 because we already consumed the first character)\r\n                    this._charReader.consume(buffer.length - 1);\r\n\r\n                    return new UnquotedValueToken(buffer, startIndex);\r\n                }\r\n\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            // this should never happen\r\n            throw new Error('Invalid lexer state: ' + this._state);\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a character is considered a whitespace character.\r\n     * @param char The character to check.\r\n     * @returns Whether the character is a whitespace characters.\r\n     */\r\n    private _isWhitespace(char: string): boolean {\r\n        return char !== '' && char.trim().length === 0;\r\n    }\r\n\r\n    /**\r\n     * Checks whether a character can be a part of an unquoted string.\r\n     * @param char The character to check.\r\n     * @returns Whether the character can be a part of an unquoted string.\r\n     */\r\n    private _isUnquotedTextChar(char: string): boolean {\r\n        let isSpecialChar = char == ''\r\n            || char === '('\r\n            || char === ')'\r\n            || char === '\"'\r\n            || char === ','\r\n            || char === '$'\r\n            || this._operatorSymbols.some(op => op.startsWith(char));\r\n\r\n        return !isSpecialChar;\r\n    }\r\n\r\n}", "import { WhitespaceToken } from \"engine/src/kodeine-lexer/formula-tokens.js\";\r\nimport { \r\n    Evaluable,\r\n    FormulaToken,\r\n    OperatorToken, QuotedValueToken, UnquotedValueToken\r\n} from \"../../kodeine.js\";\r\n\r\n/** Represents an expression builder that can be fed tokens and builds an evaluable. */\r\nexport abstract class IExpressionBuilder {\r\n    \r\n    /**\r\n     * Adds a value from a quoted or unquoted value token to the expression.\r\n     * @param token The value token to create a kode value from.\r\n     * @throws {KodeSyntaxError} A value cannot follow another value.\r\n     */\r\n    abstract addValue(token: (QuotedValueToken | UnquotedValueToken)): void;\r\n\r\n    /**\r\n     * Adds an evaluable to the expression.\r\n     * @param evaluable The evaluable to add\r\n     * @throws {KodeSyntaxError} A value cannot follow another value.\r\n     */\r\n    abstract addEvaluable(evaluable: Evaluable): void;\r\n\r\n    /**\r\n     * Adds an operator occurence from a token to the expression.\r\n     * @param token The operator token to create an operator occurence from.\r\n     * @throws {KodeSyntaxError} Left hand side argument for binary operator missing.\r\n     * @throws {KodeSyntaxError} Unary operator cannot have a left hand side argument.\r\n     * @throws {KodeSyntaxError} Unrecognized operator.\r\n     */\r\n    abstract addOperator(token: OperatorToken): void;\r\n\r\n    /**\r\n     * Adds a whitespace token to the expression.\r\n     * @param token The whitespace token to be added to the expression's source.\r\n     */\r\n    abstract addWhitespace(token: WhitespaceToken): void;\r\n\r\n    /**\r\n     * Builds the expression.\r\n     */\r\n    abstract build(closingToken: FormulaToken): Evaluable;\r\n    \r\n}", "import { WhitespaceToken } from \"engine/src/kodeine-lexer/formula-tokens.js\";\r\nimport {\r\n    Evaluable,\r\n    EvaluableSource,\r\n    KodeValue,\r\n    FormulaToken,\r\n    KodeSyntaxError,\r\n    BinaryOperation,\r\n    Expression,\r\n    UnaryOperation,\r\n    OperatorToken,\r\n    ParsingContext,\r\n    UnaryOperatorOccurence,\r\n    QuotedValueToken, UnquotedValueToken,\r\n    BinaryOperatorOccurence,\r\n    IExpressionBuilder\r\n} from \"../../kodeine.js\";\r\n\r\n/** Parsing helper class that can be fed tokens and then builds an evaluable tree. */\r\nexport class ExpressionBuilder extends IExpressionBuilder {\r\n\r\n    /** The parsing context. Contains information on what functions and operators exist and ties their names/symbols to implementations. */\r\n    protected readonly _parsingCtx: ParsingContext;\r\n\r\n    /** \r\n     * Whether the built expression should include starting and ending tokens in its source.  \r\n     * Should be true for expressions in parentheses and root formula expressions (between dollar signs).\r\n     */\r\n    protected readonly _includeSurroundingTokens: boolean;\r\n\r\n    /** The token or tokens that started this expression (opening parenthesis, dollar sign, function name + opening parenthesis etc.). */\r\n    protected readonly _startingTokens: FormulaToken[];\r\n\r\n    protected readonly _innerTokens: FormulaToken[];\r\n\r\n    /**\r\n     * Constructs an expression builder with a given parsing context.\r\n     * @param parsingCtx The parsing context for this expression builder.\r\n     * @param includeSurroundingTokens Whether the built expression should include starting and ending tokens in its source.\r\n     * @param startingTokens The token or tokens that started the built expression.\r\n     */\r\n    constructor(parsingCtx: ParsingContext, includeSurroundingTokens: boolean, ...startingTokens: FormulaToken[]) {\r\n        super();\r\n        this._parsingCtx = parsingCtx;\r\n        this._includeSurroundingTokens = includeSurroundingTokens;\r\n        this._startingTokens = startingTokens;\r\n        this._innerTokens = [];\r\n    }\r\n\r\n    /** Elements of the built expression. Expressions consist of evaluables and operators. */\r\n    private _elements: (Evaluable | UnaryOperatorOccurence | BinaryOperatorOccurence)[] = [];\r\n\r\n    /** Returns the current last element of {@link _elements}. */\r\n    private _getLastElement() {\r\n        return this._elements[this._elements.length - 1];\r\n    }\r\n\r\n    addValue(token: (QuotedValueToken | UnquotedValueToken)) {\r\n\r\n        // check the current last element\r\n\r\n        let lastElement = this._getLastElement();\r\n\r\n        if (lastElement instanceof Evaluable) {\r\n\r\n            // ugly if to print a more accurate error message for problematic characters\r\n            if (\r\n                (\r\n                    token instanceof UnquotedValueToken\r\n                    && (token.getSourceText() == '~' || token.getSourceText() == '!')\r\n\r\n                ) || (\r\n                    lastElement instanceof KodeValue\r\n                    && lastElement.source?.tokens.length === 1\r\n                    && lastElement.source.tokens[0] instanceof UnquotedValueToken\r\n                    && (lastElement.text == \"~\" || lastElement.text == \"!\")\r\n                )\r\n            ) {\r\n\r\n                // detected an unquoted value problematic token\r\n                throw new KodeSyntaxError(\r\n                    token,\r\n                    'A value cannot follow another value. '\r\n                    + 'Kustom treats first characters of binary operators as standalone unquoted values '\r\n                    + 'when they are not a part of a full operator symbols. ! and ~ both behave this way '\r\n                    + '(first characters of != and ~= respectively).'\r\n                );\r\n\r\n            } else {\r\n\r\n                // cannot have two values one after another\r\n                throw new KodeSyntaxError(token, 'A value cannot follow another value.');\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // create kode value and add as element\r\n        this._elements.push(KodeValue.fromToken(token));\r\n\r\n        // add token to inner tokens\r\n        this._innerTokens.push(token);\r\n\r\n    }\r\n\r\n    addEvaluable(evaluable: Evaluable) {\r\n\r\n        // check the current last element\r\n        let lastElement = this._getLastElement();\r\n        if (lastElement instanceof Evaluable) {\r\n\r\n            // cannot have two values one after another\r\n            // TODO: make this not crash when an evaluable doesn't have a source.\r\n            throw new KodeSyntaxError(evaluable.source!.tokens[0], 'A value cannot follow another value.');\r\n\r\n        }\r\n\r\n        this._elements.push(evaluable);\r\n\r\n        // add evaluable source tokens to inner tokens\r\n        this._innerTokens.push(...evaluable.source!.tokens);\r\n\r\n    }\r\n\r\n    addOperator(token: OperatorToken) {\r\n\r\n        let lastElement = this._getLastElement();\r\n\r\n        // the token should be a unary operator if it is the first element of the expression\r\n        // or is preceded by another operator, be it unary or binary.\r\n        let tokenShouldBeUnaryOperator = !lastElement\r\n            || lastElement instanceof BinaryOperatorOccurence\r\n            || lastElement instanceof UnaryOperatorOccurence;\r\n\r\n\r\n        if (tokenShouldBeUnaryOperator) {\r\n\r\n            let unaryOperator = this._parsingCtx.findUnaryOperator(token.getSymbol());\r\n\r\n            if (unaryOperator) {\r\n\r\n                // found the unary operator\r\n                this._elements.push(new UnaryOperatorOccurence(unaryOperator, token));\r\n\r\n            } else {\r\n\r\n                // unary operator not found\r\n                let binaryOperator = this._parsingCtx.findBinaryOperator(token.getSymbol());\r\n\r\n                if (binaryOperator) {\r\n\r\n                    // cannot have a binary operator at the start or after another operator\r\n                    throw new KodeSyntaxError(token, `Left hand side argument for binary operator \"${token.getSymbol()}\" missing.`);\r\n\r\n                } else {\r\n\r\n                    // completely unknown operator encountered\r\n                    throw new KodeSyntaxError(token, `Unrecognized operator \"${token.getSymbol()}\".`);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            // token should be a binary operator\r\n            let binaryOperator = this._parsingCtx.findBinaryOperator(token.getSymbol());\r\n\r\n            if (binaryOperator) {\r\n\r\n                // found the binary operator\r\n                let binaryOperatorOccurence = new BinaryOperatorOccurence(binaryOperator, token);\r\n\r\n                // find whitespace tokens between previous value token and this operator\r\n                let i = this._innerTokens.length - 1;\r\n                while (this._innerTokens[i] instanceof WhitespaceToken) {\r\n                    binaryOperatorOccurence.precedingWhitespaceTokens.unshift(this._innerTokens[i] as WhitespaceToken);\r\n                    i--;\r\n                }\r\n\r\n                this._elements.push(binaryOperatorOccurence);\r\n\r\n            } else {\r\n\r\n                // binary operator not found\r\n                let unaryOperator = this._parsingCtx.findUnaryOperator(token.getSymbol());\r\n\r\n                if (unaryOperator) {\r\n\r\n                    // cannot have a unary operator with a left hand side argument\r\n                    throw new KodeSyntaxError(token, `Unary operator \"${token.getSymbol()}\" cannot have a left hand side argument.`);\r\n\r\n                } else {\r\n\r\n                    // completely unknown operator encountered\r\n                    throw new KodeSyntaxError(token, `Unrecognized operator \"${token.getSymbol()}\".`);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // add token to inner tokens\r\n        this._innerTokens.push(token);\r\n\r\n    }\r\n\r\n    addWhitespace(token: WhitespaceToken): void {\r\n\r\n        let lastElement = this._elements[this._elements.length - 1];\r\n\r\n        if (lastElement instanceof UnaryOperatorOccurence || lastElement instanceof BinaryOperatorOccurence) {\r\n\r\n            lastElement.followingWhitespaceTokens.push(token);\r\n\r\n        }\r\n\r\n        // add token to inner tokens\r\n        this._innerTokens.push(token);\r\n\r\n    }\r\n\r\n    /** Returns whether this expression has any elements. */\r\n    getIsEmpty(): boolean {\r\n        return this._elements.length === 0;\r\n    }\r\n\r\n    /**\r\n     * Builds an evaluable tree from added expression elements.\r\n     * @param closingToken The token that is closing this expression (closing parenthesis, dollar sign etc.).\r\n     * @returns An evaluable tree. If {@link includeSurroundingTokens} is `true`, returns an {@link Expression}\r\n     * wrapping an evaluable and containing the opening and closing tokens in its source.\r\n     * Otherwise, returns the root (last-in-order) evaluable of the expression.\r\n     */\r\n    build(closingToken: FormulaToken): Evaluable {\r\n\r\n        if (this._elements.length === 0) {\r\n\r\n            // empty parentheses - throw\r\n            throw new KodeSyntaxError(closingToken, 'Empty expression.');\r\n\r\n        } else {\r\n\r\n            // the root element of the expression\r\n            let finalElement: (Evaluable | UnaryOperatorOccurence | BinaryOperatorOccurence);\r\n\r\n            if (this._elements.length === 1) {\r\n\r\n                // this expression only has one element, so it wil be the root element\r\n                // it needs to be an evaluable - this is checked below the current if.\r\n                finalElement = this._elements[0];\r\n\r\n            } else {\r\n\r\n                // multiple elements - construct operations\r\n\r\n                // first pass - collapse any unary operators to IEvaluables\r\n                for (var i = 0; i < this._elements.length; i++) {\r\n\r\n                    let element = this._elements[i];\r\n\r\n                    if (element instanceof UnaryOperatorOccurence) {\r\n\r\n                        // if we encountered a unary operator, take every unary operator immediately following it\r\n                        // and the value after all those unary operators and collapse them all into one evaluable\r\n\r\n                        let firstElI = i; // the index of the first unary operator in the chain\r\n                        let unaryOpStack = [element];\r\n\r\n                        // start a second loop using the same i variable\r\n                        for (i = i + 1; i < this._elements.length; i++) {\r\n\r\n                            element = this._elements[i];\r\n\r\n                            if (element instanceof UnaryOperatorOccurence) {\r\n\r\n                                // add all unary operators to the stack\r\n                                unaryOpStack.push(element);\r\n\r\n                            } else if (element instanceof Evaluable) {\r\n\r\n                                // if we encountered a value, we need to collapse the entire stack + value into a tree\r\n                                // basically like this: UnaryOperation(UnaryOperation(IEvaluable))\r\n\r\n                                let unaryOpCount = unaryOpStack.length;\r\n                                let evaluable = element;\r\n\r\n                                while (unaryOpStack.length > 0) {\r\n\r\n                                    // apply operations in a reverse order by popping the stack\r\n                                    let unaryOpOccurence = unaryOpStack.pop()!;\r\n\r\n                                    evaluable = new UnaryOperation(\r\n                                        unaryOpOccurence.operator, evaluable,\r\n                                        // TODO: make this not crash when the evaluable has no source \r\n                                        new EvaluableSource(unaryOpOccurence.token, ...unaryOpOccurence.followingWhitespaceTokens, ...evaluable.source!.tokens)\r\n                                    );\r\n\r\n                                }\r\n\r\n                                // replace array elements from first unary operator to last + 1, meaning replace the value too\r\n                                this._elements.splice(firstElI, unaryOpCount + 1, evaluable);\r\n\r\n                                // reset i to pretend this collapse didn't happen\r\n                                i = firstElI;\r\n\r\n                                // exit this loop\r\n                                break;\r\n\r\n                            } else {\r\n\r\n                                // this should never happen since we're checking for it when adding operators.\r\n                                throw new KodeSyntaxError(closingToken, `Binary operator cannot follow a unary operator.`)\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // after the first pass we should only be left with binary operators and evaluables\r\n                // second pass - determine the order of operations for binary operators and collapse them in the proper order\r\n\r\n                while (this._elements.length > 1) {\r\n\r\n                    // step 1: find binary operator with the highest precedence\r\n\r\n                    let maxPrecedence = -1;\r\n                    let maxPrecedenceI = -1;\r\n\r\n                    for (var i = 0; i < this._elements.length; i++) {\r\n\r\n                        let element = this._elements[i];\r\n\r\n                        if (element instanceof BinaryOperatorOccurence) {\r\n\r\n                            if (element.operator.getPrecedence() > maxPrecedence) {\r\n\r\n                                maxPrecedence = element.operator.getPrecedence();\r\n                                maxPrecedenceI = i;\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (maxPrecedenceI === -1) {\r\n\r\n                        // this should never happen\r\n                        throw new KodeSyntaxError(closingToken, 'No binary operators found in the expression.');\r\n\r\n                    } else {\r\n\r\n                        let opOccurence = this._elements[maxPrecedenceI] as BinaryOperatorOccurence;\r\n\r\n                        if (maxPrecedenceI === 0 || !(this._elements[maxPrecedenceI - 1] instanceof Evaluable)) {\r\n\r\n                            throw new KodeSyntaxError(closingToken, `Left hand side argument for binary operator \"${opOccurence.operator.getSymbol()}\" missing.`);\r\n\r\n                        } else if (maxPrecedenceI === this._elements.length - 1 || !(this._elements[maxPrecedenceI + 1] instanceof Evaluable)) {\r\n\r\n                            throw new KodeSyntaxError(closingToken, `Right hand side argument for binary operator \"${opOccurence.operator.getSymbol()}\" missing.`);\r\n\r\n                        } else {\r\n\r\n                            // collapse the operator and its two arguments into a one evaluable binary operation\r\n                            let a = this._elements[maxPrecedenceI - 1] as Evaluable;\r\n                            let b = this._elements[maxPrecedenceI + 1] as Evaluable;\r\n\r\n                            let operation = new BinaryOperation(\r\n                                opOccurence.operator,\r\n                                a,\r\n                                b,\r\n                                // TODO: make this not crash when the evaluables have no sources\r\n                                new EvaluableSource(\r\n                                    ...a.source!.tokens,\r\n                                    ...opOccurence.precedingWhitespaceTokens,\r\n                                    opOccurence.token,\r\n                                    ...opOccurence.followingWhitespaceTokens,\r\n                                    ...b.source!.tokens\r\n                                )\r\n                            );\r\n\r\n                            this._elements.splice(maxPrecedenceI - 1, 3, operation);\r\n\r\n                            // reset i like this collapse never happened\r\n                            i = maxPrecedenceI - 1;\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                // after the second pass there should only be one element, being an instance of IEvaluable, so we succeeded\r\n                finalElement = this._elements[0];\r\n\r\n            }\r\n\r\n            // at this point we have the final element, make sure it is an evaluable\r\n            if (finalElement instanceof Evaluable) {\r\n\r\n                if (this._includeSurroundingTokens) {\r\n\r\n                    // we are including surrounding tokens, and so the expression needs to exist\r\n                    // build it with surrounding tokens\r\n                    return new Expression(\r\n                        finalElement,\r\n                        // TODO: make this not crash when the evaluable has no source\r\n                        new EvaluableSource(...this._startingTokens, ...this._innerTokens, closingToken)\r\n                    );\r\n\r\n                } else {\r\n\r\n                    // we are not including surrounding tokens, which means we don't need an expression object\r\n                    // return the root element directly\r\n                    return finalElement;\r\n\r\n                }\r\n\r\n\r\n            } else {\r\n\r\n                // this expression has a final element that isn't an evaluable, throw\r\n                throw new KodeSyntaxError(closingToken, `Expression cannot consist of only the \"${finalElement.operator.getSymbol()}\" operator.`)\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "import { WhitespaceToken } from \"engine/src/kodeine-lexer/formula-tokens.js\";\r\nimport {\r\n    Evaluable, EvaluableSource,\r\n    FormulaToken,\r\n    KodeSyntaxError,\r\n    FunctionCall,\r\n    CommaToken,\r\n    ParsingContext,\r\n    ExpressionBuilder,\r\n    FunctionOccurence,\r\n    IExpressionBuilder,\r\n    OperatorToken, QuotedValueToken, UnquotedValueToken\r\n} from \"../../kodeine.js\";\r\n\r\n/** Parsing helper class that can be fed tokens and then builds a {@link FunctionCall} evaluable. */\r\nexport class FunctionCallBuilder extends IExpressionBuilder {\r\n\r\n    /** The parsing context for this builder. */\r\n    private readonly _parsingCtx: ParsingContext;\r\n\r\n    /** The function occurence that started this function call. */\r\n    private readonly _functionOccurence: FunctionOccurence;\r\n\r\n\r\n    /** Tokens between the opening and closing parenthesis of this function call. */\r\n    private _innerTokens: FormulaToken[] = [];\r\n\r\n    /** An expression builder for building arguments. */\r\n    private _currentArgumentBuilder: ExpressionBuilder;\r\n\r\n    /** An array of evaluables representing arguments of this function call that were already built. */\r\n    private _args: Evaluable[] = [];\r\n\r\n\r\n    /**\r\n     * Constructs a {@link FunctionCallBuilder} with a given parsing context and a function occurence that started this function call.\r\n     * @param parsingCtx The parsing context for this function call builder.\r\n     * @param functionOccurence The function occurrence that started this function call.\r\n     */\r\n    constructor(parsingCtx: ParsingContext, functionOccurence: FunctionOccurence) {\r\n        super();\r\n        this._parsingCtx = parsingCtx;\r\n        this._functionOccurence = functionOccurence;\r\n        this._currentArgumentBuilder = new ExpressionBuilder(parsingCtx, false, ...functionOccurence.openingTokens);\r\n    }\r\n\r\n\r\n    addEvaluable(evaluable: Evaluable): void {\r\n        // TODO: make this not crash when the evaluable has no source\r\n        this._innerTokens.push(...evaluable.source!.tokens);\r\n        this._currentArgumentBuilder.addEvaluable(evaluable);\r\n    }\r\n\r\n    addValue(token: (QuotedValueToken | UnquotedValueToken)) {\r\n        this._innerTokens.push(token);\r\n        this._currentArgumentBuilder.addValue(token);\r\n    }\r\n\r\n    addOperator(token: OperatorToken) {\r\n        this._innerTokens.push(token);\r\n        this._currentArgumentBuilder.addOperator(token);\r\n    }\r\n\r\n    addWhitespace(token: WhitespaceToken): void {\r\n        this._innerTokens.push(token);\r\n        this._currentArgumentBuilder.addWhitespace(token);\r\n    }\r\n\r\n    /** \r\n     * Builds the current argument and prepares for the next one.\r\n     * @param comma The comma token that ended the current argument.\r\n     * @throws {KodeSyntaxError} Argument missing.\r\n     */\r\n    nextArgument(comma: CommaToken) {\r\n\r\n        if (this._currentArgumentBuilder.getIsEmpty()) {\r\n\r\n            throw new KodeSyntaxError(comma, 'Argument missing.');\r\n\r\n        } else {\r\n\r\n            this._innerTokens.push(comma);\r\n\r\n            this._args.push(this._currentArgumentBuilder.build(comma));\r\n\r\n            this._currentArgumentBuilder = new ExpressionBuilder(this._parsingCtx, false, comma);\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds the current argument and then builds a function call with all previously built arguments.\r\n     * @param closingToken The token that closes this function call (most likely a closing parenthesis token).\r\n     * @returns A {@link FunctionCall} evaluable.\r\n     */\r\n    build(closingToken: FormulaToken): Evaluable {\r\n\r\n        if (this._args.length === 0 && this._currentArgumentBuilder.getIsEmpty()) {\r\n\r\n            // allow for a function call with no arguments\r\n            return new FunctionCall(\r\n                this._functionOccurence.func,\r\n                this._args,\r\n                new EvaluableSource(\r\n                    ...this._functionOccurence.openingTokens,\r\n                    ...this._innerTokens,\r\n                    closingToken\r\n                )\r\n            );\r\n\r\n        } else {\r\n\r\n            // build the current argument\r\n            this._args.push(this._currentArgumentBuilder.build(closingToken));\r\n\r\n            // return a function call evaluable\r\n            return new FunctionCall(\r\n                this._functionOccurence.func,\r\n                this._args,\r\n                new EvaluableSource(\r\n                    ...this._functionOccurence.openingTokens,\r\n                    ...this._innerTokens,\r\n                    closingToken\r\n                )\r\n            );\r\n\r\n        }\r\n\r\n    }\r\n}\r\n", "import { \r\n    IKodeFunction,\r\n    FormulaToken\r\n} from \"../../kodeine.js\";\r\n\r\n/** \r\n * An occurence of a function call in an evaluable part of a formula. \r\n * Consists of the function name token ({@link funcNameToken}), opening parenthesis token ({@link openingParenthesisToken})\r\n * and the {@link IKodeFunction} referred to by the {@link funcNameToken}. \r\n */\r\nexport class FunctionOccurence {\r\n\r\n    /** The token representing the name of this function. */\r\n    public readonly openingTokens: FormulaToken[];\r\n    \r\n    /** The {@link IKodeFunction} referred to by the {@link funcNameToken}. */\r\n    public readonly func: IKodeFunction;\r\n\r\n    /**\r\n     * Constructs a function occurence from an {@link IKodeFunction}, a function name token and an opening parenthesis token.\r\n     * @param func The {@link IKodeFunction} being referred to by the {@link funcNameToken}.\r\n     * @param openingTokens The tokens opening this function call.\r\n     */\r\n    constructor(func: IKodeFunction, ...openingTokens: FormulaToken[]) {\r\n        this.openingTokens = openingTokens;\r\n        this.func = func;\r\n    }\r\n\r\n}", "import {\r\n    IBinaryOperator, IUnaryOperator,\r\n    OperatorToken,\r\n    WhitespaceToken\r\n} from \"../../kodeine.js\";\r\n\r\n/** Represents an operator in an expression. */\r\nexport abstract class OperatorOccurence {\r\n\r\n    public readonly token: OperatorToken;\r\n\r\n    constructor(token: OperatorToken) {\r\n        this.token = token;\r\n    }\r\n\r\n}\r\n\r\n/** Represents a unary operator in an expression. */\r\nexport class UnaryOperatorOccurence extends OperatorOccurence {\r\n\r\n    /** The unary operator implementation. */\r\n    public readonly operator: IUnaryOperator;\r\n    public readonly followingWhitespaceTokens: WhitespaceToken[];\r\n\r\n    /** Constructs a {@link UnaryOperatorOccurence} from a unary operator and the token representing it. */\r\n    constructor(operator: IUnaryOperator, token: OperatorToken) {\r\n        super(token);\r\n        this.operator = operator;\r\n        this.followingWhitespaceTokens = [];\r\n    }\r\n\r\n}\r\n\r\n/** Represents a binary operator in an expression. */\r\nexport class BinaryOperatorOccurence extends OperatorOccurence {\r\n\r\n    /** The binary operator implementation. */\r\n    public readonly operator: IBinaryOperator;\r\n    public readonly precedingWhitespaceTokens: WhitespaceToken[];\r\n    public readonly followingWhitespaceTokens: WhitespaceToken[];\r\n\r\n    /** Constructs a {@link BinaryOperatorOccurence} from a binary operator and the token representing it. */\r\n    constructor(operator: IBinaryOperator, token: OperatorToken) {\r\n        super(token);\r\n        this.operator = operator;\r\n        this.precedingWhitespaceTokens = [];\r\n        this.followingWhitespaceTokens = [];\r\n    }\r\n\r\n}\r\n", "import {\r\n    IFormulaTokenLexer, IFormulaStringParser, ICharReader,\r\n    KodeFunctionNotFoundError, KodeParsingError, KodeSyntaxError, UnquotedValueAndFunctionNameCollisionError, UnrecognizedTokenError,\r\n    ClosingParenthesisToken, CommaToken, DollarSignToken, OpeningParenthesisToken, OperatorToken, QuotedValueToken, UnclosedQuotedValueToken, UnquotedValueToken, WhitespaceToken,\r\n    BrokenEvaluable,\r\n    Evaluable, EvaluableSource,\r\n    Formula,\r\n    KodeValue,\r\n    FormulaToken,\r\n    KodeineLexer,\r\n    StringCharReader,\r\n    ExpressionBuilder,\r\n    FunctionCallBuilder,\r\n    FunctionOccurence,\r\n    IExpressionBuilder,\r\n    ParsingContext,\r\n    UnclosedDollarSignWarning, UnclosedQuotedValueWarning\r\n} from \"../kodeine.js\";\r\n\r\n/** \r\n * Values representing the current state of the parser. \r\n * - {@link Default}: Not in an evaluable part of the formula\r\n * - {@link Kode}: In an evaluable part of the formula\r\n*/\r\nexport enum KodeineParserState {\r\n    Default, Kode\r\n}\r\n\r\n/** \r\n * The default kodeine parser. Uses a {@link StringCharReader} and {@link KodeineLexer}\r\n * to read a formula text and produce an evaluable {@link Formula} object.  \r\n * The parser is also responsible for throwing {@link KodeSyntaxError}s when something is wrong with the formula.\r\n * @example \r\n * //Basic usage:\r\n * let parser = new KodeineParser(ParsingContextBuilder.buildDefault());\r\n * let formula = parser.parse('$2 + 2$');\r\n * let evalCtx = new EvaluationContext();\r\n * let formulaResult = formula.evaluate(evalCtx); // evaluate to a KodeValue\r\n * console.log(formulaResult.text);\r\n */\r\nexport class KodeineParser implements IFormulaStringParser {\r\n\r\n    /** The parsing context. Contains function and operator implementations. */\r\n    private _parsingCtx: ParsingContext;\r\n\r\n    /** Constructs a {@link KodeineParser} with a parsing context.*/\r\n    constructor(parsingCtx: ParsingContext) {\r\n        this._parsingCtx = parsingCtx;\r\n    }\r\n\r\n    parse(source: string | ICharReader | IFormulaTokenLexer): Formula {\r\n\r\n        if (typeof source === 'string') {\r\n\r\n            let charReader = new StringCharReader(source);\r\n            let lexer = new KodeineLexer(charReader, this._parsingCtx.getOperatorSymbolsLongestFirst());\r\n            return this._parseCore(lexer);\r\n\r\n        } else if (source instanceof ICharReader) {\r\n\r\n            let lexer = new KodeineLexer(source, this._parsingCtx.getOperatorSymbolsLongestFirst());\r\n            return this._parseCore(lexer);\r\n\r\n        } else if (source instanceof IFormulaTokenLexer) {\r\n\r\n            return this._parseCore(source);\r\n\r\n        } else {\r\n\r\n            throw new Error('Cannot parse the given source.');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /** The actual parser implementation - takes an {@link ILexer}, produces a {@link Formula}. */\r\n    private _parseCore(lexer: IFormulaTokenLexer): Formula {\r\n\r\n        this._parsingCtx.clearSideEffects();\r\n\r\n        /** The current state of the parser. */\r\n        let state = KodeineParserState.Default;\r\n\r\n        /** \r\n         * A formula contains a list of evaluables that are concatenated together after evaluation. \r\n         * This variable is used to constrcut that list as the formula is being parsed.\r\n         */\r\n        let formulaEvaluables: Evaluable[] = [];\r\n\r\n        /** Holds all tokens that were read since the start of the current plain text or evaluable part. */\r\n        let tokenBuffer: FormulaToken[] = [];\r\n\r\n        /**\r\n         * - An expression builder is created and pushed to the stack when an evaluable part begins.\r\n         * - Each subexpression or function call pushes a builder to this stack.  \r\n         * - New expression tokens are added to the last builder in the stack.  \r\n         * - A closing parenthesis causes the last builder to be popped of the stack, built and added to the new last builder as an evaluable.\r\n         */\r\n        let exprBuilderStack: IExpressionBuilder[] = [];\r\n\r\n        /** Returns the first non-whitespace token from the end of the buffer. */\r\n        function getPrevNonWhitespaceToken() {\r\n\r\n            if (tokenBuffer.length === 0) {\r\n\r\n                // token buffer is empty\r\n                return null;\r\n\r\n            } else {\r\n\r\n                // start from the last index of the buffer\r\n                let index = tokenBuffer.length - 1;\r\n                let token = tokenBuffer[index];\r\n\r\n                // go backwards until there are no more tokens or a non whitespace token is encountered\r\n                while (token && token instanceof WhitespaceToken) {\r\n                    index--;\r\n                    token = tokenBuffer[index];\r\n                }\r\n\r\n                // return the token that was found or null if every token in the buffer is a whitespace token\r\n                return token ?? null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        /** Gets the last expression builder from the stack without popping it. */\r\n        function peekLastExprBuilder() {\r\n            return exprBuilderStack[exprBuilderStack.length - 1];\r\n        }\r\n\r\n        // read until there are no more tokens\r\n        while (!lexer.EOF()) {\r\n\r\n            // consume one token\r\n            let token = lexer.consume(1)[0];\r\n\r\n            /** If set to true, this iteration the default mechanism of pushing all tokens to buffer will be skipped. */\r\n            let skipPushingToBuffer = false;\r\n\r\n            if (state === KodeineParserState.Default) {\r\n\r\n                // we are currently in a plain text part\r\n\r\n                if (token instanceof DollarSignToken) {\r\n\r\n                    // this is a dollar sign token, a formula is beginning\r\n                    state = KodeineParserState.Kode;\r\n\r\n                    // add a base expression builder to the stack\r\n                    exprBuilderStack = [new ExpressionBuilder(this._parsingCtx, true, token)];\r\n\r\n                    // check the token buffer\r\n                    if (tokenBuffer.length > 0) {\r\n\r\n                        // we read some plain text tokens before this point, add them to formula evaluables\r\n                        formulaEvaluables.push(new KodeValue(\r\n                            tokenBuffer.map(t => t.getPlainTextOutput()).join(''),\r\n                            new EvaluableSource(...tokenBuffer)\r\n                        ));\r\n\r\n                    }\r\n\r\n                    // start a new buffer with the dollar sign token already in\r\n                    tokenBuffer = [token];\r\n\r\n                } else {\r\n\r\n                    // any other token goes straight into the buffer\r\n                    tokenBuffer.push(token);\r\n\r\n                }\r\n\r\n            } else if (state === KodeineParserState.Kode) {\r\n\r\n                try {\r\n\r\n                    // we are currently in an evaluable part\r\n\r\n                    // expected tokens:\r\n                    // WhitespaceToken, \r\n                    // QuotedValueToken, UnquotedValueToken, OperatorToken,\r\n                    // OpeningParenthesisToken, ClosingParenthesisToken, CommaToken, \r\n                    // DollarSignToken, UnclosedQuotedValueToken\r\n\r\n                    if (token instanceof UnquotedValueToken) {\r\n\r\n                        // an unquoted value token could be a normal unquoted value, or the start of a function call\r\n                        // we need to see the following tokens to know\r\n\r\n                        let offset = 0;\r\n                        let nextToken = lexer.peek(1, offset++)[0];\r\n\r\n                        if (nextToken instanceof WhitespaceToken) {\r\n\r\n                            // the next token being a whitespace token doesn't give us anything useful\r\n                            while (nextToken && nextToken instanceof WhitespaceToken) {\r\n\r\n                                nextToken = lexer.peek(1, offset++)[0];\r\n\r\n                            }\r\n\r\n                            // after the loop above there are no more tokens or we have a non-whitespace token in nextToken\r\n                        }\r\n\r\n                        if (nextToken instanceof OpeningParenthesisToken) {\r\n\r\n                            // the next non-whitespace token is an opening parenthesis token, this is the start of a function call\r\n\r\n                            // override the default buffer pushing behaviour\r\n                            skipPushingToBuffer = true;\r\n\r\n                            // the function name token has already been consumed, and push it to the buffer\r\n                            tokenBuffer.push(token);\r\n\r\n                            let whitespaceTokens: FormulaToken[] = [];\r\n\r\n                            if (offset > 1) {\r\n                                // consume all following whitespace tokens and push them to the buffer\r\n                                whitespaceTokens = lexer.consume(offset - 1)\r\n                                tokenBuffer.push(...whitespaceTokens);\r\n                            }\r\n\r\n                            // consume the opening parenthesis token and push it to the buffer\r\n                            lexer.consume(1);\r\n                            tokenBuffer.push(nextToken);\r\n\r\n                            // get function implementation from the parsing context\r\n                            let funcName = token.getValue();\r\n                            let func = this._parsingCtx.findFunction(funcName);\r\n\r\n                            if (func) {\r\n\r\n                                // implementation found, create a function call builder and push it to the stack\r\n                                exprBuilderStack.push(new FunctionCallBuilder(\r\n                                    this._parsingCtx,\r\n                                    new FunctionOccurence(func, token, ...whitespaceTokens, nextToken)\r\n                                ));\r\n\r\n                            } else {\r\n\r\n                                // function not found, throw\r\n                                throw new KodeFunctionNotFoundError(token);\r\n\r\n                            }\r\n\r\n                        } else {\r\n\r\n                            // this is not a function call, but we still need to check for unquoted string and function name collision\r\n                            // basically reimplementing a bug\r\n\r\n                            if (token.getValue().length === 2 && this._parsingCtx.findFunction(token.getValue())) {\r\n\r\n                                throw new UnquotedValueAndFunctionNameCollisionError(token);\r\n\r\n                            } else {\r\n                                // no function with this name let the current expression builder handle the token\r\n\r\n                            }\r\n\r\n\r\n                            peekLastExprBuilder().addValue(token);\r\n\r\n                        }\r\n\r\n\r\n                    } else if (token instanceof QuotedValueToken) {\r\n\r\n                        // pass the token to the current expression builder and let it throw exceptions if necessary\r\n                        peekLastExprBuilder().addValue(token);\r\n\r\n\r\n                    } else if (token instanceof OperatorToken) {\r\n\r\n                        // pass the token to the current expression builder and let it throw exceptions if necessary\r\n                        peekLastExprBuilder().addOperator(token);\r\n\r\n\r\n                    } else if (token instanceof OpeningParenthesisToken) {\r\n\r\n                        // found an opening parenthesis - it's either a subexpression or a function call\r\n\r\n                        // TODO: Kustom has some funky behaviour around parentheses:\r\n                        // empty parentheses don't throw even when the function name is invalid\r\n                        // asdf() -> asdf\r\n                        // non-empty parentheses arguments throw\r\n                        // asdf(2) -> err: null\r\n                        // a comma not followed by a value throws\r\n                        // asdf(2,) -> err: argument is missing\r\n                        // binary operators inside of parentheses work and take whatever is in front of the parenthesis as the second argument\r\n                        // regardless of which side the operator got a value on\r\n                        // 1(/2) -> 1/2 -> 0.5\r\n                        // 1(2/) -> 1/2 -> 0.5\r\n                        // 1(2-) -> -1\r\n                        // unary minus with a value gets treated the same as a value, so it throws\r\n                        // 1(-2) -> err: null\r\n                        // unary minus without a value works like it was in front of the value before the parenthesis:\r\n                        // 1(-) -> -1.0\r\n                        // this behaviour overrides operator precedence:\r\n                        // 2 / 2 (a +) -> 22a (a got appended first despite / having a higher precedence)\r\n                        // and it works with subexpressions on the left as well:\r\n                        // (2 + 2)(a +) -> 4a\r\n                        // it does not work with following expressions:\r\n                        // (a+)1 -> err: null\r\n                        // but if you have an unclosed operator following the parenthesis it works:\r\n                        // (a)1/ -> 1/a\r\n                        // when there are multiple operators with missing arguments, the one with the highest precedence gets the value from in front of the parenthesis\r\n                        // 2(2+/2) -> 2 / 2 + 2 -> 3\r\n                        // this is probably a bug, but because it doesn't crash or throw, we need to find a way to simulate it\r\n\r\n                        let prevToken = getPrevNonWhitespaceToken();\r\n\r\n                        if (prevToken === null\r\n                            || prevToken instanceof OperatorToken\r\n                            || prevToken instanceof OpeningParenthesisToken\r\n                            || prevToken instanceof DollarSignToken\r\n                            || prevToken instanceof CommaToken) {\r\n\r\n                            // if there is no previous token or this parenthesis follows an operator,\r\n                            // the parenthesis starts a subexpression\r\n                            exprBuilderStack.push(new ExpressionBuilder(this._parsingCtx, true, token));\r\n\r\n                        } else if (prevToken instanceof UnquotedValueToken) {\r\n\r\n                            // if the previous token is an unquoted value token, interpret this as a function call\r\n                            // this should never happen, but the error exists as a sanity check\r\n                            throw new KodeSyntaxError(token, `Unquoted value followed by an opening parenthesis wasn't picked up as a function call.`);\r\n\r\n                        } else {\r\n\r\n                            // the parenthesis cannot follow any other token\r\n                            throw new KodeSyntaxError(token, `An opening parenthesis cannot follow a(n) ${prevToken.getName()}.`);\r\n\r\n                        }\r\n\r\n                    } else if (token instanceof CommaToken) {\r\n\r\n                        // a comma means the end of the current function argument\r\n\r\n                        // check if we are currently building a function call\r\n                        let lastExprBuilder = peekLastExprBuilder();\r\n\r\n                        if (lastExprBuilder instanceof FunctionCallBuilder) {\r\n\r\n                            // building a function call, let the builder handle the comma\r\n                            lastExprBuilder.nextArgument(token);\r\n\r\n                        } else {\r\n\r\n                            // not building a function call, the comma is invalid\r\n                            throw new KodeSyntaxError(token, `A comma cannot appear outside of function calls.`);\r\n\r\n                        }\r\n\r\n\r\n                    } else if (token instanceof ClosingParenthesisToken) {\r\n\r\n                        // a closing parenthesis means the end of the current subexpression\r\n\r\n                        // check if we have subexpressions\r\n                        if (exprBuilderStack.length <= 1) {\r\n\r\n                            // no subexpressions - the closing parenthesis is invalid\r\n                            throw new KodeSyntaxError(token, `Too many closing parentheses.`);\r\n\r\n                        } else {\r\n\r\n                            // pop the last expression bulilder from the stack and build it\r\n                            let evaluable = exprBuilderStack.pop()!.build(token);\r\n\r\n                            // add the built evaluable to the new last expression builder\r\n                            peekLastExprBuilder().addEvaluable(evaluable);\r\n\r\n                        }\r\n\r\n                    } else if (token instanceof DollarSignToken) {\r\n\r\n                        // a dollar sign token ends the current evaluable part\r\n\r\n                        // override the default pushing to buffer behaviour - we are resetting the buffer after this token\r\n                        skipPushingToBuffer = true;\r\n\r\n                        // check if there are unclosed subexpressions\r\n                        if (exprBuilderStack.length > 1) {\r\n\r\n                            // there are unclosed subexpressions, missing closing parentheses\r\n                            throw new KodeSyntaxError(token, `Unclosed parentheses (${exprBuilderStack.length - 1}).`);\r\n\r\n                        }\r\n\r\n                        // pop the root expression builder from the stack, build it\r\n                        let evaluable = exprBuilderStack.pop()!.build(token);\r\n\r\n                        // add the built evaluable directly to formula evaluables\r\n                        formulaEvaluables.push(evaluable);\r\n\r\n                        // switch the state back to plain text\r\n                        state = KodeineParserState.Default;\r\n\r\n                        // reset the buffer\r\n                        tokenBuffer = [];\r\n\r\n                    } else if (token instanceof UnclosedQuotedValueToken) {\r\n\r\n                        // an unclosed quoted value token causes the entire formula to be treated like plain text,\r\n                        // except the leading $ gets removed from the output.\r\n                        state = KodeineParserState.Default;\r\n\r\n                        // override the default behaviour - we'll reset the buffer\r\n                        // this does not really matter since an unclosed quoted value token should be the last token of any formula\r\n                        skipPushingToBuffer = true;\r\n\r\n                        if (tokenBuffer.length > 0) {\r\n\r\n                            // add the unclosed quoted value token to the output\r\n                            tokenBuffer.push(token);\r\n\r\n                            this._parsingCtx.sideEffects.warnings.push(\r\n                                new UnclosedQuotedValueWarning(...tokenBuffer)\r\n                            );\r\n\r\n                            // we read some plain text tokens before this point, add a plain text part\r\n                            formulaEvaluables.push(new KodeValue(\r\n                                tokenBuffer.slice(1).map(t => t.getSourceText()).join(''),\r\n                                new EvaluableSource(...tokenBuffer)\r\n                            ));\r\n\r\n                        }\r\n\r\n                        tokenBuffer = [];\r\n\r\n                        // there should be no more tokens after an unclosed quoted value token\r\n\r\n                    } else if (token instanceof WhitespaceToken) {\r\n\r\n                        // do nothing with whitespace, but don't throw UnrecognizedTokenError\r\n                        peekLastExprBuilder().addWhitespace(token);\r\n\r\n                    } else {\r\n\r\n                        // forgot to implement something, or the lexer produced an unexpected token\r\n                        throw new UnrecognizedTokenError(token);\r\n\r\n                    }\r\n\r\n                    if (!skipPushingToBuffer) {\r\n\r\n                        // the default behaviour was not overriden, so push the current token to the buffer\r\n                        tokenBuffer.push(token);\r\n\r\n                    }\r\n\r\n                } catch (err) {\r\n\r\n                    if (err instanceof KodeParsingError) {\r\n\r\n                        // catch parsing errors thrown when parsing from current token\r\n\r\n                        // log parsing error as a side effect\r\n                        this._parsingCtx.sideEffects.errors.push(err);\r\n\r\n                        // push the token that caused the error to buffer\r\n                        tokenBuffer.push(token);\r\n\r\n                        if (token instanceof DollarSignToken) {\r\n\r\n                            // error thrown when reading a dollar sign token\r\n                            // switch state to default\r\n                            state = KodeineParserState.Default;\r\n\r\n                        } else {\r\n\r\n                            // error was not thrown when reading a dollar sign token,\r\n                            // try to find a following dollar sign token\r\n\r\n                            let nextToken: FormulaToken;\r\n\r\n                            // read following tokens until EOF or a dollar sign token is encountered\r\n                            do {\r\n\r\n                                // consume a token\r\n                                nextToken = lexer.consume(1)[0];\r\n\r\n                                if (nextToken) {\r\n\r\n                                    // store in buffer\r\n                                    tokenBuffer.push(nextToken);\r\n\r\n                                    if (nextToken instanceof DollarSignToken) {\r\n\r\n                                        // encountered a dollar sign token\r\n                                        // switch state to default and continue parsing despite the parsing error\r\n                                        state = KodeineParserState.Default;\r\n                                        break;\r\n\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n                            while (!lexer.EOF() && nextToken && !(nextToken instanceof DollarSignToken))\r\n\r\n                        }\r\n\r\n                        // encountered either a dollar sign token or formula ended\r\n                        // add a broken evaluable to the formula - it will print an empty string\r\n                        formulaEvaluables.push(\r\n                            new BrokenEvaluable(\r\n                                new EvaluableSource(...tokenBuffer)\r\n                            )\r\n                        );\r\n\r\n                        // clear the token buffer\r\n                        tokenBuffer = [];\r\n\r\n                    } else {\r\n\r\n                        // rethrow other errors (crashes)\r\n                        throw err;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                // this should never happen\r\n                throw new Error('Invalid parser state.');\r\n\r\n            }\r\n        }\r\n\r\n        // we read all tokens the lexer had to offer\r\n\r\n        if (tokenBuffer.length > 0) {\r\n\r\n            if (state === KodeineParserState.Default) {\r\n\r\n                // we read some plain text tokens before this point, add a plain text part\r\n                formulaEvaluables.push(new KodeValue(\r\n\r\n                    tokenBuffer.map(t => t.getPlainTextOutput()).join(''),\r\n                    new EvaluableSource(...tokenBuffer)\r\n\r\n                ));\r\n\r\n            } else {\r\n\r\n                // we read an opening dollar sign, but not a closing one\r\n                // in this case, Kustom prints all tokens except the opening dollar sign as plain text\r\n\r\n                this._parsingCtx.sideEffects.warnings.push(\r\n                    new UnclosedDollarSignWarning(...tokenBuffer)\r\n                );\r\n\r\n                formulaEvaluables.push(new KodeValue(\r\n                    tokenBuffer.slice(1).map(t => t.getSourceText()).join(''),\r\n                    new EvaluableSource(...tokenBuffer)\r\n                ));\r\n\r\n            }\r\n        }\r\n\r\n        let formula = new Formula(formulaEvaluables);\r\n\r\n        return formula;\r\n    }\r\n\r\n}\r\n", "import {\r\n    IBinaryOperator, IKodeFunction, IUnaryOperator,\r\n    KodeParsingError,\r\n    FormulaToken,\r\n    NegationOperator,\r\n    ExponentiationOperator,\r\n    MultiplicationOperator,\r\n    DivisionOperator,\r\n    ModuloOperator,\r\n    AdditionOperator,\r\n    SubtractionOperator,\r\n    EqualityOperator,\r\n    InequalityOperator,\r\n    LesserThanOperator,\r\n    GreaterThanOperator,\r\n    LesserThanOrEqualToOperator,\r\n    GreaterThanOrEqualToOperator,\r\n    RegexMatchOperator,\r\n    LogicalOrOperator,\r\n    LogicalAndOperator,\r\n    IfFunction,\r\n    TcFunction,\r\n    MuFunction,\r\n    FlFunction,\r\n    GvFunction,\r\n    LiFunction,\r\n    AqFunction,\r\n    NcFunction,\r\n    NiFunction,\r\n    RmFunction,\r\n    CeFunction,\r\n    WgFunction,\r\n    WiFunction,\r\n    ShFunction,\r\n    BiFunction,\r\n    SiFunction,\r\n    MqFunction,\r\n    TfFunction,\r\n    BpFunction,\r\n    CmFunction,\r\n    BrFunction,\r\n    DfFunction,\r\n    MiFunction,\r\n    WfFunction,\r\n    UcFunction,\r\n    AiFunction,\r\n    FdFunction,\r\n    DpFunction,\r\n    TuFunction,\r\n    TsFunction,\r\n    CiFunction\r\n} from \"../kodeine.js\";\r\n\r\n/** \r\n * Exposes function and operator implementations. \r\n * {@link ParsingContextBuilder} provides convenient functions to construct an instance of this class.\r\n * @see {@link ParsingContextBuilder}\r\n */\r\nexport class ParsingContext {\r\n    \r\n    /** An object with function names as keys and implementations as values. */\r\n    private readonly _functions: Record<string, IKodeFunction>;\r\n\r\n    /** An object with unary operator symbols as keys and implementations as values. */\r\n    private readonly _unaryOperators: Record<string, IUnaryOperator>;\r\n\r\n    /** An object with binary operator symbols as keys and implementations as values. */\r\n    private readonly _binaryOperators: Record<string, IBinaryOperator>;\r\n\r\n    /** A collection of all unique operator symbols. */\r\n    private readonly _operatorSymbols: Set<string> = new Set<string>();\r\n\r\n    /** Side effects produced during the last parsing attempt. */\r\n    public sideEffects: ParsingSideEffects;\r\n\r\n    /**\r\n     * Constructs a {@link ParsingContext} with function and operator implementations.\r\n     * @param functions An object with function names as keys and implementations as values.\r\n     * @param unaryOperators An object with unary operator symbols as keys and implementations as values.\r\n     * @param binaryOperators An object with binary operator symbols as keys and implementations as values.\r\n     */\r\n    constructor(\r\n        functions: Record<string, IKodeFunction>,\r\n        unaryOperators: Record<string, IUnaryOperator>,\r\n        binaryOperators: Record<string, IBinaryOperator>\r\n    ) {\r\n\r\n        this._functions = functions;\r\n        this._unaryOperators = unaryOperators;\r\n        this._binaryOperators = binaryOperators;\r\n\r\n        // collect operator symbols \r\n\r\n        for (const opSymbol in unaryOperators)\r\n            this._operatorSymbols.add(opSymbol);\r\n\r\n        for (const opSymbol in binaryOperators)\r\n            this._operatorSymbols.add(opSymbol);\r\n\r\n        this.sideEffects = new ParsingSideEffects();\r\n    }\r\n\r\n    /**\r\n     * Finds a function implementation with a given name or `null` if it is not found.\r\n     * @param funcName The name of the function to find an implementation for.\r\n     * @returns The function implementation or `null`.\r\n     */\r\n    findFunction(funcName: string): IKodeFunction {\r\n        return this._functions[funcName] ?? null;\r\n    }\r\n\r\n    /**\r\n     * Finds a unary operator implementation with a given name or `null` if it is not found.\r\n     * @param symbol The symbol of the unary operator.\r\n     * @returns The operator implementation or `null`.\r\n     */\r\n    findUnaryOperator(symbol: string): IUnaryOperator {\r\n        return this._unaryOperators[symbol] ?? null;\r\n    }\r\n\r\n    /**\r\n     * Finds a binary operator implementation with a given name or `null` if it is not found.\r\n     * @param symbol The symbol of the binary operator.\r\n     * @returns The operator implementation or `null`.\r\n     */\r\n    findBinaryOperator(symbol: string): IBinaryOperator {\r\n        return this._binaryOperators[symbol] ?? null;\r\n    }\r\n\r\n    /** Returns an array of operator symbols, sorted by length, descending. */\r\n    getOperatorSymbolsLongestFirst(): string[] {\r\n        return Array.from(this._operatorSymbols).sort((a, b) => b.length - a.length);\r\n    }\r\n\r\n    /** Returns an array of function names. */\r\n    getFunctionNames(): string[] {\r\n        return Object.keys(this._functions);\r\n    }\r\n\r\n    clearSideEffects() {\r\n        this.sideEffects = new ParsingSideEffects();\r\n    }\r\n\r\n}\r\n\r\n/** A union of types that can be added to a parsing context. */\r\ntype ParsingContextItem = IKodeFunction | IUnaryOperator | IBinaryOperator;\r\n\r\n/** \r\n * A helper class to simplify creating {@link ParsingContext} instances.\r\n * @see {@link ParsingContext}\r\n */\r\nexport class ParsingContextBuilder {\r\n\r\n    /** An object with function names as keys and implementations as values. */\r\n    private readonly _functions: Record<string, IKodeFunction> = {};\r\n\r\n    /** An object with unary operator symbols as keys and implementations as values. */\r\n    private readonly _unaryOperators: Record<string, IUnaryOperator> = {};\r\n\r\n    /** An object with binary operator symbols as keys and implementations as values. */\r\n    private readonly _binaryOperators: Record<string, IBinaryOperator> = {};\r\n\r\n    /** Creates a parsing context builder without any functions or operators. */\r\n    constructor() { }\r\n\r\n    private _addFunction(func: IKodeFunction) {\r\n        this._functions[func.getName()] = func;\r\n    }\r\n\r\n    private _addUnaryOperator(operator: IUnaryOperator) {\r\n        this._unaryOperators[operator.getSymbol()] = operator;\r\n    }\r\n\r\n    private _addBinaryOperator(operator: IBinaryOperator) {\r\n        this._binaryOperators[operator.getSymbol()] = operator;\r\n    }\r\n\r\n    /** \r\n     * Adds an item to the parsing context. The item can be an instance or simply a class name.\r\n     * @param obj The item to add to the parsing context. Can be an instance or simply a class name.\r\n     * @returns This builder instance for call chaining.\r\n     * @example\r\n     * // add an instance:\r\n     * builder.add(new IfFunction());\r\n     * // add using class name:\r\n     * builder.add(IfFunction);\r\n     */\r\n    add(obj: (new () => ParsingContextItem) | ParsingContextItem): ParsingContextBuilder {\r\n\r\n        if (obj instanceof IKodeFunction)\r\n            this._addFunction(obj);\r\n        else if (obj instanceof IUnaryOperator)\r\n            this._addUnaryOperator(obj);\r\n        else if (obj instanceof IBinaryOperator)\r\n            this._addBinaryOperator(obj);\r\n        else\r\n            this.add(new obj());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds all items passed as arguments to the parsing context.\r\n     * @param objs The items to add.\r\n     * @returns This builder instance for call chaining.\r\n     * @see {@link add} for information about what objects can be added.\r\n     */\r\n    addAll(...objs: (new () => ParsingContextItem | ParsingContextItem)[]): ParsingContextBuilder {\r\n\r\n        objs.forEach(obj => {\r\n            try {\r\n                this.add(obj)\r\n            } catch (err) {\r\n                let a = obj;\r\n                throw err;\r\n            }\r\n        });\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds parsing context items from an imported module.\r\n     * @param moduleNamespace The namespace under which the module was imported (see example).\r\n     * @returns This builder instance for call chaining.\r\n     * @example\r\n     * // import a module with function implementations\r\n     * import * as Functions from \"./functions.js\";\r\n     * // add the module to the parsing context\r\n     * builder.addFromModule(Functions);\r\n     */\r\n    addFromModule(moduleNamespace: any): ParsingContextBuilder {\r\n\r\n        for (const className in moduleNamespace) {\r\n\r\n            let classFunc = moduleNamespace[className] as (new () => ParsingContextItem);\r\n\r\n            if (classFunc) {\r\n                try {\r\n                    this.add(classFunc);\r\n                } catch (err) {\r\n                    throw new Error(`Error when adding ${className} from module ${moduleNamespace.name}: ${err}. Perhaps you left an abstract class in the module?`);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds default context items to the parsing context.\r\n     * @returns This builder instance for call chaining.\r\n     */\r\n    addDefaults(): ParsingContextBuilder {\r\n\r\n        return this\r\n\r\n            // implemented operators\r\n            .addAll(\r\n                NegationOperator,\r\n                ExponentiationOperator,\r\n                MultiplicationOperator,\r\n                DivisionOperator,\r\n                ModuloOperator,\r\n                AdditionOperator,\r\n                SubtractionOperator,\r\n                EqualityOperator,\r\n                InequalityOperator,\r\n                LesserThanOperator,\r\n                GreaterThanOperator,\r\n                LesserThanOrEqualToOperator,\r\n                GreaterThanOrEqualToOperator,\r\n                RegexMatchOperator,\r\n                LogicalOrOperator,\r\n                LogicalAndOperator\r\n            )\r\n\r\n            // implemented functions\r\n            .addAll(\r\n                IfFunction,\r\n                TcFunction,\r\n                MuFunction,\r\n                FlFunction,\r\n                GvFunction\r\n            )\r\n\r\n            // unimplemented functions\r\n            .addAll(\r\n                LiFunction,\r\n                AqFunction,\r\n                NcFunction,\r\n                NiFunction,\r\n                WgFunction,\r\n                RmFunction,\r\n                CiFunction,\r\n                ShFunction,\r\n                WiFunction,\r\n                BiFunction,\r\n                SiFunction,\r\n                MqFunction,\r\n                TsFunction,\r\n                BpFunction,\r\n                CmFunction,\r\n                BrFunction,\r\n                DfFunction,\r\n                MiFunction,\r\n                WfFunction,\r\n                TfFunction,\r\n                UcFunction,\r\n                CeFunction,\r\n                AiFunction,\r\n                FdFunction,\r\n                DpFunction,\r\n                TuFunction\r\n            );\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a parsing context with all added items.\r\n     * @returns The built parsing context.\r\n     */\r\n    build(): ParsingContext {\r\n        return new ParsingContext(this._functions, this._unaryOperators, this._binaryOperators);\r\n    }\r\n\r\n    /** Shorthand for `new ParsingContextBuilder().addDefaults().build()`. */\r\n    static buildDefault(): ParsingContext {\r\n        return new ParsingContextBuilder()\r\n            .addDefaults()\r\n            .build();\r\n    }\r\n\r\n}\r\n\r\n/** Holds all side effects produced during parsing. */\r\nexport class ParsingSideEffects {\r\n\r\n    /** A list of warnings produced during parsing. */\r\n    public warnings: ParsingWarning[] = [];\r\n    public errors: KodeParsingError[] = [];\r\n\r\n}\r\n\r\n/** A warning produced during parsing. */\r\nexport class ParsingWarning {\r\n\r\n    /** The token this warning is related to. */\r\n    public tokens: FormulaToken[];\r\n\r\n    /** A message explaining the warning. */\r\n    public message: string;\r\n\r\n    /** \r\n     * Constructs a {@link ParsingWarning} for a token with a message.\r\n     * @param tokens The tokens this warning is related to.\r\n     * @param message A message explaining the warning.\r\n     */\r\n    constructor(message: string, ...tokens: FormulaToken[]) {\r\n        this.tokens = tokens;\r\n        this.message = message;\r\n    }\r\n\r\n}\r\n\r\n/** Warns about an unclosed dollar sign. */\r\nexport class UnclosedDollarSignWarning extends ParsingWarning {\r\n    constructor(...tokens: FormulaToken[]) {\r\n        super('Unclosed dollar sign. The $ will be ignored and everything after it will be printed as plain text.', ...tokens);\r\n    }\r\n}\r\n\r\n\r\nexport class UnclosedQuotedValueWarning extends ParsingWarning {\r\n    constructor(...tokens: FormulaToken[]) {\r\n        super('Unclosed quotation mark. The $ that started this evaluable part will be ignored, and everything after it will be printed as plain text.', ...tokens);\r\n    }\r\n}", "// this file is a module intended to be used as the one-stop shop for importing every class in kodeine\r\n// idea from:\r\n// https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de\r\n\r\nexport * from './abstractions.js';\r\nexport * from './errors.js';\r\nexport * from './string-char-reader.js';\r\n\r\nexport * from './evaluation/evaluation-context.js';\r\nexport * from './evaluation/evaluation-tree.js';\r\n\r\nexport * from './evaluation/evaluables/evaluable.js';\r\nexport * from './evaluation/evaluables/kode-value.js';\r\nexport * from './evaluation/evaluables/unary-operation.js';\r\nexport * from './evaluation/evaluables/binary-operation.js';\r\nexport * from './evaluation/evaluables/function-call.js';\r\nexport * from './evaluation/evaluables/expression.js';\r\nexport * from './evaluation/evaluables/formula.js';\r\nexport * from './evaluation/evaluables/broken-evaluable.js';\r\n\r\nexport * from './evaluation/implementations/base/kode-function-with-modes.js';\r\nexport * from './evaluation/implementations/functions/unimplemented-functions.js';\r\nexport * from './evaluation/implementations/functions/fl-function.js';\r\nexport * from './evaluation/implementations/functions/gv-function.js';\r\nexport * from './evaluation/implementations/functions/if-function.js';\r\nexport * from './evaluation/implementations/functions/mu-function.js';\r\nexport * from './evaluation/implementations/functions/tc-function.js';\r\nexport * from './evaluation/implementations/functions/df-function.js';\r\n\r\nexport * from './evaluation/implementations/operators/unary-operators.js';\r\nexport * from './evaluation/implementations/base/two-mode-binary-operator.js';\r\nexport * from './evaluation/implementations/operators/binary-operators.js';\r\n\r\nexport * from './kodeine-lexer/formula-token.js';\r\nexport * from './kodeine-lexer/formula-tokens.js';\r\nexport * from './kodeine-lexer/kodeine-lexer.js';\r\n\r\nexport * from './kodeine-parser/expressions/i-expression-builder.js';\r\nexport * from './kodeine-parser/expressions/expression-builder.js';\r\nexport * from './kodeine-parser/expressions/function-call-builder.js';\r\nexport * from './kodeine-parser/expressions/function-occurence.js';\r\nexport * from './kodeine-parser/expressions/operator-occurences.js';\r\nexport * from './kodeine-parser/kodeine-parser.js';\r\nexport * from './kodeine-parser/parsing-context.js';\r\n", "import { FormulaToken } from \"../kodeine.js\";\r\n\r\n/** A base class for simple tokens extracted from a formula source text. */\r\nexport abstract class SimpleToken extends FormulaToken {\r\n\r\n    /** The source text of this token. */\r\n    protected readonly _text: string;\r\n\r\n    /** The index of the first character of this token in the formula source text. */\r\n    protected readonly _startIndex: number;\r\n\r\n    /**\r\n     * Constructs a base token using a piece of the formula source text and its start index.\r\n     * @param text The piece of the formula source text this token represents.\r\n     * @param startIndex The start index of the piece in the formula source text.\r\n     */\r\n    constructor(text: string, startIndex: number) {\r\n        super();\r\n        this._text = text;\r\n        this._startIndex = startIndex;\r\n    }\r\n\r\n    /** Returns the source text of this token. */\r\n    getSourceText(): string {\r\n        return this._text;\r\n    }\r\n\r\n    /** Returns the index of the first character of this token in the formula source text. */\r\n    getStartIndex(): number {\r\n        return this._startIndex;\r\n    }\r\n\r\n    /** Returns the index of the first character after this token in the formula source text. */\r\n    getEndIndex(): number {\r\n        return this._startIndex + this._text.length;\r\n    }\r\n\r\n    /** Returns a human-readable name of the token (\"comma\", \"operator\" etc.). */\r\n    abstract getName(): string;\r\n}\r\n\r\n/** A token containing plain text (formula text not wrapped in dollar signs). */\r\nexport class PlainTextToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs a plain text token using a piece of the formula source text and its start index.\r\n     * @param text The piece of the formula source text this token represents.\r\n     * @param startIndex The start index of the piece in the formula source text.\r\n     */\r\n    constructor(text: string, startIndex: number) {\r\n        super(text, startIndex);\r\n    }\r\n\r\n    getName(): string { return 'plain text'; }\r\n\r\n}\r\n\r\n/** \r\n * A token representing two consecutive dollar signs ($$) within a plain text part of a formula.\r\n * Treated like a single plain text dollar sign ($). \r\n */\r\nexport class EscapedDollarSignToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs an escaped dollar sign token at a given position in the formula source text.\r\n     * @param startIndex The start index of the token in the formula source text.\r\n     */\r\n    constructor(startIndex: number) {\r\n        super('$$', startIndex);\r\n    }\r\n\r\n    getName(): string { return 'escaped dollar sign'; }\r\n\r\n    getPlainTextOutput(): string {\r\n        return '$';\r\n    }\r\n\r\n}\r\n\r\n/** \r\n * A token representing a dollar sign ($) that is not followed by another dollar sign.\r\n * Indicates the beginning or end of an evaluated part of a formula.\r\n */\r\nexport class DollarSignToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs a dollar sign token at a given position in the formula source text.\r\n     * @param startIndex The start index of the token in the formula source text.\r\n     */\r\n    constructor(startIndex: number) {\r\n        super('$', startIndex);\r\n    }\r\n\r\n    getName(): string { return 'dollar sign'; }\r\n\r\n}\r\n\r\n/** A token representing one or more consecutive whitespace characters within an evaluated part of a formula. */\r\nexport class WhitespaceToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs a whitespace token using a piece of the formula source text and its start index.\r\n     * @param text The piece of the formula source text this token represents.\r\n     * @param startIndex The start index of the piece in the formula source text.\r\n     */\r\n    constructor(text: string, startIndex: number) {\r\n        super(text, startIndex);\r\n    }\r\n\r\n    getName(): string { return 'whitespace'; }\r\n\r\n}\r\n\r\n/**\r\n * A token representing an opening parenthesis within an evaluated part of a formula.\r\n * Indicates the beginning of a subexpression, or the beginning of a function call, if preceded by an unquoted value token.\r\n */\r\nexport class OpeningParenthesisToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs an opening parenthesis token at a given position in the formula source text.\r\n     * @param startIndex The start index of the token in the formula source text.\r\n     */\r\n    constructor(startIndex: number) {\r\n        super('(', startIndex);\r\n    }\r\n\r\n    getName(): string { return 'opening parenthesis'; }\r\n\r\n}\r\n\r\n/**\r\n * A token representing a closing parenthesis within an evaluated part of a formula.\r\n * Indicates the end of the current subexpression or function call.\r\n */\r\nexport class ClosingParenthesisToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs a closing parenthesis token at a given position in the formula source text.\r\n     * @param startIndex The start index of the token in the formula source text.\r\n     */\r\n    constructor(startIndex: number) {\r\n        super(')', startIndex);\r\n    }\r\n\r\n    getName(): string { return 'closing parenthesis'; }\r\n\r\n}\r\n\r\n/**\r\n * A token representing a comma within an evaluated part of a formula.\r\n * Indicates the end of the current function call argument.\r\n */\r\nexport class CommaToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs a comma token at a given position in the formula source text.\r\n     * @param startIndex The start index of the token in the formula source text.\r\n     */\r\n    constructor(startIndex: number) {\r\n        super(',', startIndex);\r\n    }\r\n\r\n    getName(): string { return 'comma'; }\r\n\r\n}\r\n\r\n/**\r\n * A token representing a quotation mark within an evaluated part of a formula that was not closed.\r\n * Encountering this token causes the tokens read since the start of the evaluated part of the formula to be printed as plain text.\r\n */\r\nexport class UnclosedQuotedValueToken extends FormulaToken {\r\n\r\n    /** The text following the opening quotation mark that was not closed. */\r\n    private readonly _textFollowingQuotationMark: string;\r\n\r\n    /** The index of the opening quotation mark in the formula source text. */\r\n    private readonly _quotationMarkIndex: number;\r\n\r\n    /**\r\n     * Constructs an unclosed quoted value token using a piece of the formula source text following an opening quotation mark \r\n     * and the index of the quotation mark in the formula source text.\r\n     * @param textFollowingQuotationMark The piece of the formula source text following the opening quotation mark.\r\n     * @param quotationMarkIndex The index of the opening quotation mark in the formula source text.\r\n     */\r\n    constructor(textFollowingQuotationMark: string, quotationMarkIndex: number) {\r\n        super();\r\n        this._textFollowingQuotationMark = textFollowingQuotationMark;\r\n        this._quotationMarkIndex = quotationMarkIndex;\r\n    }\r\n\r\n    getStartIndex(): number {\r\n        return this._quotationMarkIndex;\r\n    }\r\n\r\n    getEndIndex(): number {\r\n        return this._quotationMarkIndex + 1 + this._textFollowingQuotationMark.length;\r\n    }\r\n\r\n    getSourceText() { return `\"${this._textFollowingQuotationMark}`; }\r\n\r\n    getName(): string { return 'unclosed quoted value'; }\r\n}\r\n\r\n\r\n/** A token representing a quoted value within an evaluated part of a formula. */\r\nexport class QuotedValueToken extends FormulaToken {\r\n\r\n    /** The text between the quotation marks. */\r\n    private readonly _innerText: string;\r\n    private readonly _openingQuotationMarkIndex: number;\r\n\r\n    /**\r\n     * Constructs a quoted value token using its inner text and the index of the opening quotation mark.\r\n     * @param valueText The text between the quotation marks. \r\n     * @param openingQuotationMarkIndex The index of the opening quotation mark in the formula source text.\r\n     */\r\n    constructor(valueText: string, openingQuotationMarkIndex: number) {\r\n        super();\r\n        this._innerText = valueText;\r\n        this._openingQuotationMarkIndex = openingQuotationMarkIndex;\r\n    }\r\n\r\n    /** The string value of this token. */\r\n    getValue(): string {\r\n        return this._innerText;\r\n    }\r\n\r\n    getStartIndex(): number {\r\n        return this._openingQuotationMarkIndex;\r\n    }\r\n\r\n    getEndIndex(): number {\r\n        return this._openingQuotationMarkIndex + 1 + this._innerText.length + 1;\r\n    }\r\n\r\n    getSourceText() { return `\"${this._innerText}\"`; }\r\n\r\n    getName(): string { return 'quoted value'; }\r\n}\r\n\r\n/** A token representing an unquoted value within an evaluated part of a formula. */\r\nexport class UnquotedValueToken extends SimpleToken {\r\n\r\n    constructor(text: string, startIndex: number) {\r\n        super(text, startIndex);\r\n    }\r\n\r\n    /** The string value of this token. */\r\n    getValue(): string {\r\n        return this._text;\r\n    }\r\n\r\n    getName(): string { return 'unquoted value'; }\r\n}\r\n\r\n/** A token representing an operator within an evaluated part of a formula. */\r\nexport class OperatorToken extends SimpleToken {\r\n\r\n    /**\r\n     * Constructs an operator token from its symbol and the starting index of the symbol in the formula source text.\r\n     * @param symbol The symbol of this operator. \r\n     * @param startIndex The starting index of the symbol in the formula source text.\r\n     */\r\n    constructor(symbol: string, startIndex: number) {\r\n        super(symbol, startIndex);\r\n    }\r\n\r\n    /** Returns the symbol of this operator. */\r\n    getSymbol() { return this._text; }\r\n\r\n    /** \r\n     * Checks if this operator's symbol is another symbol.\r\n     * @param symbol The symbol to check this operator's symbol against.\r\n     */\r\n    is(symbol: string): boolean { return this._text === symbol; }\r\n\r\n    getName(): string { return 'operator'; }\r\n}\r\n", null, null, null, null, null, null, null, "import * as vscode from 'vscode';\r\nimport {\r\n    ParsingContext, ParsingContextBuilder,\r\n    KodeineParser,\r\n    EvaluationContext,\r\n    Formula,\r\n    FormulaEvaluationTree\r\n} from '../../engine/dist.node/kodeine.js';\r\nimport { EvaluationTreeDocumentManager } from './evaluation-tree-document-manager.js';\r\nimport { EvaluationStepsTextDocumentContentProvider } from './evaluation-steps-text-document-content-provider.js';\r\nimport { EvaluationTreeDataProvider } from './evaluation-tree-data-provider.js';\r\nimport { GlobalDocumentManager } from './global-document-manager.js';\r\n\r\nlet outChannel: vscode.OutputChannel;\r\nlet diagColl: vscode.DiagnosticCollection;\r\n\r\nlet parsingCtx: ParsingContext;\r\nlet parser: KodeineParser;\r\nlet evalCtx: EvaluationContext;\r\nlet lastFormula: Formula | null;\r\n\r\nlet globalDocManager: GlobalDocumentManager;\r\nlet evalTreeDocManager: EvaluationTreeDocumentManager;\r\n\r\n/** Activates the extension. */\r\nexport function activate(extCtx: vscode.ExtensionContext) {\r\n\r\n    // prepare kodeine engine\r\n    parsingCtx = ParsingContextBuilder.buildDefault();\r\n    parser = new KodeineParser(parsingCtx);\r\n    evalCtx = new EvaluationContext();\r\n\r\n    // enable evaluation tree building in the context\r\n    evalCtx.buildEvaluationTree = true;\r\n\r\n\r\n    // create an output channel for formula results\r\n    outChannel = vscode.window.createOutputChannel('Formula Result');\r\n    extCtx.subscriptions.push(outChannel); // register it as disposable\r\n    outChannel.show(true); // reveal the output channel in the UI\r\n\r\n\r\n    // create a diagnostic collection for errors and warnings\r\n    diagColl = vscode.languages.createDiagnosticCollection('Formula diagnostics');\r\n    extCtx.subscriptions.push(diagColl); // register it as disposable\r\n\r\n\r\n    extCtx.subscriptions.push(\r\n\r\n        // register commands\r\n        vscode.commands.registerCommand('kodeine.formulaResult', command_formulaResult),\r\n\r\n        // listen to document-related events\r\n        vscode.window.onDidChangeActiveTextEditor(ev => onSomethingDocumentRelated(ev?.document)),\r\n        vscode.workspace.onDidChangeTextDocument(ev => onSomethingDocumentRelated(ev.document)),\r\n        vscode.workspace.onDidOpenTextDocument(doc => onSomethingDocumentRelated(doc))\r\n\r\n    );\r\n\r\n\r\n    // initialize a global document manager to handle globals\r\n    globalDocManager = new GlobalDocumentManager(\r\n        extCtx, \r\n        parsingCtx.getOperatorSymbolsLongestFirst(),\r\n        parsingCtx.getFunctionNames()\r\n    );\r\n\r\n    // react to globals changing\r\n    globalDocManager.onGlobalAdded(globalDocument => evalCtx.globals.set(globalDocument.globalName, parser.parse(globalDocument.doc.getText())));\r\n    globalDocManager.onGlobalRemoved(globalDocument => evalCtx.globals.delete(globalDocument.globalName));\r\n    globalDocManager.onGlobalsCleared(() => evalCtx.globals.clear());\r\n\r\n\r\n    // initialize an evaluation tree document manager to handle evaluation trees\r\n    evalTreeDocManager = new EvaluationTreeDocumentManager(extCtx);\r\n\r\n\r\n    // initialize with active editor\r\n    onSomethingDocumentRelated(vscode.window.activeTextEditor?.document);\r\n\r\n}\r\n\r\n/** Should be called when a text document changes, is opened, is activated etc. */\r\nfunction onSomethingDocumentRelated(document?: vscode.TextDocument) {\r\n\r\n    if (\r\n        document\r\n        && document.languageId === 'kode'  // only evaluate kode documents\r\n        && document.uri.scheme !== EvaluationStepsTextDocumentContentProvider.scheme // don't evaluate evaluation steps\r\n    ) {\r\n\r\n        evaluateToOutput(document);\r\n\r\n    }\r\n}\r\n\r\n/** Evaluates a given kode document to the formula result output channel. */\r\nfunction evaluateToOutput(document: vscode.TextDocument) {\r\n\r\n    // create a list of diagnostics (warnings, errors etc.) that will replace the current list for the evaluated document\r\n    let diags: vscode.Diagnostic[] = [];\r\n\r\n    // get formula text from the document\r\n    let formulaText = document.getText();\r\n\r\n    try {\r\n\r\n        // parse the formula text into an evaluable formula\r\n        lastFormula = parser.parse(formulaText);\r\n\r\n        // clear eval side effects first\r\n        evalCtx.clearSideEffects();\r\n\r\n        // try to get a global for the current document\r\n        let globalName = globalDocManager.getGlobalNameFor(document);\r\n\r\n        if (globalName) {\r\n\r\n            // we are evaluating a document that is a global\r\n            // add this global's name to the global name chain\r\n            // the chain is there to prevent infinite reference loops\r\n            evalCtx.sideEffects.globalNameStack.push(globalName);\r\n\r\n            // store the parsed formula in the global\r\n            evalCtx.globals.set(globalName, lastFormula);\r\n\r\n        }\r\n\r\n        // evaluate the parsed formula\r\n        let result = lastFormula.evaluate(evalCtx);\r\n\r\n        // count how many parsing and evaluation errors popped up\r\n        let errCount = parsingCtx.sideEffects.errors.length + evalCtx.sideEffects.errors.length;\r\n\r\n        if (errCount > 0) {\r\n\r\n            // at least one error encountered, merge them in order of appearance, one per line, and show in output\r\n            let errorMessages = [];\r\n\r\n            // parsing error index, evaluation error index\r\n            let pi = 0; let ei = 0;\r\n\r\n            for (let i = 0; i < errCount; i++) {\r\n\r\n                if (\r\n                    pi < parsingCtx.sideEffects.errors.length\r\n                    && (\r\n                        ei >= evalCtx.sideEffects.errors.length\r\n                        || parsingCtx.sideEffects.errors[pi].token.getStartIndex() < evalCtx.sideEffects.errors[ei].evaluable.source!.getStartIndex()\r\n                    )\r\n                ) {\r\n\r\n                    // parsing index is in range of parsing error list and current parsing error starts earlier than current eval error\r\n                    errorMessages.push(parsingCtx.sideEffects.errors[pi].message);\r\n                    pi++\r\n\r\n                } else {\r\n\r\n                    // parsing index out of range of parsing error list or current eval error starts earlier than current parsing error\r\n                    errorMessages.push(evalCtx.sideEffects.errors[ei].message);\r\n                    ei++\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (result.text) {\r\n\r\n                // there is a result besides the error messages\r\n                outChannel.replace(`${result.text}\\n\\nFormula contains ${errCount} error${errCount === 1 ? '' : 's'}:\\n${errorMessages.join('\\n')}`);\r\n\r\n            } else {\r\n\r\n                // no result, just error messages\r\n                outChannel.replace(errorMessages.join('\\n'));\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            // no errors encountered, simply output the result\r\n            outChannel.replace(result.text);\r\n\r\n        }\r\n\r\n    } catch (err: any) {\r\n\r\n        // unexpected error, print to output\r\n        outChannel.replace('kodeine crashed: ' + err?.toString());\r\n\r\n        // since we crashed, there is no formula to show in the tree view\r\n        lastFormula = null;\r\n\r\n    }\r\n\r\n    if (parsingCtx.sideEffects.warnings.length > 0) {\r\n\r\n        // got some warnings, convert to diags\r\n        parsingCtx.sideEffects.warnings.forEach(warning => {\r\n\r\n            diags.push({\r\n                severity: vscode.DiagnosticSeverity.Warning,\r\n                range: new vscode.Range(\r\n                    document.positionAt(warning.tokens[0].getStartIndex()),\r\n                    document.positionAt(warning.tokens[warning.tokens.length - 1].getEndIndex())\r\n                ),\r\n                message: warning.message,\r\n                code: '', source: ''\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    if (parsingCtx.sideEffects.errors.length > 0) {\r\n\r\n        // got some errors, convert to diags\r\n        parsingCtx.sideEffects.errors.forEach(error => {\r\n\r\n            diags.push({\r\n                severity: vscode.DiagnosticSeverity.Error,\r\n                range: new vscode.Range(\r\n                    document.positionAt(error.token.getStartIndex()),\r\n                    document.positionAt(error.token.getEndIndex())\r\n                ),\r\n                message: error.message,\r\n                code: '', source: ''\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    if (evalCtx.sideEffects.warnings.length > 0) {\r\n\r\n        // got some warnings, convert to diags\r\n        evalCtx.sideEffects.warnings.forEach(warning => {\r\n\r\n            diags.push({\r\n                severity: vscode.DiagnosticSeverity.Warning,\r\n                range: new vscode.Range(\r\n                    document.positionAt(warning.evaluable.source!.getStartIndex()),\r\n                    document.positionAt(warning.evaluable.source!.getEndIndex())\r\n                ),\r\n                message: warning.message,\r\n                code: '', source: ''\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    if (evalCtx.sideEffects.errors.length > 0) {\r\n\r\n        // got some errors, convert to diags\r\n        evalCtx.sideEffects.errors.forEach(error => {\r\n\r\n            diags.push({\r\n                severity: vscode.DiagnosticSeverity.Error,\r\n                range: new vscode.Range(\r\n                    document.positionAt(error.evaluable.source!.getStartIndex()),\r\n                    document.positionAt(error.evaluable.source!.getEndIndex())\r\n                ),\r\n                message: error.message,\r\n                code: '', source: ''\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    // apply the created list to the problems panel\r\n    diagColl.set(vscode.window.activeTextEditor!.document.uri, diags);\r\n\r\n    // refresh evaluation tree\r\n    evalTreeDocManager.updateEvaluationTreeFor(document, evalCtx.sideEffects.lastEvaluationTreeNode as FormulaEvaluationTree);\r\n\r\n}\r\n\r\nfunction command_formulaResult() {\r\n    outChannel.show(true);\r\n}\r\n", "import * as vscode from 'vscode';\r\nimport { FormulaEvaluationTree } from '../../engine/dist.node/kodeine.js';\r\nimport { EvaluationStepsTextDocumentContentProvider } from './evaluation-steps-text-document-content-provider.js';\r\nimport { EvaluationTreeDataProvider } from './evaluation-tree-data-provider.js';\r\n\r\n/** Keeps track of evaluation trees for formula source documents. */\r\nexport class EvaluationTreeDocumentManager {\r\n\r\n    /** The id of the view to register the {@link _evalTreeDataProvider} in. */\r\n    public static readonly evalTreeViewId = 'formulaEvaluationTree';\r\n    \r\n    /** A map between source documents and their latest evaluation trees. */\r\n    private readonly _sourceDocToEvalTreeMap = new Map<vscode.TextDocument, FormulaEvaluationTree>();\r\n    /** A {@link vscode.TreeDataProvider} for displaying the evaluation tree view UI. */\r\n    private readonly _evalTreeDataProvider = new EvaluationTreeDataProvider();\r\n    /** A {@link vscode.TextDocumentContentProvider} for displaying virtual documents with evaluation steps. */\r\n    private readonly _evalStepsTextDocContentProvider = new EvaluationStepsTextDocumentContentProvider();\r\n\r\n    constructor(extCtx: vscode.ExtensionContext) {\r\n\r\n        this.initCommands(extCtx);\r\n        this.initEvalTreeView(extCtx);\r\n        this.initEvalStepsTextDocContentProvider(extCtx);\r\n        this.initEvents(extCtx);\r\n\r\n    }\r\n\r\n    initCommands(extCtx: vscode.ExtensionContext) {\r\n\r\n        // register commands from this._commands\r\n        for (const commandName in this._commands) {\r\n            extCtx.subscriptions.push(\r\n                vscode.commands.registerCommand(`kodeine.${commandName}`, this._commands[commandName])\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    initEvalTreeView(extCtx: vscode.ExtensionContext) {\r\n\r\n        // register the formula tree view data provider\r\n        extCtx.subscriptions.push(\r\n            vscode.window.registerTreeDataProvider(EvaluationTreeDocumentManager.evalTreeViewId, this._evalTreeDataProvider)\r\n        );\r\n\r\n    }\r\n\r\n    initEvalStepsTextDocContentProvider(extCtx: vscode.ExtensionContext) {\r\n\r\n        extCtx.subscriptions.push(\r\n            vscode.workspace.registerTextDocumentContentProvider(\r\n                EvaluationStepsTextDocumentContentProvider.scheme,\r\n                this._evalStepsTextDocContentProvider\r\n            )\r\n        )\r\n\r\n    }\r\n\r\n    initEvents(extCtx: vscode.ExtensionContext) {\r\n\r\n        extCtx.subscriptions.push(\r\n            vscode.workspace.onDidCloseTextDocument(doc => this.onDidCloseTextDocument(doc))\r\n        );\r\n\r\n    }\r\n\r\n\r\n    // EVENTS\r\n\r\n    onDidCloseTextDocument(doc: vscode.TextDocument): any {\r\n\r\n        if (\r\n            doc.languageId === 'kode'\r\n            && doc.uri.scheme === EvaluationStepsTextDocumentContentProvider.scheme\r\n        ) {\r\n\r\n            this.removeEvaluationTreeFor(doc);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // KEEPING TRACK OF EVALUATION TREES\r\n\r\n    /** \r\n     * Updates the evaluation tree for a given source document.\r\n     * Also updates evaluation steps documents and the evaluation steps tree view.\r\n     */\r\n    updateEvaluationTreeFor(doc: vscode.TextDocument, tree: FormulaEvaluationTree) {\r\n\r\n        this._sourceDocToEvalTreeMap.set(doc, tree);\r\n        this._evalStepsTextDocContentProvider.updateEvaluationTreeFor(doc, tree);\r\n        this._evalTreeDataProvider.setEvaluationTree(tree);\r\n\r\n    }\r\n\r\n    /** \r\n     * Removes the evaluation tree for a given source document.\r\n     * Also removes the evaluation tree from the {@link _evalStepsTextDocContentProvider}.\r\n     * Intended to be used after the formula source document was closed and keeping the evaluation tree is no longer necessary.\r\n     */\r\n    removeEvaluationTreeFor(doc: vscode.TextDocument) {\r\n\r\n        this._sourceDocToEvalTreeMap.delete(doc);\r\n        this._evalStepsTextDocContentProvider.removeEvaluationTreeFor(doc)\r\n\r\n    }\r\n\r\n\r\n    // COMMANDS\r\n\r\n    private readonly _commands: Record<string, (...args: any) => any> = {\r\n\r\n        showEvaluationSteps: () => {\r\n\r\n            if (\r\n                vscode.window.activeTextEditor?.document.languageId === 'kode'\r\n                && vscode.window.activeTextEditor.document.uri.scheme !== EvaluationStepsTextDocumentContentProvider.scheme\r\n            ) {\r\n\r\n                let sourceDoc = vscode.window.activeTextEditor!.document;\r\n                let stepsUri = this._evalStepsTextDocContentProvider.getStepsDocumentUriFor(sourceDoc);\r\n\r\n                vscode.workspace.openTextDocument(stepsUri)\r\n                    .then(doc => vscode.languages.setTextDocumentLanguage(doc, 'kode'))\r\n                    .then(doc => vscode.window.showTextDocument(doc, {\r\n                        viewColumn: vscode.ViewColumn.Beside,\r\n                        preserveFocus: true,\r\n                        preview: false\r\n                    }));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n} ", "import * as vscode from 'vscode';\r\n\r\nimport { FormulaEvaluationTree } from '../../engine/dist.node/kodeine.js';\r\n\r\n/** Handles printing evaluation steps for formula source documents. */\r\nexport class EvaluationStepsTextDocumentContentProvider implements vscode.TextDocumentContentProvider {\r\n    \r\n    /** The scheme for virtual documents containing evaluation steps. */\r\n    static readonly scheme: string = 'formulaevaluationsteps';\r\n\r\n    /** An event emitter for {@link onDidChange}. */\r\n    private _onDidChangeEmitter = new vscode.EventEmitter<vscode.Uri>();\r\n    public onDidChange = this._onDidChangeEmitter.event;\r\n\r\n    /** Maps source URIs (stringified) to their latest evaluation trees. */\r\n    private readonly _sourceUriToEvaluationTreeMap = new Map<string, FormulaEvaluationTree>();\r\n\r\n    /** Extracts a source document URI from the URI of a steps document. */\r\n    private _getSourceDocUriFrom(stepsUri: vscode.Uri): vscode.Uri {\r\n        return vscode.Uri.parse(decodeURIComponent(stepsUri.query.split('=')[1]))\r\n    }\r\n\r\n    /** Consumed by vscode. Returns a string containing the evaluation steps for a formula source document passed in {@link stepsUri}. */\r\n    provideTextDocumentContent(stepsUri: vscode.Uri, token: vscode.CancellationToken): vscode.ProviderResult<string> {\r\n\r\n        let sourceUriString = this._getSourceDocUriFrom(stepsUri).toString();\r\n\r\n        let evaluationTree = this._sourceUriToEvaluationTreeMap.get(sourceUriString);\r\n\r\n        return evaluationTree?.printEvaluationSteps() ?? '';\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns an evaluation steps document URI for a given formula source document.\r\n     * @param sourceDoc The formula source document.\r\n     * @returns A steps document URI for the given source document.\r\n     */\r\n    getStepsDocumentUriFor(sourceDoc: vscode.TextDocument): vscode.Uri {\r\n\r\n        return vscode.Uri.parse(`${EvaluationStepsTextDocumentContentProvider.scheme}:${sourceDoc.fileName}.steps?for=${encodeURIComponent(sourceDoc.uri.toString())}`);\r\n\r\n    }\r\n\r\n    /**\r\n     * Overwrites the latest evaluation tree for a given formula source document.\r\n     * @param sourceDoc The formula source document to update the evaluation tree for.\r\n     * @param tree The latest evaluation tree for the formula source document.\r\n     */\r\n    updateEvaluationTreeFor(sourceDoc: vscode.TextDocument, tree: FormulaEvaluationTree): void {\r\n\r\n        this._sourceUriToEvaluationTreeMap.set(sourceDoc.uri.toString(), tree);\r\n        this._onDidChangeEmitter.fire(this.getStepsDocumentUriFor(sourceDoc));\r\n\r\n    }\r\n\r\n    /**\r\n     * Removes the evaluation tree for a given formula source document.\r\n     * Intended to be used after the formula source document was closed and keeping the evaluation tree is no longer necessary.\r\n     * @param sourceDoc The source document to remove the evaluation tree for.\r\n     */\r\n    removeEvaluationTreeFor(sourceDoc: vscode.TextDocument): void {\r\n        this._sourceUriToEvaluationTreeMap.delete(sourceDoc.uri.toString());\r\n    }\r\n\r\n}", "import * as vscode from 'vscode';\r\nimport {\r\n    FormulaEvaluationTreeNode,\r\n    Literal,\r\n    FormulaEvaluationTree,\r\n    EvaluatedUnaryOperation,\r\n    EvaluatedBinaryOperation,\r\n    EvaluatedFunctionCall,\r\n    EvaluatedExpression\r\n} from '../../engine/dist.node/kodeine.js';\r\n\r\n/** An adapter between a {@link FormulaEvaluationTree} and vscode's tree view. */\r\nexport class EvaluationTreeDataProvider implements vscode.TreeDataProvider<FormulaEvaluationTreeNode> {\r\n\r\n    /** The evaluation tree currently being displayed. */\r\n    private _evaluationTree: FormulaEvaluationTree | null = null;\r\n\r\n    /** An event emitter for {@link onDidChangeTreeData}. */\r\n    private _onDidChangeTreeData = new vscode.EventEmitter<FormulaEvaluationTreeNode | undefined | void>();\r\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n\r\n    getChildren(element?: FormulaEvaluationTreeNode): vscode.ProviderResult<FormulaEvaluationTreeNode[]> {\r\n\r\n        if (!element) {\r\n\r\n            if (this._evaluationTree) {\r\n\r\n                return [this._evaluationTree];\r\n\r\n            } else {\r\n\r\n                return undefined;\r\n\r\n            }\r\n\r\n        } else if (element instanceof FormulaEvaluationTree) {\r\n\r\n            return element.parts;\r\n\r\n        } else if (element instanceof EvaluatedUnaryOperation) {\r\n\r\n            return [element.arg];\r\n\r\n        } else if (element instanceof EvaluatedBinaryOperation) {\r\n\r\n            return [element.argA, element.argB];\r\n\r\n        } else if (element instanceof EvaluatedFunctionCall) {\r\n\r\n            return element.args;\r\n\r\n        } else if (element instanceof EvaluatedExpression) {\r\n\r\n            return [element.child];\r\n\r\n        } else {\r\n\r\n            return undefined;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    getTreeItem(element: FormulaEvaluationTreeNode): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n\r\n        let treeItem = new vscode.TreeItem(\r\n            `${element.result.text}`,\r\n            element instanceof Literal\r\n                ? vscode.TreeItemCollapsibleState.None\r\n                : vscode.TreeItemCollapsibleState.Collapsed\r\n        );\r\n\r\n        treeItem.description = element.getDescription();\r\n\r\n        return treeItem;\r\n    }\r\n\r\n    /** Sets the evaluation tree to be displayed and notifies vscode that it should update the tree view. */\r\n    setEvaluationTree(evaluationTree: FormulaEvaluationTree) {\r\n        this._evaluationTree = evaluationTree;\r\n        this._onDidChangeTreeData.fire(undefined);\r\n    }\r\n\r\n}", "import * as vscode from 'vscode';\r\nimport { BidirectionalMap } from './bidirectional-map.js';\r\nimport { EvaluationStepsTextDocumentContentProvider } from './evaluation-steps-text-document-content-provider.js';\r\nimport { GlobalTreeDataProvider } from './global-tree-data-provider.js';\r\n\r\n/** A helper type containing a related global name and its source document. */\r\nexport type GlobalDocument = { globalName: string, doc: vscode.TextDocument };\r\n\r\n/** Keeps track of global variables and their source documents. */\r\nexport class GlobalDocumentManager {\r\n\r\n    /** Duration of a status bar message, in ms. */\r\n    public static readonly statusBarMessageTimeout = 5000;\r\n    /** The id of the view to register the {@link _globalTreeDataProvider} in. */\r\n    public static readonly globalListViewId = 'globalList';\r\n\r\n    /** A two-way map between global names and their source document. */\r\n    private readonly _globalsMap = new BidirectionalMap<string, vscode.TextDocument>();\r\n    /** A {@link vscode.TreeDataProvider} for displaying the global list UI. */\r\n    private readonly _globalTreeDataProvider: GlobalTreeDataProvider = new GlobalTreeDataProvider();\r\n\r\n    /** An event emitter for {@link onGlobalRemoved}. */\r\n    private readonly _onGlobalRemoved = new vscode.EventEmitter<GlobalDocument>();\r\n    /** An event fired when a global is removed. */\r\n    public readonly onGlobalRemoved = this._onGlobalRemoved.event;\r\n\r\n    /** An event emitter for {@link onGlobalAdded}. */\r\n    private readonly _onGlobalAdded = new vscode.EventEmitter<GlobalDocument>();\r\n    /** An event fired when a global is added. */\r\n    public readonly onGlobalAdded = this._onGlobalAdded.event;\r\n\r\n    /** An event emitter for {@link onGlobalsCleared}. */\r\n    private readonly _onGlobalsCleared = new vscode.EventEmitter<void>();\r\n    /** An event fired when all globals are cleared. */\r\n    public readonly onGlobalsCleared = this._onGlobalsCleared.event;\r\n\r\n    /** An array of function names to check added global names against. */\r\n    private readonly _functionNames: string[];\r\n    /** An array of special symbols to check added global names against. */\r\n    private readonly _operatorSymbols: string[];\r\n\r\n    /**\r\n     * Constructs a {@link GlobalDocumentManager}.\r\n     * @param extCtx The extension context.\r\n     * @param operatorSymbols An array of operator symbols to check added global names for.\r\n     * @param functionNames An array of function names to check added global names against.\r\n     */\r\n    constructor(extCtx: vscode.ExtensionContext, operatorSymbols: string[], functionNames: string[]) {\r\n\r\n        this._operatorSymbols = operatorSymbols;\r\n        this._functionNames = functionNames;\r\n\r\n        this.initGlobalsMap(extCtx);\r\n        this.initCommands(extCtx);\r\n        this.initGlobalListUI(extCtx);\r\n        this.initEvents(extCtx);\r\n\r\n    }\r\n\r\n    initGlobalsMap(extCtx: vscode.ExtensionContext) {\r\n\r\n        // TODO: load globals from storage\r\n\r\n    }\r\n\r\n    initCommands(extCtx: vscode.ExtensionContext) {\r\n\r\n        // register commands from this._commands\r\n        for (const commandName in this._commands) {\r\n            extCtx.subscriptions.push(\r\n                vscode.commands.registerCommand(`kodeine.${commandName}`, this._commands[commandName])\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    initGlobalListUI(extCtx: vscode.ExtensionContext) {\r\n\r\n        // load globals into the global tree data provider\r\n        this._globalTreeDataProvider.updateGlobalDocuments(this.getGlobalDocuments());\r\n\r\n        extCtx.subscriptions.push(\r\n            vscode.window.registerTreeDataProvider(GlobalDocumentManager.globalListViewId, this._globalTreeDataProvider)\r\n        );\r\n\r\n    }\r\n\r\n    initEvents(extCtx: vscode.ExtensionContext) {\r\n        extCtx.subscriptions.push(\r\n            vscode.workspace.onDidCloseTextDocument(doc => this.onDidCloseTextDocument(doc))\r\n        );\r\n    }\r\n\r\n\r\n    // EVENTS\r\n\r\n    onDidCloseTextDocument(doc: vscode.TextDocument): any {\r\n\r\n        if (\r\n            doc.isUntitled\r\n            && doc.languageId === 'kode'\r\n            && this._globalsMap.hasB(doc)\r\n        ) {\r\n            // an untitled document backing a global was closed, delete the global and inform the user\r\n            let globalName = this.getGlobalNameFor(doc);\r\n            this.removeGlobal(doc);\r\n\r\n            vscode.window.showWarningMessage(`gv(${globalName}) has been removed.`, {\r\n                detail: `The untitled document gv(${globalName}) was linked to was closed.`,\r\n                modal: true\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    // GET\r\n\r\n    getGlobalNameFor(doc: vscode.TextDocument): string | undefined {\r\n        return this._globalsMap.getByB(doc);\r\n    }\r\n\r\n    getGlobalDocuments(): GlobalDocument[] {\r\n        return Array.from(this._globalsMap.entries()).map(e => ({ globalName: e[0], doc: e[1] }))\r\n    }\r\n\r\n    getIsValidGlobalDocument(doc?: vscode.TextDocument): boolean {\r\n        return !!doc && doc.languageId === 'kode' && doc.uri.scheme !== EvaluationStepsTextDocumentContentProvider.scheme;\r\n    }\r\n\r\n\r\n    // ADD, REMOVE, CLEAR\r\n\r\n    addGlobal(globalName: string, doc: vscode.TextDocument) {\r\n\r\n        this._globalsMap.add(globalName, doc);\r\n        this._onGlobalAdded.fire({ globalName, doc })\r\n        this._notifyGlobalsChanged();\r\n\r\n    }\r\n\r\n    removeGlobal(globalNameOrDoc: string | vscode.TextDocument) {\r\n\r\n        if (typeof globalNameOrDoc === 'string') {\r\n\r\n            let doc = this._globalsMap.getByA(globalNameOrDoc);\r\n\r\n            if (doc) {\r\n                this._globalsMap.deleteByA(globalNameOrDoc);\r\n                this._onGlobalRemoved.fire({ globalName: globalNameOrDoc, doc });\r\n                this._notifyGlobalsChanged();\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            let globalName = this._globalsMap.getByB(globalNameOrDoc);\r\n\r\n            if (globalName) {\r\n                this._globalsMap.deleteByB(globalNameOrDoc);\r\n                this._onGlobalRemoved.fire({ globalName, doc: globalNameOrDoc });\r\n                this._notifyGlobalsChanged();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    clearGlobals(): void {\r\n\r\n        this._globalsMap.clear();\r\n        this._onGlobalsCleared.fire();\r\n        this._notifyGlobalsChanged();\r\n\r\n    }\r\n\r\n\r\n    // NOTIFY\r\n\r\n    private _notifyGlobalsChanged(): void {\r\n        this._globalTreeDataProvider.updateGlobalDocuments(this.getGlobalDocuments());\r\n    }\r\n\r\n\r\n    // COMMANDS\r\n\r\n    private readonly _commands: Record<string, (...args: any) => any> = {\r\n\r\n        addGlobal: () => {\r\n\r\n            // check if the current document is a valid global document\r\n            if (!this.getIsValidGlobalDocument(vscode.window.activeTextEditor?.document)) {\r\n                return;\r\n            }\r\n\r\n            vscode.window.showInputBox({\r\n\r\n                title: 'Name the global',\r\n                prompt: 'Remember that Kustom limits this name to 8 characters.',\r\n\r\n                validateInput: text => {\r\n\r\n                    if (!text) {\r\n\r\n                        return 'Global name cannot be empty.'\r\n\r\n                    } else if (text.endsWith('!')) {\r\n\r\n                        // the text ends with an exclamation mark, bypass validation\r\n                        return null;\r\n\r\n                    } else {\r\n\r\n                        // global name is not empty\r\n\r\n                        // check for function name collisions\r\n\r\n                        let segments = text.split('/');\r\n                        let segmentIssues: { i: number, seg: string, msg: string }[] = [];\r\n                        let quotationMarksEncountered = false;\r\n\r\n                        for (let i = 0; i < segments.length; i++) {\r\n\r\n                            const seg = segments[i];\r\n\r\n                            let addIssue = (msg: string) => {\r\n                                segmentIssues.push({ i, seg, msg });\r\n                            }\r\n\r\n                            if (seg === '') {\r\n                                addIssue('is empty.');\r\n\r\n                            } else {\r\n\r\n\r\n                                if (seg.trimStart().length !== seg.length)\r\n                                    addIssue('has leading whitespace.');\r\n\r\n\r\n                                if (seg.trimEnd().length !== seg.length)\r\n                                    addIssue('has trailing whitespace.');\r\n\r\n                                if (seg.trim().length === 2 && this._functionNames.includes(seg.trim())) {\r\n\r\n                                    addIssue('collides with function name. Kustom will throw \"err: null\".');\r\n\r\n                                } else {\r\n\r\n                                    this._operatorSymbols.forEach(symbol => {\r\n\r\n                                        if (seg.startsWith(symbol))\r\n                                            addIssue(`starts or ends with operator \"${symbol}\".`);\r\n\r\n                                        if (seg.endsWith(symbol))\r\n                                            addIssue(`ends with operator \"${symbol}\".`);\r\n\r\n                                    });\r\n\r\n                                    ['+', '=', '!=', '~='].forEach(symbol => {\r\n                                        if (seg.includes(symbol))\r\n                                            addIssue(`contains operator \"${symbol}\" that doesn't have a generic string mode.`);\r\n                                    });\r\n\r\n                                    ['(', ')', '$', ',', '!', '~'].forEach(char => {\r\n                                        if (seg.includes(char))\r\n                                            addIssue(`contains a special character \"${char}\".`);\r\n                                    });\r\n\r\n                                    if (seg.includes('\"')) {\r\n                                        quotationMarksEncountered = true;\r\n                                        addIssue('contains a quotation mark.');\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                        if (segmentIssues.length > 0) {\r\n\r\n                            return `${segmentIssues.length} ${segmentIssues.length === 1 ? 'issue' : 'issues'} detected:\\n`\r\n                                + `${segmentIssues.map(iss => `- ${segments.length > 1 ? `Segment #${iss.i + 1} (${iss.seg})` : 'Name'} ${iss.msg}`).join('\\n')}\\n`\r\n                                + (\r\n                                    quotationMarksEncountered\r\n                                        ? `This name contains at least one quotation mark. You should only continue if you know what you are doing.\\n`\r\n                                        : `This name should be used as a quoted string (ex. gv(\"${text}\")).\\n`\r\n                                )\r\n                                + `Type ! after the global name to bypass this warning.`\r\n                        }\r\n\r\n                        // if we got this far, the name is fine\r\n                        return null;\r\n                    }\r\n\r\n                }\r\n\r\n            }).then(globalName => {\r\n\r\n                if (globalName) {\r\n\r\n                    // normalize global name\r\n                    globalName = globalName.trim().toLowerCase();\r\n\r\n                    // remove the validation override character from the end, if it's there\r\n                    if (globalName.endsWith('!'))\r\n                        globalName = globalName.substring(0, globalName.length - 1);\r\n\r\n                    // associate the document with the global name\r\n                    this.addGlobal(globalName, vscode.window.activeTextEditor!.document);\r\n\r\n                    // notify the user in the way vscode wants us to (notifications can't auto-dismiss)\r\n                    vscode.window.setStatusBarMessage(`gv(${globalName}) has been added.`, GlobalDocumentManager.statusBarMessageTimeout);\r\n\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n\r\n        removeGlobal: (globalDocument?: GlobalDocument) => {\r\n\r\n            if (globalDocument) {\r\n\r\n                // a global to remove was given (global list icon click)\r\n                this.removeGlobal(globalDocument.globalName);\r\n\r\n            } else {\r\n\r\n                // a global to remove was not given, let the user pick from a list\r\n                vscode.window.showQuickPick(\r\n\r\n                    this.getGlobalDocuments()\r\n                        .map(globalDocument => ({\r\n                            label: globalDocument.globalName,\r\n                            description: globalDocument.doc.uri.toString(),\r\n                            globalDocument\r\n                        }))\r\n\r\n                ).then(pickedItem => {\r\n\r\n                    if (pickedItem) {\r\n\r\n                        this.removeGlobal(pickedItem.globalDocument.globalName);\r\n\r\n                        // notify the user in the way vscode wants us to (notifications can't auto-dismiss)\r\n                        vscode.window.setStatusBarMessage(`gv(${pickedItem.globalDocument.globalName}) has been removed.`, GlobalDocumentManager.statusBarMessageTimeout);\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n\r\n        },\r\n\r\n        clearGlobals: () => {\r\n\r\n            this.clearGlobals();\r\n            vscode.window.setStatusBarMessage(`All globals have been removed.`, GlobalDocumentManager.statusBarMessageTimeout);\r\n\r\n        },\r\n\r\n        openGlobalDocument: (uri: vscode.Uri) => {\r\n\r\n            vscode.window.showTextDocument(uri);\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n", "\r\n/** A class handling two-way mapping between objects of type {@link TA} and {@link TB}. */\r\nexport class BidirectionalMap<TA, TB> {\r\n\r\n    private readonly _AToBMap = new Map<TA, TB>();\r\n    private readonly _BToAMap = new Map<TB, TA>();\r\n\r\n    /** Removes all entries from the map. */\r\n    clear(): void {\r\n        this._AToBMap.clear();\r\n        this._BToAMap.clear();\r\n    }\r\n\r\n    /** \r\n     * Deletes an entry from the map by its `a` value.\r\n     * @returns `true` when an entry was deleted, `false` otherwise.\r\n     */\r\n    deleteByA(a: TA): boolean {\r\n\r\n        let b = this._AToBMap.get(a);\r\n\r\n        if (b) {\r\n            this._AToBMap.delete(a);\r\n            this._BToAMap.delete(b);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /** \r\n     * Deletes an entry from the map by its `b` value.\r\n     * @returns `true` when an entry was deleted, `false` otherwise.\r\n     */\r\n    deleteByB(b: TB): boolean {\r\n\r\n        let a = this._BToAMap.get(b);\r\n\r\n        if (a) {\r\n            this._AToBMap.delete(a);\r\n            this._BToAMap.delete(b);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /** Runs the {@link callbackfn} for each `a` value of the map. */\r\n    forEachA(callbackfn: (value: TB, key: TA, map: Map<TA, TB>) => void, thisArg?: any): void {\r\n        this._AToBMap.forEach(callbackfn);\r\n    }\r\n\r\n    /** Runs the {@link callbackfn} for each `b` value of the map. */\r\n    forEachB(callbackfn: (value: TA, key: TB, map: Map<TB, TA>) => void, thisArg?: any): void {\r\n        this._BToAMap.forEach(callbackfn);\r\n    }\r\n\r\n    /** Finds a `b` value for a given `a` value. */\r\n    getByA(a: TA): TB | undefined {\r\n        return this._AToBMap.get(a);\r\n    }\r\n    \r\n    /** Finds an `a` value for a given `b` value. */\r\n    getByB(b: TB): TA | undefined {\r\n        return this._BToAMap.get(b);\r\n    }\r\n    \r\n    /** Checks whether the map contains an entry for an `a` value. */\r\n    hasA(a: TA): boolean {\r\n        return this._AToBMap.has(a);\r\n    }\r\n    \r\n    /** Checks whether the map contains an entry for a `b` value. */\r\n    hasB(b: TB): boolean {\r\n        return this._BToAMap.has(b);\r\n    }\r\n    \r\n    /** Adds a mapping between {@link a} and {@link b} to the map. Removes any existing mappings for {@link a} and {@link b}. */\r\n    add(a: TA, b: TB): this {\r\n\r\n        // delete entries first to avoid desyncs when set is called with one key that already exists and another that doesn't\r\n        this.deleteByA(a);\r\n        this.deleteByB(b);\r\n\r\n        this._AToBMap.set(a, b);\r\n        this._BToAMap.set(b, a);\r\n\r\n        return this;\r\n    }\r\n\r\n    /** The entry count for the map. */\r\n    get size(): number {\r\n        return this._AToBMap.size;\r\n    }\r\n\r\n    /** Returns an iterable of `a`, `b` pairs for every entry in the map. */\r\n    entries(): IterableIterator<[TA, TB]> {\r\n        return this._AToBMap.entries();\r\n    }\r\n\r\n    /** Returns an iterable of `a` values in the map. */\r\n    aEntries(): IterableIterator<TA> {\r\n        return this._AToBMap.keys();\r\n    }\r\n    \r\n    /** Returns an iterable of `b` values in the map. */\r\n    bEntries(): IterableIterator<TB> {\r\n        return this._AToBMap.values();\r\n    }\r\n\r\n    /** Returns the default iterator to be used when this object is used as the `of` part of a `for...of` loop. */\r\n    [Symbol.iterator](): IterableIterator<[TA, TB]> {\r\n        return this.entries();\r\n    }\r\n\r\n    /** Used to describe this object when toString() is called ([object BidirectionalMap] instead of [object Object]). */\r\n    get [Symbol.toStringTag](): string {\r\n        return 'BidirectionalMap';\r\n    }\r\n\r\n}", "import * as vscode from 'vscode';\r\nimport { BidirectionalMap } from './bidirectional-map';\r\nimport { GlobalDocument } from './global-document-manager';\r\n\r\n/** An adapter between {@link GlobalDocument}s and vscode's tree view. */\r\nexport class GlobalTreeDataProvider implements vscode.TreeDataProvider<GlobalDocument> {\r\n\r\n    /** The command to execute when a global document is selected on the list. */\r\n    private readonly openGlobalDocumentCommand = 'kodeine.openGlobalDocument';\r\n    /** The title for the command. I'm not sure if there is a point in setting this. */\r\n    private readonly openGlobalDocumentCommandTitle = 'Open global document';\r\n\r\n    /** The current list of global documents. */\r\n    private _globalDocuments: GlobalDocument[] = [];\r\n\r\n    /** An event emitter for {@link onDidChangeTreeData}. */\r\n    private _onDidChangeTreeData = new vscode.EventEmitter<GlobalDocument | undefined | void>();\r\n    readonly onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n\r\n    getTreeItem(element: GlobalDocument): vscode.TreeItem | Thenable<vscode.TreeItem> {\r\n        return {\r\n            label: element.globalName,\r\n            description: decodeURIComponent(element.doc.uri.toString()),\r\n            collapsibleState: vscode.TreeItemCollapsibleState.None,\r\n            command: {\r\n                title: this.openGlobalDocumentCommandTitle,\r\n                command: this.openGlobalDocumentCommand,\r\n                arguments: [element.doc.uri]\r\n            }\r\n        };\r\n    }\r\n\r\n    getChildren(element?: GlobalDocument): vscode.ProviderResult<GlobalDocument[]> {\r\n\r\n        if (!element)\r\n            return this._globalDocuments;\r\n        else\r\n            return undefined;\r\n\r\n    }\r\n\r\n    /** Replaces the current list of global documents and notifies vscode that it should update the tree view. */\r\n    updateGlobalDocuments(globalDocuments: GlobalDocument[]) {\r\n        this._globalDocuments = globalDocuments;\r\n        this._onDidChangeTreeData.fire(undefined);\r\n    }\r\n\r\n}"],
  "mappings": "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",
  "names": []
}

TODO:
- add a warning when a colour could not be parsed and default is used
- find out what happens when the amount argument isn't given for complex ce() modes
- should changing globals change printed evaluation steps as well?
- design an eval ctx editor to prepare for remaining function implementations

MAYBE IN THE FUTURE:
- implement global lists
- implement the scientific notation bug accurately
- find a way to implement float -> string conversion in a properly weird way
- implement int and float caps (seems like 32 bit int and float should be enforced because number works too well)
- handle large numeric constants converting to Infinity
- find a way to deal with timezones
- find a way to not remove a global when an untitled file gets saved
- persist text globals on vscode exit
- show evaluation steps tab automatically when active editor changes and it is opened beside
- react to evaluation steps text document closing (onDidCloseTextDocument is not firing)
- option to print gv() and fl() evaluation steps when printing evaluation steps
- find out what is causing ce() to be off by around 1 sometimes (example: ce(#ff0000, sat, r10) => #FFFF1A1A in kustom, #FFFF1919 in kodeine)

DONE:
- add documentation comments for newly implemented functions
- standardize documentation comments to color instead of colour
- implement ce(contrast)
# 0.1.0 RELEASED
- release as 0.1.0-alpha
- add a tips & tricks section to the readme
- create a changelog file
- implement ce()
- fix values returned from tc() being numberified too early
- implement cm()
- add snippets for remaining special characters
- implement tf()
- fix syntax highlighting for unquoted strings with spaces
- contribute settings for clock mode and first day of the week to vscode (not implementing eval ctx editor for now)
- implement df()
- stringify dates accurately (when stringifying to non-kustom format)
- implement dp()
- implement Kustom date string -> Date conversion
- implement Date -> Kustom date string conversion
- produce a parsing error when an unquoted value collides with a function name
- proper global name valiation with full warning messages
- smarter global name x function name collision prevention
- extension cleanup - add comments
- extension cleanup - EvaluationStepsDocumentManager
- extension cleanup - GlobalDocumentManager class
- handle clicking on globals linked to non-existent files
- prevent user from adding a global backed by evaluation steps
- prevent user from opening evaluation steps for evaluation steps
- don't insert unnecessary quotation marks when an evaluated part is turned into a plain text part
- replace in previous step with evaluated value of next step
- link evaluation steps document with formula source document, refresh evaluation steps after evaluation
- command to print evaluation steps (probably to virtual document)
- properly add whitespace tokens to evaluable sources
- write doc comments for the evaluation tree
- consider applying the internal module pattern to deal with circular dependencies in a cleaner fashion (https://medium.com/visual-development/how-to-fix-nasty-circular-dependency-issues-once-and-for-all-in-javascript-typescript-a04c987cf0de)
- generate static evaluation tree with results for each step as a side effect of the evaluation
- display evaluation results for each object in the formula tree
- create a social banner for github, add short description and topics
# 0.0.2 RELEASED
- write instructions on how to install in the browser
- check if it really works in the browser
- publish to the vcode marketplace as alpha
- add github link to package.json
- publish repo to github
- create readme for github and the vscode marketplace
- get a different build task for dev and prod
- use esbuild for building straight into a bundle
- bundle the extension into one file
- package and install the extension
- design an icon
- implement globals
- make the extension work in browser
- write the formula being evaluated into a treeview
- make sure fl() doesn't print a $ when given an empty string as eval formula
- fix syntax highlighting (again) (turned into a complete grammar overhaul)
- implement fl()
- implement mu(min) and mu(max) (support an array of remaining arguments)
- make evaluation errors return empty string and continue instead of throwing completely
- implement mu()
- implement tc()
- add a \" snippet for inserting tc(utf, 22)
- add a \n snippet for inserting tc(utf, 0a)
- fix syntax highlighting for unquoted string arguments after a quoted string argument
- simple negation -1 => -1.0 behaviour implementation (needs more work)
- fix syntax highlighting for numeric constants
- special highlighting for problematic chars (! ~)
- syntax highlight unquoted strings
- on parse error try to find closing dollar sign, if found, continue parsing instead of completely throwing
- catch evaluation errors in formula, append empty string, report errors via evalCtx
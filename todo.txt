TODO:
- consider applying the internal module pattern to deal with circular dependencies in a cleaner fashion
- write doc comments for the evaluation tree
- command to print evaluation steps (probably to virtual document)
- clean up extension code by introducing a GlobalManager class instead of functions in extension.ts
- persist text globals on vscode exit
- handle clicking on globals linked to non-existent files
- implement df()
- implement tf()
- design an eval ctx editor

MAYBE IN THE FUTURE:
- ...

DONE:
- generate static evaluation tree with results for each step as a side effect of the evaluation
- display evaluation results for each object in the formula tree
- create a social banner for github, add short description and topics
- write instructions on how to install in the browser
- check if it really works in the browser
- publish to the vcode marketplace as alpha
- add github link to package.json
- publish repo to github
- create readme for github and the vscode marketplace
- get a different build task for dev and prod
- use esbuild for building straight into a bundle
- bundle the extension into one file
- package and install the extension
- design an icon
- implement globals
- make the extension work in browser
- write the formula being evaluated into a treeview
- make sure fl() doesn't print a $ when given an empty string as eval formula
- fix syntax highlighting (again) (turned into a complete grammar overhaul)
- implement fl()
- implement mu(min) and mu(max) (support an array of remaining arguments)
- make evaluation errors return empty string and continue instead of throwing completely
- implement mu()
- implement tc()
- add a \" snippet for inserting tc(utf, 22)
- add a \n snippet for inserting tc(utf, 0a)
- fix syntax highlighting for unquoted string arguments after a quoted string argument
- simple negation -1 => -1.0 behaviour implementation (needs more work)
- fix syntax highlighting for numeric constants
- special highlighting for problematic chars (! ~)
- syntax highlight unquoted strings
- on parse error try to find closing dollar sign, if found, continue parsing instead of completely throwing
- catch evaluation errors in formula, append empty string, report errors via evalCtx